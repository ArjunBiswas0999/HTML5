// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
sap.ui.base.Object.extend("sap.uiext.inbox.TCMMetadata",{ 
			
			    constructor : function() {
			
			       sap.ui.base.Object.apply(this);
			       this.oServiceMetadata= null;
			       this.serviceSupportsFilterOption=false;
			       this.oConstants = sap.uiext.inbox.SubstitutionRulesManagerConstants;
			    }
			
});
	


sap.uiext.inbox.TCMMetadata.prototype.setServiceMetadata= function(oServiceMetadata){
	if(oServiceMetadata)
	this.oServiceMetadata= oServiceMetadata;
	this._isCustomStatusSupported();
};

sap.uiext.inbox.TCMMetadata.prototype.getServiceMetadata= function(){
	return this.oServiceMetadata;
};

/*sap.uiext.inbox.TCMMetadata.prototype._isFilterOptionsSupported= function(){
	this.serviceSupportsFilterOption=false;
	var entityTypes= this.getServiceMetadata().dataServices.schema[0].entityType;
	var that=this;
	jQuery.each(entityTypes,function(index,entity){
		if(entity.name===sap.uiext.inbox.InboxConstants.customStatusData.ENTITY_NAME){
			that.serviceSupportsFilterOption=true;
			return false;
		}
		
	}); 
};*/
sap.uiext.inbox.TCMMetadata.prototype._isCustomStatusSupported = function(){
	this.serviceSupportsFilterOption=false;
	var that= this;
	var aEntityTypes= this.getServiceMetadata().dataServices.schema[0].entityType;
	var oTaskEntity=null;
	var aTaskProperties=null;
	jQuery.each(aEntityTypes,function(index,entity){
		if(entity.name===sap.uiext.inbox.InboxConstants.ENTITY_NAME_TASK_COLLECTION){
			aTaskProperties=entity.property;
			jQuery.each(aTaskProperties,function(index,prop){
				if(prop.name===sap.uiext.inbox.InboxConstants.PROPERTY_NAME_CUSTOM_STATUS){
					that.serviceSupportsFilterOption=true;
					return false;
				}
			});
			
			return false;
		}
		
	});
	
	
};

sap.uiext.inbox.TCMMetadata.prototype.isCreatesubstitutionRuleSupported = function(){
	var bServiceSupportsCreateSubstitutionRule=true;
	var that= this;
	var aFimports= this.getServiceMetadata().dataServices.schema[0].entityContainer[0].functionImport;
	var oTaskEntity=null;
	var aTaskProperties=null;
	jQuery.each(aFimports,function(index,fimport){
		if(fimport.name===that.oConstants.CREATE_SUBSTITUTION_RULE){
			bServiceSupportsCreateSubstitutionRule=false;
			return false;
		}
		
	});
	return bServiceSupportsCreateSubstitutionRule;
};

sap.uiext.inbox.TCMMetadata.prototype._isSupportsRelease = function(){
	var sEntityTypeName = sap.uiext.inbox.InboxConstants.ENTITY_NAME_TASK_COLLECTION;
	return this._isPropertyAvailable("SupportsRelease", sEntityTypeName);
};

sap.uiext.inbox.TCMMetadata.prototype._isSupportsClaim = function(){
	var sEntityTypeName = sap.uiext.inbox.InboxConstants.ENTITY_NAME_TASK_COLLECTION;
	return this._isPropertyAvailable("SupportsClaim", sEntityTypeName);
};

sap.uiext.inbox.TCMMetadata.prototype._isSupportsForward = function(){
	var sEntityTypeName = sap.uiext.inbox.InboxConstants.ENTITY_NAME_TASK_COLLECTION;
	return this._isPropertyAvailable("SupportsForward", sEntityTypeName);
};
	
sap.uiext.inbox.TCMMetadata.prototype._isPropertyAvailable = function(sPropertyName, sEntityTypeName){
	var isPropertyAvailable = false;
	var aEntityTypes= this.getServiceMetadata().dataServices.schema[0].entityType;
	var aTaskProperties=null;
	jQuery.each(aEntityTypes,function(index,entity){
		if(entity.name===sEntityTypeName){
			aTaskProperties=entity.property;
			jQuery.each(aTaskProperties,function(index,prop){
				if(prop.name===sPropertyName){
					isPropertyAvailable = true;
					return false;
				} 
			});
		}
	});
	return isPropertyAvailable;
};
jQuery.sap.declare('sap.uiext.inbox.library-all');
jQuery.sap.declare('sap.uiext.inbox.TCMMetadata'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.InboxConfiguration");
	
	/**
	 * Constructor for InboxConfiguration
	 *
	 * @class
	 * Configuration for Inbox
	 * 
	 *  @public
	 *  @name sap.uiext.inbox.InboxConfiguration
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.InboxConfiguration",{
			
			    constructor : function() {
			
			        sap.ui.base.Object.apply(this);
			        this.iSearchUsersMaxLimit = 100;
			    }
			
		});
	
	/**
	 * 
	 * Setter for Max Limit for user search in Inbox
	 * 
	 * @name sap.uiext.inbox.InboxConfiguration.prototype.setSearchUersMaxLimit
	 * @function
	 * @param {number} 
	 *         iMaxLimit
	 *         
	 * @public
	 * 
	 */
	sap.uiext.inbox.InboxConfiguration.prototype.setSearchUsersMaxLimit = function(iMaxLimit){
		if(typeof iMaxLimit === "number"){
			this.iSearchUsersMaxLimit = iMaxLimit;
		}
	};
	
	/**
	 * 
	 * Getter for Max Limit for user search in Inbox
	 * 
	 *  @name sap.uiext.inbox.InboxFilters.prototype.getSearchUersMaxLimit
	 * 	@function
	 * 	  
	 *  @type number
	 *  @public
	 */
	sap.uiext.inbox.InboxFilters.prototype.getSearchUsersMaxLimit = function(){
		return this.iSearchUsersMaxLimit;
	};
}; // end of sap/uiext/inbox/InboxConfiguration.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxConstants') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.InboxConstants");
sap.uiext.inbox.InboxConstants = function(){
};

sap.uiext.inbox.InboxConstants.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

sap.uiext.inbox.InboxConstants.mEntities = {
	taskMetadata: { 
		propertiesLabel: ["INBOX_TASK_TITLE","INBOX_START_DATE","INBOX_CREATED_BY_NAME","INBOX_DUE_DATE","INBOX_STATUS","INBOX_PRIORITY"],
		properties: ["TaskTitle","CreatedOn","CreatedByName","CompletionDeadLine","Status","Priority"],
		customAttributes: []
	}
};

sap.uiext.inbox.InboxConstants.TABLE_VIEW_TECH_NAMES = {
		INBOX_TABLE_VIEW_TASK_TITLE:"TaskTitle",
		INBOX_TABLE_VIEW_CREATION_DATE:"CreatedOn",
		INBOX_CREATED_BY_NAME:"CreatedByName",
		INBOX_TABLE_VIEW_DUE_DATE:"CompletionDeadLine",
		INBOX_TABLE_VIEW_STATUS:"Status",
		INBOX_TABLE_VIEW_PRIORITY:"Priority"
};

sap.uiext.inbox.InboxConstants.tableViewImageSelected = "table_view_selected.png";
sap.uiext.inbox.InboxConstants.tableViewImageUnselected = "table_view_unselected.png";
sap.uiext.inbox.InboxConstants.rrViewImageSelected = "rr_view_selected.png";
sap.uiext.inbox.InboxConstants.rrViewImageUnselected = "rr_view_unselected.png";
sap.uiext.inbox.InboxConstants.filterViewImageSelected = "drilldown_filter_selected.png";
sap.uiext.inbox.InboxConstants.filterViewImageUnSelected = "drilldown_filter_unselected.png";
sap.uiext.inbox.InboxConstants.nxtBtnImage = "next.png";
sap.uiext.inbox.InboxConstants.prevBtnImage = "previous.png";
sap.uiext.inbox.InboxConstants.refreshImage = "refresh.png";
sap.uiext.inbox.InboxConstants.refreshImageGif = "refresh_ani.gif";
sap.uiext.inbox.InboxConstants.loaderImage = "loader_ani.gif";
sap.uiext.inbox.InboxConstants.completeImage = "complete_action.png";
sap.uiext.inbox.InboxConstants.claimImage = "claim_action.png";
sap.uiext.inbox.InboxConstants.releaseImage = "release_action.png";
sap.uiext.inbox.InboxConstants.forwardTaskImage = "forwardTask.png"
sap.uiext.inbox.InboxConstants.settingsImage = "settings_button_regular.png";
sap.uiext.inbox.InboxConstants.settingsImageHover = "settings_button_hover.png";
sap.uiext.inbox.InboxConstants.sapLogo = "sap_logo.gif";
sap.uiext.inbox.InboxConstants.taskInitiatorDefaultImage = "taskInitiator_default.png";
sap.uiext.inbox.InboxConstants.attachmentsImage = "attachment.png";
sap.uiext.inbox.InboxConstants.commentsImage = "comments.png";
sap.uiext.inbox.InboxConstants.customAttributesImage = "custom_attributes.png";
sap.uiext.inbox.InboxConstants.COLON = ":";
sap.uiext.inbox.InboxConstants.DOT = String.fromCharCode(183);//ASCII Character Middle DOT "Â·".
sap.uiext.inbox.InboxConstants.LESS_THAN = String.fromCharCode(60); //ASCII Character for "<"
sap.uiext.inbox.InboxConstants.GREATER_THAN = String.fromCharCode(62); //ASCII Character for ">"
sap.uiext.inbox.InboxConstants.sortAscImage = "sort_asc.gif";
sap.uiext.inbox.InboxConstants.sortDescImage = "sort_desc.gif";
sap.uiext.inbox.InboxConstants.SPACE = " ";
sap.uiext.inbox.InboxConstants.EQUALS = "=";
sap.uiext.inbox.InboxConstants.taskCategoryImage = "task.png";
sap.uiext.inbox.InboxConstants.alertCategoryImage = "alert.png";
sap.uiext.inbox.InboxConstants.notificationCategoryImage = "notification.png";
sap.uiext.inbox.InboxConstants.rrViewAlertCategoryImage = "rr_view_alert.png";
sap.uiext.inbox.InboxConstants.rrViewNotificationCategoryImage = "rr_view_notification.png";
sap.uiext.inbox.InboxConstants.todoCategoryImage = "todo.png";
sap.uiext.inbox.InboxConstants.rrViewTodoCategoryImage = "rr_view_todo.png";

sap.uiext.inbox.InboxConstants.defaultView_URLParameter = "sap-ui-inbox-defaultView";

sap.uiext.inbox.InboxConstants.statusTooltip = {COMPLETED: "INBOX_FILTER_STATUS_COMPLETED",
   	READY: "INBOX_FILTER_STATUS_READY",
   	RESERVED: "INBOX_FILTER_STATUS_RESERVED",
   	IN_PROGRESS: "INBOX_FILTER_STATUS_IN_PROGRESS",
   	SELECTED: "INBOX_FILTER_STATUS_RESERVED",
   	STARTED: "INBOX_FILTER_STATUS_IN_PROGRESS",
   	COMMITTED : "INBOX_FILTER_STATUS_COMPLETED"
   	};

sap.uiext.inbox.InboxConstants.prioTooltip = {VERY_HIGH: "INBOX_FILTER_PRIORITY_VERY_HIGH",
		HIGH: "INBOX_FILTER_PRIORITY_HIGH",
		MEDIUM: "INBOX_FILTER_PRIORITY_MEDIUM",
		LOW: "INBOX_FILTER_PRIORITY_LOW",
		1: "INBOX_FILTER_PRIORITY_VERY_HIGH",
		2: "INBOX_FILTER_PRIORITY_VERY_HIGH",
		3: "INBOX_FILTER_PRIORITY_HIGH",
		4: "INBOX_FILTER_PRIORITY_HIGH",
		5: "INBOX_FILTER_PRIORITY_MEDIUM",
		6: "INBOX_FILTER_PRIORITY_LOW",
		7: "INBOX_FILTER_PRIORITY_LOW",
		8: "INBOX_FILTER_PRIORITY_LOW",
		9: "INBOX_FILTER_PRIORITY_LOW"};

sap.uiext.inbox.InboxConstants.statusImages = {COMPLETED: "completed_status.png",
			   	READY: "ready_status.png",
			   	RESERVED: "reserved_status.png",
			   	IN_PROGRESS: "inprocess_status.png",
			   	SELECTED: "reserved_status.png",
			   	STARTED: "inprocess_status.png",
			   	COMMITTED : "completed_status.png"};

sap.uiext.inbox.InboxConstants.prioImages = {VERY_HIGH: "very_high_priority.png",
   				HIGH: "high_priority.png",
   				MEDIUM: "medium_priority.png",
   				LOW: "low_priority.png",
   				1: "very_high_priority.png",
   				2: "very_high_priority.png",
   				3: "high_priority.png",
   				4: "high_priority.png",
   				5: "medium_priority.png",
   				6: "low_priority.png",
   				7: "low_priority.png",
   				8: "low_priority.png",
   				9: "low_priority.png"};

sap.uiext.inbox.InboxConstants.taskCategoryImages = {TASK: "task.png", 
		ALERT: "alert.png",
		NOTIFICATION: "notification.png",
		TODO: "todo.png"
};

sap.uiext.inbox.InboxConstants.taskCategoryToolTip = {TASK: "INBOX_TASK_CATEGORY",
	ALERT: "INBOX_ALERT_CATEGORY",
	NOTIFICATION: "INBOX_NOTIFICATION_CATEGORY",
	TODO: "INBOX_TODO_CATEGORY"
};

sap.uiext.inbox.InboxConstants.messageTypeIcons = {error: "error.png",
	warning: "warning.png",
	success: "success.png",
	info: "Info.png"
	};
sap.uiext.inbox.InboxConstants.statusMap={
		COMPLETED: "INBOX_FILTER_STATUS_COMPLETED",
	   	READY: "INBOX_FILTER_STATUS_READY",
	   	RESERVED: "INBOX_FILTER_STATUS_RESERVED",
	   	IN_PROGRESS: "INBOX_FILTER_STATUS_IN_PROGRESS"
		
};

sap.uiext.inbox.InboxConstants.messageTypeToolTip = {error: "INBOX_MSG_STATUS_ERROR",
		warning: "INBOX_MSG_STATUS_WARN",
		success: "INBOX_MSG_STATUS_SUCCESS",
		info: "INBOX_MSG_STATUS_INFO"
		};

sap.uiext.inbox.InboxConstants.mRRSortMap = {li_creationDate: "sortByStartDate",
		li_status: "sortByStatus",
		li_taskTitle : "sortByTaskTitle"
		};

sap.uiext.inbox.InboxConstants.closeImg= "close_button.png";
sap.uiext.inbox.InboxConstants.closeHovImg= "close_hover.png";

sap.uiext.inbox.InboxConstants.aFilterMetaData = [
              {name: "INBOX_FILTER_TASK_TYPE", attributes: []},
 				{name: "INBOX_FILTER_PRIORITY", attributes: ["INBOX_FILTER_PRIORITY_LOW","INBOX_FILTER_PRIORITY_MEDIUM","INBOX_FILTER_PRIORITY_HIGH","INBOX_FILTER_PRIORITY_VERY_HIGH"]},
 				{name: "INBOX_FILTER_STATUS", attributes: ["INBOX_FILTER_STATUS_READY","INBOX_FILTER_STATUS_RESERVED","INBOX_FILTER_STATUS_IN_PROGRESS"]},
 				{name: "INBOX_FILTER_CREATION_DATE", attributes: ["INBOX_FILTER_DATETIME_TODAY","INBOX_FILTER_DATETIME_WEEK","INBOX_FILTER_DATETIME_15DAYS","INBOX_FILTER_DATETIME_MONTH"]},
 				{name: "INBOX_FILTER_DUE_DATETIME", attributes: ["INBOX_FILTER_DUE_DATETIME_TODAY","INBOX_FILTER_DUE_DATETIME_WEEK","INBOX_FILTER_DUE_DATETIME_15DAYS","INBOX_FILTER_DUE_DATETIME_MONTH"]}
 				];

sap.uiext.inbox.InboxConstants.rightAlignedTypes = ["java.lang.Integer", "java.math.BigDecimal", "java.lang.Long", "java.lang.Float"];
sap.uiext.inbox.InboxConstants.decisionOptionsFunctionImport = "DecisionOptions";
sap.uiext.inbox.InboxConstants.decisionExecutionFunctionImport = "Decision";
sap.uiext.inbox.InboxConstants.claimFunctionImport = "Claim";
sap.uiext.inbox.InboxConstants.releaseFunctionImport = "Release";

sap.uiext.inbox.InboxConstants.tableView = 'sap_inbox_list';
sap.uiext.inbox.InboxConstants.rowRepeaterView = 'sap_inbox_stream';
sap.uiext.inbox.InboxConstants.inboxViews = [sap.uiext.inbox.InboxConstants.tableView, sap.uiext.inbox.InboxConstants.rowRepeaterView];

sap.uiext.inbox.InboxConstants.customAction = "customAction";
sap.uiext.inbox.InboxConstants.sapOrigin = "SAP__Origin";

sap.uiext.inbox.InboxConstants.taskDefinitionDecisionOptionsMap = {};
sap.uiext.inbox.InboxConstants.oTaskDefinitionCustomAttributesMap = {};
sap.uiext.inbox.InboxConstants.oTaskInstanceCustomAttributeValuesMap = {};

sap.uiext.inbox.InboxConstants.forwardSlash = "/";
sap.uiext.inbox.InboxConstants.amperSand = "&";
sap.uiext.inbox.InboxConstants.query = "?";
sap.uiext.inbox.InboxConstants.formatJSONURLParam = "$format=json";
sap.uiext.inbox.InboxConstants.acceptHeaderforJSON = "application/json";
sap.uiext.inbox.InboxConstants.REFRESH_ON_DATE_PATTERN = "MMM dd, HH:mm";
sap.uiext.inbox.InboxConstants.FORWARD = "Forward";


sap.uiext.inbox.InboxConstants.customAttributeNavigationParam = "CustomAttributeData";
sap.uiext.inbox.InboxConstants.taskDefinitionNavigationParam = "TaskDefinitionData";


sap.uiext.inbox.InboxConstants.UserInfoCollection = "UserInfoCollection";

sap.uiext.inbox.InboxConstants.TaskDefinitionCollection = {
		entityName : "TaskDefinitionCollection",
	  	navParam : {
															   
	  				customAttrDefn : "CustomAttributeDefinitionData"
		},
		properties : {
			taskDefnID : "TaskDefinitionID"
		}
};

sap.uiext.inbox.InboxConstants.TaskCollection = {
		entityName :"TaskCollection",
		navParam : {
			   
				customAttrValues : "CustomAttributeData",
				comments		 : "Comments"
		},
		properties : {
				instanceID : "InstanceID"
		}
};


sap.uiext.inbox.InboxConstants.mEntitiesToElements = {
		taskMetadata: { 
			sap_inbox_list : {
				columnsMap : {
					TaskTitle : "TaskTitle",
					CreatedOn : "CreatedOn",
					CompletionDeadLine : "CompletionDeadLine",
					Status : "Status",
					Priority : "Priority"
				}
			},
			sap_inbox_stream: {
				sorterMap : {
					CreatedOn : "li_creationDate",
					TaskTitle : "li_taskTitle",
					Status	  : "li_status"
				}
			},
		}
	};
sap.uiext.inbox.InboxConstants.ENTITY_NAME_TASK_COLLECTION= "Task";
sap.uiext.inbox.InboxConstants.PROPERTY_NAME_CUSTOM_STATUS= "StatusText";

sap.uiext.inbox.InboxConstants.mTooltipforActionButtonsinRR = {
		show : {
			customAttributesSegBtn :"INBOX_SHOW_CUSTOM_ATTRIBUTES",
			commentsSegBtn :"INBOX_SHOW_COMMENTS"
		},
		hide : {
			customAttributesSegBtn :"INBOX_HIDE_CUSTOM_ATTRIBUTES",
			commentsSegBtn :"INBOX_HIDE_COMMENTS"
		}
}

sap.uiext.inbox.InboxConstants.NAVIGATION_DESCRIPTION="Description";
sap.uiext.inbox.InboxConstants.NAVIGATION_TASKDEFINITION="TaskDefinitionData";

sap.uiext.inbox.InboxConstants.TABLE_COLUMN = {TASK_TITLE: 0,
   	CREATED_ON: 1,
   	CREATED_BY: 2,
   	COMPLETION_DEADLINE: 3,
   	STATUS: 4,
   	PRIORITY: 5,
   	};

}; // end of sap/uiext/inbox/InboxConstants.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxLink') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
 jQuery.sap.declare("sap.uiext.inbox.InboxLink");
 
 
 sap.ui.commons.Link.extend("sap.uiext.inbox.InboxLink", {
	init: function(){
		if (sap.ui.commons.Link.prototype.init) { 
		      sap.ui.commons.Link.prototype.init.apply(this, arguments); 
		    }
		this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	}, 
	
	metadata : {                             
		properties : {
        "overdue" : {type : "boolean", defaultValue : false}                
		}
	},
	
	setOverdue: function(value){
		this.setProperty('overdue',value);
		if(value){
			this.addStyleClass("sapUiExtInboxRedColor");
			//this.setText("! "+this.getText());
		}else{
			this.removeStyleClass("sapUiExtInboxRedColor");
		}
		return this;
	},
	
    onclick : function(oEvent) {
			 if (this.getEnabled()) {
				 if (!this.firePress({windowEvent:oEvent})) {
					oEvent.preventDefault();
				}
			} else {
				oEvent.preventDefault();
			}
		},
	setText: function(value) {
			if(value !== undefined)
			 {
			 	var sValue = value ? value.replace(/^\s+|\s+$/g,'') : value;
			 	var lessThanSymbol =  sap.uiext.inbox.InboxConstants.LESS_THAN;
			 	var greaterThanSymbol = sap.uiext.inbox.InboxConstants.GREATER_THAN;
			 	if(!sValue) {
					value = lessThanSymbol + this._oBundle.getText("INBOX_TASK_TITLE_NOTAVAILABLE_MSG") + greaterThanSymbol;
			 	}
			}
	    sap.ui.commons.Link.prototype.setText.call(this,[value]);
	},

	setTooltip : function(value) {
		    
		    var sValue = value ? value.replace(/^\s+|\s+$/g,'') : value;
			if(!sValue) {
				value = this._oBundle.getText("INBOX_TASK_TITLE_NOTAVAILABLE_MSG");
			}
			else {
			value = sValue+"\n"+this._oBundle.getText("INBOX_CURRENT_TASKTITLE_TOOLTIP");
			}
			 sap.ui.commons.Link.prototype.setTooltip.call(this,value);
	},
	
	renderer: function(oRenderManager, oLink) {
	var rm = oRenderManager,
		r = sap.ui.commons.LinkRenderer;

	// Return immediately if control is invisible
	if (!oLink.getVisible()) {
		return;
	}

	// Link is rendered as a "<Link>" element
	rm.write("<a");
	rm.writeControlData(oLink);

	rm.writeAccessibilityState(oLink);

	if (!oLink.getEnabled()) {
		rm.addClass("sapUiLnkDsbl");
		rm.writeAttribute("disabled", "true");
	} else {
		rm.addClass("sapUiLnk");
	}
	rm.writeClasses();

	if (oLink.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oLink.getTooltip_AsString());
	}

	if (oLink.getHref()) {
		rm.writeAttributeEscaped("href", oLink.getHref());
	}	else {
		rm.writeAttribute("href", "javascript:void(0);");
	}

	if (oLink.getTarget()) {
		rm.writeAttributeEscaped("target", oLink.getTarget());
	}

	if (!oLink.getEnabled()) {
		rm.writeAttribute("tabIndex", "-1");
	} else {
		rm.writeAttribute("tabIndex", "0");
	}

	if (oLink.getWidth()) {
		rm.addStyle("width", oLink.getWidth());
	}
	rm.writeStyles();

	// Close the starting tag
	rm.write(">");

	// Write the Link label
	if (oLink.getText()) {
		var text = oLink.getText();
		if(oLink.getOverdue()){
			text = "! "+text;
		}
		rm.writeEscaped(text);
	}

	// Close all tags
	rm.write("</a>");

}

});
}; // end of sap/uiext/inbox/InboxLink.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxPrimaryFilterEnum') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
	jQuery.sap.declare("sap.uiext.inbox.InboxPrimaryFilterEnum");
	
	/**
	 *  @class
	 * 	Enumeration for Primary Filters
	 *  This value will be applied for the DropDown Filter in Inbox
	 *  
	 * @static
	 * @public
	 */
	sap.uiext.inbox.InboxPrimaryFilterEnum = {
			/**
			 * Primary Filter for Open Tasks
			 * @public
			 */
			OPEN: {key: "li_openTasks", value: "open"},
			/**
			 * Primary Filter for Completed Tasks
			 * @public
			 */
			COMPLETED: {key: "li_completedTasks" ,value : "completed"},
			/**
			 * Primary Filter for Escalated Tasks
			 * @public
			 */
			ESCALATED: {key: "li_escalatedTasks" , value : "escalated"},
			/**
			 * Primary Filter for Overdue Tasks
			 * @public
			 */
			OVERDUE: {key: "li_overdueTasks" , value: "overdue"}
	};
}; // end of sap/uiext/inbox/InboxPrimaryFilterEnum.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.InboxRenderer");

/**
 * @class Inbox renderer. 
 * @static
 */
sap.uiext.inbox.InboxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.InboxRenderer.render = function(rm, oControl){ 
	// write the HTML into the render manager
    rm.write("<div");
    rm.writeControlData(oControl);
    rm.writeAttribute("class","sapUiExtInbox"); 
    rm.write(">"); // SPAN element
    rm.renderControl(oControl.vLayout);
    rm.write("</div>");
};

}; // end of sap/uiext/inbox/InboxRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxSecondaryFilterValuesEnum') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
	jQuery.sap.declare("sap.uiext.inbox.InboxSecondaryFilterValuesEnum");
	
	sap.uiext.inbox.InboxSecondaryFilterValuesEnum = function(){
		throw new Error();
	};
	
	
	/**
	 * 	@class
	 * 	Enumeration for Secondary Filter Values
	 *    
	 * 	@static
	 * 	@public
	 */
	sap.uiext.inbox.InboxSecondaryFilterValuesEnum = {
		/**
		 * Enum Values displayed by the Status Secondary Filter dropdown are
			 *<br><i> Ready </i>      :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.READY </br>
			 *<br><i>Reserved </i>    :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.RESERVED  </br>
			 *<br><i>InProgress </i>  :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.INPROGRESS  </br>
		 * @public
		 */
		Status : {
			/**
			 * Enum Value for Ready Status Secondary Filter
			 * @public
			 */
			READY: {
						//TODO: change to use _getfilters from inboxUtils instead of creating here..
						key: "READY",
						uiKey: "INBOX_FILTER_STATUS_READY" ,
						filterKey: "readyStat"/*,
						filter: new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "READY")*/
			},
			/**
			 * Enum Values for Reserved Status Secondary Filter
			 * @public
			 */
			RESERVED: {
						key: "RESERVED",
						uiKey: "INBOX_FILTER_STATUS_RESERVED" , 
						filterKey: "resStat"/*,
						filter: new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "RESERVED")*/
			},
			/**
			 * Enum Values for In Progress Status Secondary Filter
			 * @public
			 */
			INPROGRESS: {
						key: "IN_PROGRESS",
						uiKey: "INBOX_FILTER_STATUS_IN_PROGRESS", 
						filterKey: "InProStat"/*,
						filter: new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "IN_PROGRESS")*/
			}
		},
	
		/**
		 * 
		 *  Enum Values displayed by Priority Secondary Filter dropdown are
		 * <br> <i> Low </i>     : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.LOW </br>
		 * <br> <i> Medium</i>   : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.MEDIUM </br>
		 * <br> <i> High </i>    : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.HIGH</br>
		 * <br> <i> Very High</i>: sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.VERYHIGH</br> 
		 * @public
		 */
		Priority : {
			/**
			 * Enum Values for Low Priority Secondary Filter
			 * @public
			 */
			LOW: {
						key: "LOW",
						uiKey: "INBOX_FILTER_PRIORITY_LOW" ,
						filterKey: "lowPrio"/*,
						filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "LOW")*/
			},
			/**
			 * Enum Values for Medium Priority Secondary Filter
			 * @public
			 */
			MEDIUM: {
						key: "MEDIUM",
						uiKey: "INBOX_FILTER_PRIORITY_MEDIUM" ,
						filterKey: "medPrio"/*,
						filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "MEDIUM")*/
			},
			/**
			 * Enum Values for High Priority Secondary Filter
			 * @public
			 */
			HIGH: {
						key: "HIGH",
						uiKey: "INBOX_FILTER_PRIORITY_HIGH" ,
						filterKey: "hiPrio"/*,
						filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "HIGH")*/
			},
			/**
			 * Enum Values for Very High Priority Secondary Filter
			 * @public
			 */
			VERYHIGH: {
						key: "VERY_HIGH",
						uiKey: "INBOX_FILTER_PRIORITY_VERY_HIGH" ,
						filterKey: "veryhiPrio"/*,
						filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "VERY_HIGH")*/
			}
		},
	
		/**
		 * 
		 * Enum Values displayed by the StartDate Secondary Filter are
		     * <br> <i> Today </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.TODAY  </br>
			 * <br> <i> Last7Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST7DAYS </br>
			 * <br> <i>Last15Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST15DAYS </br>
			 * <br> <i>Last30Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST30DAYS </br>
		 * @public
		 * 
		 */
		StartDate : {
			/**
			 * Enum Values for Today StartDate Secondary Filter
			 * @public
			 */
			TODAY: {
						key: "Today",
						uiKey: "INBOX_FILTER_DATETIME_TODAY" ,
						filterKey: "today"/*,
						filter: new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, "")*/
			},
			/**
			 * Enum Values for Last 7 Days StartDate Secondary Filter
			 * @public
			 */
			LAST7DAYS: {
						key: "Last_7_days",
						uiKey: "INBOX_FILTER_DATETIME_WEEK" ,
						filterKey: "last7"/*,
						filter: new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, "")*/
			},
			/**
			 * Enum Values for Last 15 Days StartDate Secondary Filter
			 * @public
			 */
			LAST15DAYS: {
						key: "Last_15_days",
						uiKey: "INBOX_FILTER_DATETIME_15DAYS" ,
						filterKey: "last15"/*,
						filter: new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, "")*/
			},
			/**
			 * Enum Values for Last 30 Days StartDate Secondary Filter
			 * @public
			 */
			LAST30DAYS: {
						key: "Last_30_days",
						uiKey: "INBOX_FILTER_DATETIME_MONTH" ,
						filterKey: "last30"/*,
						filter: new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, "")*/
			}
		},
	
		/**
		 * Enum Values displayed by DueDate Secondary Filter dropdown are 
		 * <br><i> Today    </i> : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.TODAY </br>
		 * <br><i> Next7Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT7DAYS  </br>
		 * <br><i> Next15Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT15DAYS  </br>
		 * <br><i> Next30Days </i> :  sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT30DAYS  </br>
		 * @public
		 * 
		 */
		DueDate : {
			/**
			 * Enum Values for Today Due Date Secondary Filter
			 * @public
			 */
			TODAY: {
				key: "Today",
				uiKey: "INBOX_FILTER_DUE_DATETIME_TODAY" ,
				filterKey: "dueDateToday"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			},
			/**
			 * Enum Values for Next 7 Days Due Date Secondary Filter
			 * @public
			 */
			NEXT7DAYS: {
				key: "Next_7_days",
				uiKey: "INBOX_FILTER_DUE_DATETIME_WEEK" ,
				filterKey: "dueDatenext7"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			},
			/**
			 * Enum Values for Next 15 Days Due Date Secondary Filter
			 * @public
			 */
			NEXT15DAYS: {
				key: "Next_15_days",
				uiKey: "INBOX_FILTER_DUE_DATETIME_15DAYS" ,
				filterKey: "dueDatenext15"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			},
			/**
			 * Enum Values for Next 30 Days Due Date Secondary Filter
			 * @public
			 */
			NEXT30DAYS: {
				key: "Next_30_days",
				uiKey: "INBOX_FILTER_DUE_DATETIME_MONTH" ,
				filterKey: "dueDatenext30"/*,
				filter: new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff(0, false))*/
			}
		}
};
}; // end of sap/uiext/inbox/InboxSecondaryFilterValuesEnum.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
// Utility functions for Inbox
jQuery.sap.declare("sap.uiext.inbox.InboxUtils");

jQuery.sap.require('sap.ui.model.odata.Filter'); // unlisted dependency retained



sap.uiext.inbox.InboxUtils = function(){
	throw new Error();
};

sap.uiext.inbox.InboxUtils._getStatusFilters = function(sValue) {
	switch(sValue){
	case "READY":
		 return new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "READY");
	case "RESERVED":
		return new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "RESERVED");
	case "IN_PROGRESS":
		return new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "IN_PROGRESS");
	}
};


sap.uiext.inbox.InboxUtils._getPriorityFilters = function(sValue) {
	switch(sValue){
		case "LOW":
			return new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "LOW");
		case "MEDIUM":
			return new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "MEDIUM");
		case "HIGH":
			return new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "HIGH");
		case "VERY_HIGH":
			return new sap.ui.model.Filter("Priority", sap.ui.model.FilterOperator.EQ, "VERY_HIGH");
	}
};


sap.uiext.inbox.InboxUtils._getDueDateFilters = function(sValue) {
		var fromDate = this._getFormattedDateTimeOff(0);
		var formD = undefined;
		switch(sValue){
			case "Today":
				formD = this._getFormattedDueDateTimeOff(1);
				break;
			case "Next_7_days":
				formD = this._getFormattedDueDateTimeOff(7);
				break;
			case "Next_15_days":
				formD = this._getFormattedDueDateTimeOff(15);
				break;
			case "Next_30_days":
				formD = this._getFormattedDueDateTimeOff(30);
				break;
		}
		return new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD.toUTCString()},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate.toUTCString()}], true);
};

sap.uiext.inbox.InboxUtils._getDateTimeFilters = function(sValue) {
	var formD = undefined;
	switch(sValue){
		case "Today":
			formD = this._getFormattedDateTimeOff(0, false);
			break;
		case "Last_7_days":
			formD = this._getFormattedDateTimeOff(7, false);
			break;
		case "Last_15_days":
			formD = this._getFormattedDateTimeOff(15, false);
			break;
		case "Last_30_days":
			formD = this._getFormattedDateTimeOff(30, false);
			break;
	}
	return new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD.toUTCString());
};


//TODO: Inbox should use these utility methods.
sap.uiext.inbox.InboxUtils._getFormattedDueDateTimeOff = function(subT) {
  var myDate = new Date();
  myDate.setDate(myDate.getDate() + subT);
  myDate.setMinutes(0);
  myDate.setHours(0);
  myDate.setSeconds(0);
  return myDate;
};


sap.uiext.inbox.InboxUtils._getFormattedDateTimeOff = function(subT, isNow) {
	var myDate = new Date();
	myDate.setDate(myDate.getDate() - subT);
	if(!isNow){
		myDate.setMinutes(0);
		myDate.setHours(0);
		myDate.setSeconds(0);
	}
	return myDate;
};

sap.uiext.inbox.InboxUtils.inArray = function (key, mapArray){
	var index = -1;
	jQuery.each(mapArray, function(i, map) {
		if(map[key] === key){
			index = i; 
			return false;
		}
	});
	return index;
};

sap.uiext.inbox.InboxUtils._dateFormat = function(dateValue) {
	if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
		var date;
		if (dateValue.indexOf('Date') != -1) {
			date = new Date();
			date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
		} else {
			date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
		}
		dateValue = date;
	}

	if (dateValue != undefined && dateValue != "") {
		var ins = sap.ui.core.format.DateFormat.getDateInstance({
			style : "medium"
		});
		return ins.format(dateValue);
	}
		//FOR Time Zone Support, do not forget to add timeoffset property in inbox control.
		/*var utc = Date.UTC(dateValue.getUTCFullYear(),dateValue.getUTCMonth(),dateValue.getUTCDate(),dateValue.getUTCHours(),dateValue.getUTCMinutes(),dateValue.getUTCSeconds(),dateValue.getUTCMilliseconds())
		var inboxInstance = this;
		while(inboxInstance != undefined && !(inboxInstance instanceof sap.uiext.inbox.Inbox))
		{
			inboxInstance = inboxInstance.getParent();
		}
		var localTime =  utc + inboxInstance.getTimezoneOffset() + (new Date().getTimezoneOffset()*60*1000);
		var ins = sap.ui.core.format.DateFormat.getDateTimeInstance({
			style : "medium"
		});
		return ins.format(new Date(localTime));*/
	return "";
};


sap.uiext.inbox.InboxUtils.scrub = function(data) {
	data = decodeURIComponent(data);
	data = data.replace(/[-:.\/]/g, "");
	data = data.replace(/-/g, "--");
	data = data.replace(/\s+/g, "-");
	if(!(/^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(data)))
	{
		if( /^[^A-Za-z_]/.test(data)){
			data = data.replace(/^[^A-Za-z_]/, "_");
		}
		data.replace(/[^-\w_.:]/g, "_");
	}
	return data;
};

sap.uiext.inbox.InboxUtils.setCookieValue = function(cookieName, value, exDays) {
    document.cookie = cookieName + "=" + escape(value);// c_value;
};

sap.uiext.inbox.InboxUtils.getCookieValue = function(cookieName) {
    var i, x, y, aCookies = document.cookie.split(";");
    for (i = 0; i < aCookies.length; i++) {
                    x = aCookies[i].substr(0, aCookies[i].indexOf("="));
                    y = aCookies[i].substr(aCookies[i].indexOf("=") + 1);
                    x = x.replace(/^\s+|\s+$/g, "");
                    if (x == (cookieName)) {
                                    return unescape(y);
                    }
    }
};

sap.uiext.inbox.InboxUtils.deleteCookie = function(cookieName) {
    var d = new Date();
    document.cookie = cookieName + "=" + ";expires=Thu, 01-Jan-1970 00:00:01 GMT";
};

sap.uiext.inbox.InboxUtils.reselectRowsinTable = function(reselectIndices,tableElement){
	var iMin = reselectIndices[0];
	for ( var i = 0; i < reselectIndices.length; i++) {
		tableElement.addSelectionInterval(reselectIndices[i],reselectIndices[i]);
		iMin = Math.min(reselectIndices[i], iMin);
	}
	if(iMin){
		var iFocusRow = Math.floor(iMin/10) * 10;
		tableElement.setFirstVisibleRow(iFocusRow);
	}
};

sap.uiext.inbox.InboxUtils.deSelectOtherActionButtonsinStreamView = function(oToggleButtonElem){
	var oToggleButtonParentRow = oToggleButtonElem.getParent().getParent();
	if(oToggleButtonParentRow){
		var oParentRowCells = oToggleButtonParentRow.getCells();
		var iNumberOfCells = oParentRowCells.length;
		 for(var i=0; i < iNumberOfCells; i++){
			 var oActionToggleButton = oParentRowCells[i].getContent()[0];
			 if(oActionToggleButton && oActionToggleButton !== oToggleButtonElem && oActionToggleButton instanceof sap.ui.commons.ToggleButton){
				 if(oActionToggleButton.getVisible()){
					 oActionToggleButton.setPressed(false);
					 oActionToggleButton.firePress(false);
				 }
			 }
		 }
	}
};
}; // end of sap/uiext/inbox/InboxUtils.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.SubstitutionRulesManagerConstants') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.SubstitutionRulesManagerConstants");
sap.uiext.inbox.SubstitutionRulesManagerConstants = function(){
};

sap.uiext.inbox.SubstitutionRulesManagerConstants.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);


sap.uiext.inbox.SubstitutionRulesManagerConstants.deleteSubstRule = "delete.png";
sap.uiext.inbox.SubstitutionRulesManagerConstants.updateRuleExecutionFunctionImport = "EnableSubstitutionRule";
sap.uiext.inbox.SubstitutionRulesManagerConstants.deleteRuleExecutionFunctionImport = "DeleteSubstitutionRule";
sap.uiext.inbox.SubstitutionRulesManagerConstants.SubstitutionRuleCollection = "SubstitutionRuleCollection";
sap.uiext.inbox.SubstitutionRulesManagerConstants.SubstitutesRuleCollection = "SubstitutesRuleCollection";
sap.uiext.inbox.SubstitutionRulesManagerConstants.CREATE_SUBSTITUTION_RULE= "CreateSubstitutionRule";
}; // end of sap/uiext/inbox/SubstitutionRulesManagerConstants.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.SubstitutionRulesManagerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.SubstitutionRulesManagerRenderer");

/**
 * @class SubstitutionRulesManager renderer. 
 * @static
 */
sap.uiext.inbox.SubstitutionRulesManagerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.SubstitutionRulesManagerRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var rm = oRenderManager;
	
	// write the HTML into the render manager
	 rm.write("<div");
   rm.writeControlData(oControl);
   rm.writeAttribute("class","sapuiextinbox-SubstitutionRulesManager"); 
   rm.write(">"); // SPAN element
   rm.renderControl(oControl.vLayout);
   rm.write("</div>");
};

}; // end of sap/uiext/inbox/SubstitutionRulesManagerRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.SubstitutionRulesManagerUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
// Utility functions for Substitution Rules Manager
jQuery.sap.declare("sap.uiext.inbox.SubstitutionRulesManagerUtils");

sap.uiext.inbox.SubstitutionRulesManagerUtils = function() {
	throw new Error();
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getText = function(value, isSubstitutedUserRules, isActiveSubstRule,
		bIsRecieveTasks, beginDate, endDate) {

	var bIsOutDated = this._isOutDated(endDate);
	var bInCurrentDateRange = (!this._isFutureDate(beginDate) && !bIsOutDated);

	var _oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	// Eliminate out dated tasks
	if (bIsOutDated) {
		return "";
	} else {
		if (isSubstitutedUserRules) { // For My substitute rules
			if (isActiveSubstRule) { // If the rule is enabled
				if (bInCurrentDateRange) {
					return value + " " + _oBundle.getText("SUBSTIUTION_RULE_CURRENTLY_RECEIVING_TASKS");
				} else {// End
					return value + " " + _oBundle.getText("SUBSTIUTION_RULE_WILL_RECEIVE_TASKS_FROM") + " "
							+ this._getFormattedDate(beginDate);
				}
			} else {
				if (bIsRecieveTasks) {
					if (bInCurrentDateRange) {
						return _oBundle.getText("SUBSTITUTION_RULE_ENABLE_FOR") + " " + value + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_TO_RECIEVE_TASKS");
					} else {
						return _oBundle.getText("SUBSTITUTION_RULE_ENABLE_FOR") + " " + value + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_TO_RECIEVE_TASKS") + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_FROM_TXT") + " " + this._getFormattedDate(beginDate);
					}
				} else {
					return value + " " + _oBundle.getText("SUBSTIUTION_RULE_HAS_NOT_ACTIVATED_YOUR");
				}
			}
		} else {// For I am substituting rules
			if (isActiveSubstRule) {
				if (bInCurrentDateRange) {
					return _oBundle.getText("SUBSTIUTION_RULE_CURRENTLY_RECEIVING_TASKS_FROM") + " " + value;
				} else {
					return _oBundle.getText("SUBSTIUTION_RULE_YOU_WILL_RECEIVE_TASKS_FROM") + " " + value + " "
							+ _oBundle.getText("SUBSTITUTION_RULE_FROM_TXT") + " " + this._getFormattedDate(beginDate);
				}
			} else {
				if (bIsRecieveTasks) {
					if (bInCurrentDateRange) {
						return _oBundle.getText("SUBSTIUTION_RULE_TURN_ON_TO_RECEIVE_TASKS_FROM") + " " + value;
					} else {
						return _oBundle.getText("SUBSTIUTION_RULE_TURN_ON_TO_RECEIVE_TASKS_FROM") + " " + value + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_FROM_TXT") + " " + this._getFormattedDate(beginDate);
					}
				} else {
					if(bInCurrentDateRange){
						return _oBundle.getText("SUBSTIUTION_RULE_IS_CURRENTLY_DISABLED_BY") + " " + value;
					}else{
						return _oBundle.getText("SUBSTIUTION_RULE_YOU_WILL_RECEIVE_TASKS_FROM") + " " + value + " "
								+ _oBundle.getText("SUBSTITUTION_RULE_FROM_TXT") + " " + this._getFormattedDate(beginDate);
					}
				}
			}
		}
	}
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._isOutDated = function(date) {
	if (date !== null && date !== '') {
		if (this._getTimeDiff(date) < 0) {
			return true;
		}
	}
	return false;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._isFutureDate = function(oDate) {
	if (oDate !== null && oDate !== '') {
		if (this._getTimeDiff(oDate) > 0 && !this._isCurrentDate(oDate)) {
			return true;
		}
	}
	return false;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._isCurrentDate = function(oDate) {
	if (oDate !== null && oDate !== '') {
		var oCurrentDate = new Date();
		if ((oCurrentDate.getDate() == oDate.getDate()) && (oCurrentDate.getMonth() == oDate.getMonth())
				&& (oCurrentDate.getYear() == oDate.getYear())) {
			return true;
		}
	}
	return false;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getStatus = function(isSubstitutedUserRules, isActiveSubstRule,
		beginDate, endDate) {
	var bIsOutDated = this._isOutDated(endDate);
	var bInCurrentDateRange = (!this._isFutureDate(beginDate) && !bIsOutDated);

	var _oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");

	// Eliminate out dated tasks
	if (bIsOutDated) {
		return _oBundle.getText("SUBSTITUTION_OUT_OF_DATE_RANGE");
	} else {
		if (isSubstitutedUserRules) { // For My substitute rules
			if (isActiveSubstRule) { // If the rule is enabled
				if (bInCurrentDateRange) {
					return _oBundle.getText("SUBSTITUTION_RULE_ACTIVE_FOR_LABEL") + " "
							+ this._getNoOfDays(isActiveSubstRule, beginDate, endDate);
				} else {// End
					return _oBundle.getText("SUBSTITUTION_RULE_ACTIVE_IN_LABEL") + " "
							+ this._getNoOfDays(isActiveSubstRule, beginDate, endDate);
				}
			} else {
				return _oBundle.getText("SUBSTITUTION_DISABLED_STATUS");
			}
			// TODO: Re-factor: Code duplication.
		} else {
			if (isActiveSubstRule) {
				if (bInCurrentDateRange) {
					return _oBundle.getText("SUBSTITUTION_RULE_ACTIVE_FOR_LABEL") + " "
							+ this._getNoOfDays(isActiveSubstRule, beginDate, endDate);
				} else {
					return _oBundle.getText("SUBSTITUTION_RULE_ACTIVE_IN_LABEL") + " "
							+ this._getNoOfDays(isActiveSubstRule, beginDate, endDate);
				}
			} else {
				return _oBundle.getText("SUBSTITUTION_DISABLED_STATUS");
			}
		}
	}
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getNoOfDays = function(isActiveSubstRule, startDate, endDate) {
	var _oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	var timeInDaysTxt = ''; // TODO Use Service.
	if (isActiveSubstRule) {
		if (endDate !== null && endDate !== '') {
			var timeDiff = this._getTimeDiff(endDate) / (1000 * 60 * 60 * 24);
			if (timeDiff > 1) {
				var sNoOfDays = Math.floor(timeDiff);
				if (sNoOfDays === 1) {
					return sNoOfDays + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_DAY");
				} else {
					return sNoOfDays + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_MORE_DAYS");
				}
			} else if (timeDiff > 0) {
				return Math.ceil(timeDiff) + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_DAY");
			}
		}
		return "";
	} else {
		if (startDate !== null && startDate !== '') {
			var timeDiff = this._getTimeDiff(startDate) / (1000 * 60 * 60 * 24);
			if (timeDiff > 1) {
				var sNoOfDays = Math.floor(timeDiff);
				if (sNoOfDays === 1) {
					return sNoOfDays + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_DAY");
				} else {
					return sNoOfDays + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_DAYS");
				}
			} else if (timeDiff > 0) {
				return Math.ceil(timeDiff) + " " + _oBundle.getText("SUBSTIUTION_RULE_IN_DAY");
			}
		}
		return "";
	}
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getFormattedDate = function(dateValue) {
	var ins = sap.ui.core.format.DateFormat.getDateInstance({
		style : "medium"
	});
	if (dateValue != undefined && dateValue != "") {
		return ins.format(dateValue);
	}
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getTodaysDateinYYYYMMDD = function() {
	var oDate = new Date();
	var sToday = String(oDate.getFullYear());
	if (oDate.getMonth() < 9) {
		sToday = sToday + "0";
	}
	sToday = sToday + String(oDate.getMonth() + 1);
	if (oDate.getDate() < 9) {
		sToday = sToday + "0";
	}
	sToday = sToday + String(oDate.getDate());
	return sToday;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getTimeDiff = function(endDate) {
	var today = new Date();
	var offset = today.getTimezoneOffset() * 60 * 1000;
	var deadline = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate(), 24, 00, 00);
	var diff = deadline.getTime() - (today.getTime());
	return diff;
};

sap.uiext.inbox.SubstitutionRulesManagerUtils._getTimeZoneOffset = function() {
	return undefined;
};

}; // end of sap/uiext/inbox/SubstitutionRulesManagerUtils.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.TaskInitialFilters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.TaskInitialFilters");
	
		
	/**
	 * Constructor for TaskInitialFilters
	 *
	 * @class
	 * PreDefined Filters for Inbox
	 *
	 *
	 * @param {Array} aStatusFilters array of Status Filters to be applied
	 * @param {Array} aPriorityFilters array of Priority Filters to be applied
	 * @param {String} sDateTimeFilter DateTime Filter to be applied. Values : Today, Last_7_days, Last_15_days, Last_30_days
	 * @param {Array} aTaskTypeFilters array of TaskType Filters to be applied
	 * @param {String} sDueDateTimeFilter DueDate Filter to be applied. Values : Today, Next_7_days, Next_15_days, Next_30_days
	 * @public
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.TaskInitialFilters",{
			
			    constructor : function(aStatusFilters, aPriorityFilters, sDateTimeFilter, aTaskTypeFilters, sDueDateTimeFilter) {
			
			        sap.ui.base.Object.apply(this);
			
			        this.aStatusFilters = aStatusFilters ? aStatusFilters : [];
			  	    this.aPriorityFilters = aPriorityFilters ? aPriorityFilters : [];
			  	    this.sDateTimeFilter = sDateTimeFilter;
			  	    this.aTaskTypeFilters = aTaskTypeFilters ? aTaskTypeFilters : [];
			  	    this.sDueDateTimeFilter = sDueDateTimeFilter;
			  	    this.aFiltersTobeApplied = [];
			  	    this.inboxUtils = sap.uiext.inbox.InboxUtils;
			    }
			
		});
	
	
	sap.uiext.inbox.TaskInitialFilters.prototype.getFilterObjects = function(){
		var filtersToApplymap = sap.uiext.inbox.TaskInitialFilters.FILTERSTOAPPLYMAP;
		
		var oInitialFiltersAppliedMap = {};
		var aStatusFilterObjects = [], aPriorityFilterObjects = [], aTaskTypeFilterObjects = [], dateFilter, dueDateFilter;
		var filters = undefined, allFilters = [];
		for(var i=0;i<this.aStatusFilters.length;i++){
			var filterStatus = filtersToApplymap.filters.filterStatus;
			if(filterStatus[this.aStatusFilters[i]] !== undefined){
				var statFilter = this.inboxUtils._getStatusFilters(this.aStatusFilters[i]);
				oInitialFiltersAppliedMap[filterStatus[this.aStatusFilters[i]]] = statFilter;
				aStatusFilterObjects.push(statFilter);
			}
		}
		allFilters = allFilters.concat(aStatusFilterObjects);
		
		for(var i=0;i<this.aPriorityFilters.length;i++){
			var filterPrio = filtersToApplymap.filters.filterPriority;
			if(filterPrio[this.aPriorityFilters[i]]){
				var prioFilter = this.inboxUtils._getPriorityFilters(this.aPriorityFilters[i]);
				oInitialFiltersAppliedMap[filterPrio[this.aPriorityFilters[i]]] = prioFilter;
				aPriorityFilterObjects.push(prioFilter);
			}
		}
		
		allFilters = allFilters.concat(aPriorityFilterObjects);
		if(this.sDateTimeFilter !== null && this.sDateTimeFilter !== undefined){
			//logic for sDateTimeFilter
			var filterDateTime = filtersToApplymap.filters.filterDateTime;
			if(filterDateTime[this.sDateTimeFilter]){
				var dateFilter = this.inboxUtils._getDateTimeFilters(this.sDateTimeFilter);
				oInitialFiltersAppliedMap[filterDateTime[this.sDateTimeFilter]] = dateFilter;
			}
		}

		if(dateFilter !== undefined){
			allFilters.push(dateFilter);
		}

		for(var i=0;i<this.aTaskTypeFilters.length;i++){
			var taskTypeFilter = new sap.ui.model.Filter("TaskDefinitionID", sap.ui.model.FilterOperator.EQ, this.aTaskTypeFilters[i]);
			oInitialFiltersAppliedMap[this.aTaskTypeFilters[i]] = taskTypeFilter;
			aTaskTypeFilterObjects.push(taskTypeFilter);
		}
		
		allFilters = allFilters.concat(aTaskTypeFilterObjects);
		
		if(this.sDueDateTimeFilter !== null && this.sDueDateTimeFilter !== undefined){
			//logic for sDateTimeFilter
			var filterDueDateTime = filtersToApplymap.filters.filterDueDateTime;
			if(filterDueDateTime[this.sDueDateTimeFilter]){
				var dueDateFilter = this.inboxUtils._getDueDateFilters(this.sDueDateTimeFilter);
				oInitialFiltersAppliedMap[filterDueDateTime[this.sDueDateTimeFilter]] = dueDateFilter;
			}
		}

		if(dueDateFilter !== undefined){
			allFilters.push(dueDateFilter);
		}
		
		if(allFilters.length > 0 ){
			filters = {DueDate : dueDateFilter, TaskType : aTaskTypeFilterObjects, CreatedDate : dateFilter, Priority : aPriorityFilterObjects, Status : aStatusFilterObjects};
		}
		
		return { filterOperatorMap: filters, filtersAppliedMap : oInitialFiltersAppliedMap };
	};
	
	sap.uiext.inbox.TaskInitialFilters.prototype.getFilterUIKeys = function(){
		var filtermap = sap.uiext.inbox.TaskInitialFilters.FILTERMAP;
		var aStatusAttToSelect = [];
		var aPrioAttToSelect = [];
		var aDateAttToSelect = [];
		var aTaskTypeAttToSelect = [];
		var aDueDateAttToSelect = [];
	
		for(var i=0;i<this.aStatusFilters.length;i++){
			var filterStatus = filtermap.filters.filterStatus;
			if(filterStatus[this.aStatusFilters[i]])
				aStatusAttToSelect.push(filterStatus[this.aStatusFilters[i]]);
		}
	
		for(var i=0;i<this.aPriorityFilters.length;i++){
			var filterPrio = filtermap.filters.filterPriority;
			if(filterPrio[this.aPriorityFilters[i]])
				aPrioAttToSelect.push(filterPrio[this.aPriorityFilters[i]]);
		}
	
	
		if(this.sDateTimeFilter !== null && this.sDateTimeFilter !== undefined)
		{
			var filterDateTime = filtermap.filters.filterDateTime;
			if(filterDateTime[this.sDateTimeFilter])
				aDateAttToSelect.push(filterDateTime[this.sDateTimeFilter]);
		}

	
		for(var i=0;i<this.aTaskTypeFilters.length;i++){
			var taskTypeID = this.aTaskTypeFilters[i];
			if(taskTypeID){
				//TODO: TaskType IDs need to handle special characters
				taskTypeID = taskTypeID.replace(/-/g, "--");
				taskTypeID = taskTypeID.replace(/\s+/g, "-");
				if(!(/^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(taskTypeID)))
				{
					if( /^[^A-Za-z_]/.test(taskTypeID)){
						taskTypeID = taskTypeID.replace(/^[^A-Za-z_]/, "_");
					}
					taskTypeID.replace(/[^-\w_.:]/g, "_");
				}
				aTaskTypeAttToSelect.push(taskTypeID);
			}
		}
		
		if(this.sDueDateTimeFilter !== null && this.sDueDateTimeFilter !== undefined)
		{
			var filterDueDateTime = filtermap.filters.filterDueDateTime;
			if(filterDueDateTime[this.sDueDateTimeFilter])
				aDueDateAttToSelect.push(filterDueDateTime[this.sDueDateTimeFilter]);
		}

		return {Status : aStatusAttToSelect, Priority: aPrioAttToSelect, StartDate : aDateAttToSelect, TaskType : aTaskTypeAttToSelect, DueDate :aDueDateAttToSelect};
	};
	
	sap.uiext.inbox.TaskInitialFilters.FILTERMAP = {
			filters: { 
				filterStatus: {
					READY:"INBOX_FILTER_STATUS_READY",
					RESERVED:"INBOX_FILTER_STATUS_RESERVED",
					IN_PROGRESS:"INBOX_FILTER_STATUS_IN_PROGRESS"
				},
				filterPriority: {
					LOW:"INBOX_FILTER_PRIORITY_LOW",
					MEDIUM:"INBOX_FILTER_PRIORITY_MEDIUM",
					HIGH:"INBOX_FILTER_PRIORITY_HIGH",
					VERY_HIGH:"INBOX_FILTER_PRIORITY_VERY_HIGH"
				},
				filterDateTime: {
					Today:"INBOX_FILTER_DATETIME_TODAY",
					Last_7_days: "INBOX_FILTER_DATETIME_WEEK",
					Last_15_days: "INBOX_FILTER_DATETIME_15DAYS",
					Last_30_days: "INBOX_FILTER_DATETIME_MONTH"
				},
				filterDueDateTime: {
					Today:"INBOX_FILTER_DUE_DATETIME_TODAY",
					Next_7_days: "INBOX_FILTER_DUE_DATETIME_WEEK",
					Next_15_days: "INBOX_FILTER_DUE_DATETIME_15DAYS",
					Next_30_days: "INBOX_FILTER_DUE_DATETIME_MONTH"
				}
			}
	};
	
	sap.uiext.inbox.TaskInitialFilters.FILTERSTOAPPLYMAP = {
			filters: { 
				filterStatus: {
					READY:"readyStat",
					RESERVED:"resStat",
					IN_PROGRESS:"InProStat"
				},
				filterPriority: {
					LOW:"lowPrio",
					MEDIUM:"medPrio",
					HIGH:"hiPrio",
					VERY_HIGH:"veryhiPrio"
				},
				filterDateTime: {
					Today:"today",
					Last_7_days: "last7",
					Last_15_days: "last15",
					Last_30_days: "last30"
				},
				filterDueDateTime: {
					Today:"dueDateToday",
					Next_7_days: "dueDatenext7",
					Next_15_days: "dueDatenext15",
					Next_30_days: "dueDatenext30"
				}
			}
};
	
	
	
	
}; // end of sap/uiext/inbox/TaskInitialFilters.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxCommentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.composite.InboxCommentRenderer");

/**
 * @class InboxComment renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxCommentRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxCommentRenderer.render = function(oRenderManager, oControl){ 
	// convenience variable
	var rm = oRenderManager;
	var oChunk = oControl;
	
	var sMyId = oChunk.getId();

	rm.write('<ARTICLE');
    rm.writeControlData(oChunk);
	rm.addClass('sapuiextInboxCommentChunk');
	rm.addClass('sapuiextInboxComment');
	
	rm.writeClasses();
    rm.write('>');

    // thumbnail
	rm.write('<img id=' + sMyId + '-thumb');
	var sThumbnail = oChunk.getThumbnailSrc();
	if(!sThumbnail){
		sThumbnail = jQuery.sap.getModulePath("sap.uiext.inbox", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/comments/person_placeholder_48.png";
	}
	rm.writeAttributeEscaped('src', sThumbnail);
	rm.writeAttributeEscaped('alt', oChunk.getSender());
	rm.writeClasses();
	rm.write('>');

    // text (starting with sender)
    rm.write('<DIV class= "sapuiextInboxCommentText" >');
	rm.write('<SPAN id=' + sMyId + '-sender class= "sapuiextInboxCommentSenderText"');
	rm.write('>');
	rm.writeEscaped(oChunk.getSender());
	rm.write('</SPAN> ');
	
	this.renderText(rm, oChunk);
	rm.write('</DIV>');
	
	// date
    rm.write('<SPAN class= "sapuiextInboxCommentChunkByline" >');
	rm.writeEscaped(oChunk.getTimestamp());
	rm.write('</SPAN>');
	
	rm.write('</ARTICLE>');
};

/*
 *	Render text with @References
 */
sap.uiext.inbox.composite.InboxCommentRenderer.renderText = function(rm, oChunk){

	//var sText = jQuery.sap._sanitizeHTML(oChunk.getText());
	var sText = oChunk.getText();
	var i = 0;

	do{
		var iPos = sText.search(/\s/);
		var sSpace = "",
			sWord = "";

		if(iPos < 0){
			// only 1 word
			sWord = sText;
		}else{
			sWord = sText.slice(0, iPos);
			sSpace = sText.slice(iPos, iPos + 1);
			sText = sText.slice(iPos + 1);
		}

		// check for special strings - will keep them as in FeedChunk for now.
		if (/^@/.test(sWord)) {
			// @-reference
			rm.write('<a id=' + oChunk.getId() + '-Ref' + i);
			rm.writeAttribute('href', 'javascript:void(0);');
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>', sSpace);
			i++;
		}else if (/^(https?|ftp):\/\//i.test(sWord) && jQuery.sap.validateUrl(sWord)) {
			// web link - valid URL
			rm.write('<a');
			rm.writeAttribute('href', jQuery.sap.encodeHTML(sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else if (/^(www\.)/i.test(sWord) && jQuery.sap.validateUrl("http://"+sWord)) {
			// web link without protocol -> use HTTP - valid URL
			rm.write('<a');
			rm.writeAttribute('href', jQuery.sap.encodeHTML("http://"+sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else if (/^[\w\.=-]+@[\w\.-]+\.[\w]{2,5}$/.test(sWord)) {
			//email - not 100% validity check and validation missing
			rm.write('<a');
			rm.writeAttribute('href', "mailto:"+jQuery.sap.encodeHTML(sWord));
			rm.write('>');
			rm.writeEscaped(sWord, true);
			rm.write('</a>',sSpace);
		}else{
			// normal word
			rm.writeEscaped(sWord + sSpace, true);
			//rm.write(sWord + sSpace);
		}
	}while(iPos >= 0);

};

}; // end of sap/uiext/inbox/composite/InboxCommentRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxTaskCommentsRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.composite.InboxTaskCommentsRenderer");

/**
 * @class InboxTaskComments renderer. 
 * @static
 */
sap.uiext.inbox.composite.InboxTaskCommentsRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uiext.inbox.composite.InboxTaskCommentsRenderer.render = function(oRenderManager, oControl){ 
	// convenience variable
	var rm = oRenderManager;
	var oChunk = oControl;
	
	var sMyId = oChunk.getId();

	rm.write('<ARTICLE');
    rm.writeControlData(oChunk);
	rm.addClass('sapuiextInboxTaskCommentsChunk');
	rm.writeClasses();
    rm.write('>');
    
 // comments
    if(oChunk.getComments().length > 0  || oChunk.showCommentFeeder){
		rm.write("<SECTION>");
		this.renderComments(rm, oChunk);
		rm.write("</SECTION>");
    }
    
    rm.write('</ARTICLE>');
    
};

/*
 *	Render comment section content
 */
sap.uiext.inbox.composite.InboxTaskCommentsRenderer.renderComments = function(rm, oChunk){

	var oComments = oChunk.getComments();
	var iLength = oComments.length;

	// number of comments
	rm.write('<HEADER class= "sapuiextInboxTaskComments" >');
	if(oChunk.rb) {
		rm.write(oChunk.rb.getText('INBOX_TASK_NO_COMMENTS', [iLength]));

		if (iLength > oChunk.maxComments){
			rm.write('<a id=' + oChunk.getId() + '-all ');
			rm.writeAttribute('href', 'javascript:void(0);');
			rm.write('>');
			if (!oChunk.allComments) {
				rm.write(oChunk.rb.getText('INBOX_TASK_ALL_COMMENTS'));
			} else {
				rm.write(oChunk.rb.getText('INBOX_TASK_MAX_COMMENTS'));
			}
			rm.write('</a>');
		}
	}
	rm.write("</HEADER>");

	// comments are sorted from old to new. Newest comment is on the bottom
	var iNumberChunks = iLength;
	if (!oChunk.allComments && oChunk.maxComments < iNumberChunks) {
		iNumberChunks = oChunk.maxComments;
	}

	for ( var i = 0; i < iNumberChunks; i++) {
		rm.renderControl(oComments[iLength - iNumberChunks + i]);
	}

	// comment feeder
	if (oChunk.oCommentFeeder) {
		rm.renderControl(oChunk.oCommentFeeder);
	}

};

}; // end of sap/uiext/inbox/composite/InboxTaskCommentsRenderer.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.uiext.inbox (1.16.4)
 */
jQuery.sap.declare("sap.uiext.inbox.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library containing the Unified  Inbox control
 *
 * @namespace
 * @name sap.uiext.inbox
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.uiext.inbox",
  dependencies : ["sap.ui.core","sap.ui.commons","sap.ui.ux3"],
  types: [],
  interfaces: [],
  controls: [
    "sap.uiext.inbox.Inbox",
    "sap.uiext.inbox.SubstitutionRulesManager",
    "sap.uiext.inbox.composite.InboxComment",
    "sap.uiext.inbox.composite.InboxTaskComments"
  ],
  elements: [],
  version: "1.16.4"});


}; // end of sap/uiext/inbox/library.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.tcm.fI.TCMFunctionImportMetaData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.uiext.inbox.tcm.fI.TCMFunctionImportMetaData");
	

sap.uiext.inbox.tcm.fI.TCMFunctionImportMetaData = {
			/**
			 * Function Import for SearchUsers
			 * 
			 * name: Name of the Function Import
			 * params: The Parameters of the function Import defined in the format : 
			 * eg: {name:"SAP__Origin", type: "Edm.String", Mode: "In", nullable: true} where nullable defines whether the parmater is optional while executing the Function Import.
			 * httpMethod: GET/POST , the method to be used while executing the Function Import. 
			 * 
			 */
			SEARCHUSERS: {name:"SearchUsers", 
							params: [
							         	{name:"SAP__Origin", type: "Edm.String", Mode: "In"},
							         	{name:"SearchPattern", type: "Edm.String", Mode: "In", nullable: true},
							         	{name:"MaxResults", type: "Edm.Int16", Mode: "In", nullable: true}
							         ],
							httpMethod: "GET"
						  }
};
}; // end of sap/uiext/inbox/tcm/fI/TCMFunctionImportMetaData.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxPrimaryFilters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.InboxPrimaryFilters");
	
	
	
		

	
	/**
	 * Constructor for InboxPrimaryFilters
	 *
	 * @class
	 * Primary Filters for Inbox
	 *
	 *  
	 * @public
	 * @name sap.uiext.inbox.InboxPrimaryFilters
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.InboxPrimaryFilters",{
			
			    constructor : function() {
			
			        sap.ui.base.Object.apply(this);
			
			        this.oFilter = undefined;
			  	    this.inboxUtils = sap.uiext.inbox.InboxUtils;
			  	    this.oPrimaryFilterEnum = sap.uiext.inbox.InboxPrimaryFilterEnum;
			    }
			
		});
	
	/**
	 * set Primary filter
	 * 
	 * @name sap.uiext.inbox.InboxPrimaryFilters.prototype.setFilter
	 * @function
	 * 
	 * @param {sap.uiext.inbox.InboxPrimaryFilterEnum} oFilter
	 * 
	 * @public
	 * 
	 */
	sap.uiext.inbox.InboxPrimaryFilters.prototype.setFilter = function(oFilter){
			if(oFilter && oFilter.hasOwnProperty('key') && oFilter.hasOwnProperty('value')){
				this.oFilter = oFilter;
			}
	};
	
	/**
	 * get Primary filter
	 * 
	 *  @type sap.uiext.inbox.InboxPrimaryFilters
	 *   
	 */
	sap.uiext.inbox.InboxPrimaryFilters.prototype.getFilter = function(){
		return this.oFilter;
	};
}; // end of sap/uiext/inbox/InboxPrimaryFilters.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxSecondaryFilterPathEnum') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
	jQuery.sap.declare("sap.uiext.inbox.InboxSecondaryFilterPathEnum");
	
	
	
	/**
	 * 	@class
	 * 	Enumeration for Secondary Filter Paths
	 *    
	 * 	@static
	 * 	@public
	 */
	sap.uiext.inbox.InboxSecondaryFilterPathEnum = {
			/**
			 * Path for Status Secondary Filter 
			 * @public
			 */
			STATUS: {
						key:"Status", 
						allowedKeyValues : ["INBOX_FILTER_STATUS_READY", "INBOX_FILTER_STATUS_RESERVED", "INBOX_FILTER_STATUS_IN_PROGRESS"]
					},
			/**
			 * Path for Priority Secondary Filter
			 * @public
			 */
			PRIORITY:{
						key: "Priority",
						allowedKeyValues : ["INBOX_FILTER_PRIORITY_LOW", "INBOX_FILTER_PRIORITY_MEDIUM", "INBOX_FILTER_PRIORITY_HIGH","INBOX_FILTER_PRIORITY_VERY_HIGH"]
					},			
			/**
			 * Path for DueDate Secondary Filter
			 * @public
			 */
			DUEDATE: {
						key: "DueDate",
						allowedKeyValues : ["INBOX_FILTER_DUE_DATETIME_TODAY", "INBOX_FILTER_DUE_DATETIME_MONTH", "INBOX_FILTER_DUE_DATETIME_WEEK", "INBOX_FILTER_DUE_DATETIME_15DAYS"]
					},
			/**
			 * Path for StartDate Secondary Filter
			 * @public
			 */
			STARTDATE: {
						key: "StartDate",
						allowedKeyValues : ["INBOX_FILTER_DATETIME_TODAY", "INBOX_FILTER_DATETIME_MONTH", "INBOX_FILTER_DATETIME_WEEK","INBOX_FILTER_DATETIME_15DAYS"]
					},
			/**
			 * Path for TaskType Secondary Filter
			 * @public
			 */
			TASKTYPE: {
						key: "TaskType",
						allowedKeyValues : []
				}
	};
}; // end of sap/uiext/inbox/InboxSecondaryFilterPathEnum.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxSecondaryFilters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.InboxSecondaryFilters");
	
	
	
		
		
	
	/**
	 * Constructor for InboxSecondaryFilters
	 *
	 * @class
	 * Secondary Filters for Inbox
	 * 
	 * 
	 * @public
	 * @name sap.uiext.inbox.InboxSecondaryFilters
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.InboxSecondaryFilters",{
			
			    constructor : function() {
			
			        sap.ui.base.Object.apply(this);
			        this.inboxUtils = sap.uiext.inbox.InboxUtils;
			        this.mFiltersToApplyMap = {};
			        this.mFilterObjects;
			        this.mSelectUIKeysMap = {};
			  	    this.filter = undefined;
			  	    this.aFilterObjects = undefined;
			  	    this.oPathEnum = sap.uiext.inbox.InboxSecondaryFilterPathEnum;
			  	    this.oValuesEnum = sap.uiext.inbox.InboxSecondaryFilterValuesEnum;
			    }
			
		});
	
	
	/**
	* Set Secondary Filters
	*
	* @name sap.uiext.inbox.InboxSecondaryFilters.prototype.setStandardFilters
	* @function
	* @param {Array} 
	*        aFilterObjects
	*         Array of secondary Filter Objects
	* eg. : {sPath : sap.uiext.inbox.InboxSecondaryFilterPathEnum.Priority, values : [sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.LOW, sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.HIGH]}
	* sPath : {sap.uiext.inbox.InboxSecondaryFilterPathEnum}
	* values : {Array} Array of SecondaryFilterValuesEnums  of {sap.uiext.inbox.InboxSecondaryFilterValuesEnum}
	* @public
	*/
	sap.uiext.inbox.InboxSecondaryFilters.prototype.setStandardFilters = function(aFilterObjects){
		if(aFilterObjects instanceof sap.uiext.inbox.TaskInitialFilters || aFilterObjects instanceof Array){
			this.aFilterObjects = aFilterObjects;
			this._parseFilterObjects(aFilterObjects);
		}
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype.getStandardFilters = function(aFilterObjects){
		return this.aFilterObjects;
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._parseFilterObjects = function(aFilterObjects){
		if(aFilterObjects instanceof sap.uiext.inbox.TaskInitialFilters){
			this.filter = aFilterObjects; 
		}else{
			var oFilterObject;
			for(var i = 0; i < aFilterObjects.length; i++){
				oFilterObject = aFilterObjects[i];
				this._createFilters(oFilterObject);
			}
		}
	};
	
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._createFilters = function(oFilterObject){
		
		var sFilterPath = oFilterObject.sPath, sFilterPathKey = sFilterPath.key, aFilterValues = oFilterObject.values;
		
		if(sFilterPath && aFilterValues){
			var dateTimeFilterKeys = [this.oPathEnum.DUEDATE.key, this.oPathEnum.STARTDATE.key];
			aFilterValues = (jQuery.inArray(sFilterPathKey,dateTimeFilterKeys) === -1) ? aFilterValues : [aFilterValues[0]];
			
			
			var aFilterValuesLength = aFilterValues.length, i=0, aFilterAttributeUIKeys = [], aCoreFilterObjects = [];
			//TODO: If else , lot of repetitive code, needs to be refactored
			if(sFilterPath.key === "TaskType"){
				for(; i < aFilterValuesLength; i++){
					var oFilterValue = aFilterValues[i];
					if(oFilterValue){
						var oFilter = new sap.ui.model.Filter("TaskDefinitionID", sap.ui.model.FilterOperator.EQ, decodeURIComponent(aFilterValues[i]));
						aCoreFilterObjects.push(oFilter);
					
						aFilterAttributeUIKeys.push(encodeURIComponent(aFilterValues[i]));
					
						this.mFiltersToApplyMap[aFilterValues[i]] = oFilter;
					}
				}	
			}else{
				for(; i < aFilterValuesLength; i++){
					var oAllowedFilterValues = sFilterPath.allowedKeyValues;
					var oFilterValue = aFilterValues[i];
					if(oFilterValue && jQuery.inArray(oFilterValue.uiKey,oAllowedFilterValues) !== -1){
						var oFilterKey = oFilterValue.key; 
						var oFilter = this["_get"+sFilterPathKey+"Filter"](oFilterKey);
						aCoreFilterObjects.push(oFilter);
						
						aFilterAttributeUIKeys.push(oFilterValue.uiKey);
						
						this.mFiltersToApplyMap[oFilterValue.filterKey] = oFilter;
					}
				}
			}
			if(!this.mFilterObjects){
				this.mFilterObjects = {};
			}
			this.mSelectUIKeysMap[sFilterPathKey] = aFilterAttributeUIKeys;
			this.mFilterObjects[sFilterPathKey] = aCoreFilterObjects;
		}
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._getStatusFilter = function(sFilterKey){
		return this.inboxUtils._getStatusFilters(sFilterKey);
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._getPriorityFilter = function(sFilterKey){
		return this.inboxUtils._getPriorityFilters(sFilterKey);
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._getDueDateFilter = function(sFilterKey){
		return this.inboxUtils._getDueDateFilters(sFilterKey);
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype._getStartDateFilter = function(sFilterKey){
		return this.inboxUtils._getDateTimeFilters(sFilterKey);
	};

	sap.uiext.inbox.InboxSecondaryFilters.prototype.getFilterObjects = function(){
		return {filterOperatorMap: this.mFilterObjects, filtersAppliedMap : this.mFiltersToApplyMap };
	};
	
	sap.uiext.inbox.InboxSecondaryFilters.prototype.getFilterUIKeys = function(){
		return this.mSelectUIKeysMap;
	};
	
	
}; // end of sap/uiext/inbox/InboxSecondaryFilters.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.SubstitutionRulesManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.SubstitutionRulesManager.
jQuery.sap.declare("sap.uiext.inbox.SubstitutionRulesManager");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SubstitutionRulesManager.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The SubstitutionRulesManager
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.7.0. 
 * API is not yet finished and might change completely
 * @name sap.uiext.inbox.SubstitutionRulesManager
 */
sap.ui.core.Control.extend("sap.uiext.inbox.SubstitutionRulesManager", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"bindSubstitutionRules"
	],

	// ---- control specific ----
	library : "sap.uiext.inbox"
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.SubstitutionRulesManager with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.SubstitutionRulesManager.extend
 * @function
 */


/**
 * Binds the Substitution Rules to the given path.
 *
 * @name sap.uiext.inbox.SubstitutionRulesManager.prototype.bindSubstitutionRules
 * @function
 * @param {string} 
 *         sPath
 *         The path

 * @type sap.uiext.inbox.SubstitutionRulesManager
 * @public
 */


// Start of sap/uiext/inbox/SubstitutionRulesManager.js
/*!
 * @copyright@
 */
 




/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
/**
 * This file defines behavior for the control,
 */
sap.uiext.inbox.SubstitutionRulesManager.prototype.init = function(){
//	this.setParent(oInbox);
	var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
	this._imgResourcePath = sap.ui.resource('sap.uiext.inbox', 'themes/' + sCurrentTheme + '/img/');
	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	this.sUrl = "";
	this.sPath = "/SubstitutionRuleCollection"	//TODO: sPath should not be hard coded.
	this.inboxUtils = sap.uiext.inbox.InboxUtils;
	this.substitutionRulesManagerUtils = sap.uiext.inbox.SubstitutionRulesManagerUtils;
	this.inboxConstants = sap.uiext.inbox.InboxConstants;
	this.substitutionConstants = sap.uiext.inbox.SubstitutionRulesManagerConstants;
	this.substitutionRuleCollection = this.substitutionConstants.SubstitutionRuleCollection;
	this.substitutesRuleCollection = this.substitutionConstants.SubstitutesRuleCollection;
	this.oTcmMetadata= new sap.uiext.inbox.TCMMetadata();
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.exit = function() {
	this.vLayout.destroy();
	this.vLayout = null;
	
	function remove(id) {
		  var oItem = sap.ui.getCore().byId(id);
		  oItem && oItem.destroy();
	}
	this._oBundle = undefined;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.open = function() {
	this.sUrl = this.getModel().sServiceUrl;
	this.overlayContainer = this.populateOverlayContainer();
	this.overlayContainer.open();	
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.populateOverlayContainer = function() {
	var that = this;
	var dynamicId = this.getId() + '--';
	// Creating the Overlay Container once a user selects Manage Substitution.
	var oSRMOverlayContainer = sap.ui.getCore().byId(dynamicId + 'substitutionOverlayContainer');
	if (oSRMOverlayContainer === undefined) {
		oSRMOverlayContainer = new sap.ui.ux3.OverlayContainer(dynamicId + "substitutionOverlayContainer");
		oSRMOverlayContainer.setParent(this);
		// }
		oSRMOverlayContainer.setOpenButtonVisible(false);
		oSRMOverlayContainer.attachClose(that, that.deleteMessage);
		// The complete Overlay Container will have a main Vertical Layout as content
		var overlayVLayout = sap.ui.getCore().byId(dynamicId + 'substitutionVLayout');
		if (overlayVLayout === undefined) {
			overlayVLayout = new sap.ui.commons.layout.VerticalLayout(dynamicId + "substitutionVLayout");
		}
		overlayVLayout.setWidth("95%");
		overlayVLayout.addStyleClass("verticalLayoutStyle");

		// First Row is an empty Label for spacing, //TODO: Need to check if padding can be use, so that we avoid creation
		// of controls which are heavy weights.
		var emptyLabel0 = sap.ui.getCore().byId(dynamicId + 'substDummyLabel0')
		if (emptyLabel0 === undefined) {
			emptyLabel0 = new sap.ui.commons.Label(this.getId() + '--' + "substDummyLabel0", {
				text : ""
			});
		}

		// Third Row is for the Creation of 'New' link for Create Substitution Rule.
		var newSubstitutionLink = sap.ui.getCore().byId(dynamicId + 'newSubstitutionLink');
		if (newSubstitutionLink === undefined) {
			newSubstitutionLink = new sap.ui.commons.Link(dynamicId + 'newSubstitutionLink', {
				text : this._oBundle.getText("SUBSTITUTION_RULE_CREATE_NEW_BUTTON"),
				tooltip : this._oBundle.getText("SUBSTITUTION_RULE_CREATE_TOOLTIP")
			});
		}
		newSubstitutionLink.attachPress(that, that.openCreateSubstRulePopup);
		newSubstitutionLink.addStyleClass("newSubstitutionLink");
		// Second Row for Creating Navigation Bar with item "My Substitutes" and "I am Substituting".
		var oNavigationBar = sap.ui.getCore().byId(dynamicId + 'subsNavBar');
		if (oNavigationBar === undefined) {
			oNavigationBar = new sap.ui.ux3.NavigationBar(dynamicId + "subsNavBar", {
				items : [new sap.ui.ux3.NavigationItem(dynamicId + "mySubstitutes", {
					key : dynamicId + "mySubstitutes",
					text : this._oBundle.getText("SUBSTITUTION_MY_SUBSTITUTES_TAB_TITLE"),
					tooltip : this._oBundle.getText("SUBSTITUTION_MY_SUBSTITUTES_TAB_TITLE")
				}), new sap.ui.ux3.NavigationItem(dynamicId + "iamSubstituting", {
					key : dynamicId + "iamSubstituting",
					text : this._oBundle.getText("SUBSTITUTION_I_AM_SUBSTITUTING_TAB_TITLE"),
					tooltip : this._oBundle.getText("SUBSTITUTION_I_AM_SUBSTITUTING_TAB_TITLE")
				})]
			});
		}
		oNavigationBar.setSelectedItem(dynamicId + "mySubstitutes");
		oNavigationBar.addStyleClass("navigationBarMargin");

		// Fourth is an empty Label for spacing, //TODO: Need to check if padding can be use, so that we avoid creation of
		// controls which are heavy weights.
		var emptyLabel = sap.ui.getCore().byId(dynamicId + 'substDummyLabel')
		if (emptyLabel === undefined) {
			emptyLabel = new sap.ui.commons.Label(this.getId() + '--' + "substDummyLabel", {
				text : ""
			});
		}

		// Inserting Empty Row in the zeroth index. FIXME: Use Padding instead. TODO: Research on this.
		// FIXME: VERY IMPORTANT, get Rid of counters instead add indexes in a constants file.
		var verticalLayoutContentIndex = 0;
		overlayVLayout.insertContent(emptyLabel0, verticalLayoutContentIndex);
		// Inserting MessageBar in the first index.
		if (sap.ui.getCore().byId(this.getId() + '--' + 'msgBarContainer') === undefined) {
			overlayVLayout.insertContent(this.populateMsgBar(), ++verticalLayoutContentIndex);
		}
		// Inserting Navigation Bar in the second index.
		overlayVLayout.insertContent(oNavigationBar, ++verticalLayoutContentIndex);
		// Inserting 'New' link in the third index.
		overlayVLayout.insertContent(newSubstitutionLink, ++verticalLayoutContentIndex);
		// Inserting Empty Label in the fourth index.
		overlayVLayout.insertContent(emptyLabel, ++verticalLayoutContentIndex);

		var activeAndinactiveRulesVLayout = sap.ui.getCore().byId(dynamicId + 'activeAndinactiveRulesVLayout');
		if (activeAndinactiveRulesVLayout === undefined) {
			activeAndinactiveRulesVLayout = new sap.ui.commons.layout.VerticalLayout(dynamicId
					+ "activeAndinactiveRulesVLayout");
			activeAndinactiveRulesVLayout.setWidth("100%");
			// TODO: Add dynamic ID's VERY IMPORTANT.
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : that._oBundle.getText("SUBSTITUTION_ACTIVE_SUBSTITUTION_RULE"),
				design : sap.ui.commons.LabelDesign.Bold
			}), 0);// TODO:Externalize
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 1);
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 2);// Dummy will be replaced by the active rules content.
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 3);
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 4);
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 5);
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : that._oBundle.getText("SUBSTITUTION_INACTIVE_SUBSTITUTION_RULE"),
				design : sap.ui.commons.LabelDesign.Bold
			}), 6);// TODO:Externalize
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 7);
			activeAndinactiveRulesVLayout.insertContent(new sap.ui.commons.Label({
				text : ""
			}), 8);// Dummy will be replaced by the inactive rules content.

		}
		var mySubstitutesVerticalLayoutContentIndex = ++verticalLayoutContentIndex;
		overlayVLayout.insertContent(that.getOverlayContent(dynamicId + "mySubstitutes", activeAndinactiveRulesVLayout),
				mySubstitutesVerticalLayoutContentIndex);
		oSRMOverlayContainer.addContent(overlayVLayout);

		oNavigationBar.attachSelect(function(oEvent) {
			that.deleteMessage();
			var itemKey = oEvent.getParameter("item").getKey();
			// remove all content
			overlayVLayout.removeContent(mySubstitutesVerticalLayoutContentIndex);
			overlayVLayout.insertContent(that.getOverlayContent(itemKey, activeAndinactiveRulesVLayout),
					mySubstitutesVerticalLayoutContentIndex);
			oSRMOverlayContainer.rerender();
		});
	} else {
		var oNavigationBar = sap.ui.getCore().byId(dynamicId + 'subsNavBar');
		oNavigationBar.setSelectedItem(dynamicId + "mySubstitutes");
		var activeAndinactiveRulesVLayout = sap.ui.getCore().byId(dynamicId + 'activeAndinactiveRulesVLayout');
		var overlayVLayout = sap.ui.getCore().byId(dynamicId + 'substitutionVLayout');
		overlayVLayout.insertContent(that.getOverlayContent(dynamicId + "mySubstitutes", activeAndinactiveRulesVLayout),
				mySubstitutesVerticalLayoutContentIndex);
		oSRMOverlayContainer.addContent(overlayVLayout);
	}
	return oSRMOverlayContainer;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.getOverlayContent = function(itemKey, activeAndinactiveRulesVLayout) {
	var dynamicId = this.getId() + '--';
	var that = this;
	var subsContent = {};
	var oSRMOverlayContainer = sap.ui.getCore().byId(dynamicId + 'substitutionOverlayContainer');
	var newSubstitutionLink = sap.ui.getCore().byId(dynamicId + 'newSubstitutionLink');
	var overlayVLayout = sap.ui.getCore().byId(dynamicId + 'substitutionVLayout');

	if (subsContent[itemKey])
		return subsContent[itemKey];
	if (itemKey === dynamicId + "mySubstitutes") {
		// Enabling 'New' link for creation of new substitution rule.
		newSubstitutionLink.setVisible(that.isSubstitutionRuleCreationSupported);
		//newSubstitutionLink.setVisible(true);
		activeAndinactiveRulesVLayout.removeContent(2);
		// your code for content creation goes here
		activeAndinactiveRulesVLayout.insertContent(that.createSubtRuleRowReapterContent(itemKey, true), 2);
		activeAndinactiveRulesVLayout.removeContent(8);
		activeAndinactiveRulesVLayout.insertContent(that.createSubtRuleRowReapterContent(itemKey, false), 8);

		subsContent[itemKey] = activeAndinactiveRulesVLayout
	} else if (itemKey === dynamicId + "iamSubstituting") {
		// Disabling 'New' link for creation of new substitution rule.
		newSubstitutionLink.setVisible(false);
		// your code for content creation goes here
		activeAndinactiveRulesVLayout.removeContent(2);
		activeAndinactiveRulesVLayout.insertContent(that.createSubtRuleRowReapterContent(itemKey, true), 2);
		activeAndinactiveRulesVLayout.removeContent(8);
		activeAndinactiveRulesVLayout.insertContent(that.createSubtRuleRowReapterContent(itemKey, false), 8);

		subsContent[itemKey] = activeAndinactiveRulesVLayout;
	}
	return subsContent[itemKey];
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.openCreateSubstRulePopup = function(oEvent, oSubtRuleManager) {

	var that = this;
	var dynamicId = oSubtRuleManager.getId() + '--';
	var newSubstitutionLink = sap.ui.getCore().byId(dynamicId + 'newSubstitutionLink');
	var createSubsRulePopup = sap.ui.getCore().byId(dynamicId + 'createSubsRulePopup');
	if (createSubsRulePopup === undefined) {
		createSubsRulePopup = new sap.ui.ux3.ToolPopup(dynamicId + 'createSubsRulePopup', {
			modal : true
		});
		var popupMainMatrix = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'popupMainMatrix', {
			layoutFixed : true,
			width : '300px',
			columns : 2,
			widths : ["35%", "65%"]
		});
		// popupMainMatrix.setWidths('100px', '200px');

		var popupMainMatrixCell1 = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'popupMainMatrixCell1', {
			colSpan : 2
		});

		var popupMainMatrixCellMsgBar = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'popupMainMatrixCellMsgBar',
				{
					colSpan : 2
				});

		popupMainMatrixCell1.addContent(new sap.ui.commons.TextView(dynamicId + 'popupCreateSubstRuleTxt', {
			text : oSubtRuleManager._oBundle.getText("CREATE_SUBSTITUTION_RULE"), /* 'Create Substitution Rule', */
			design : sap.ui.commons.TextViewDesign.H3
		}).addStyleClass("textFontColour"));
		popupMainMatrix.createRow(popupMainMatrixCell1);
		popupMainMatrix.createRow(popupMainMatrixCellMsgBar);

		// Msg Bar
		oSubtRuleManager.populateMessageBar(oSubtRuleManager);

		// End Msg Bar

		var popupMainMatrixCell2 = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'popupMainMatrixCell2', {
			colSpan : 2
		});
		popupMainMatrixCell2.addContent(new sap.ui.commons.HorizontalDivider(dynamicId + 'popHorzDivdr1'));
		popupMainMatrix.createRow(popupMainMatrixCell2);

		var popupSubstLbl = new sap.ui.commons.Label(dynamicId + 'popupSubstLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_RULE_SUBSTITUTE_LABEL")
		});

		var popupValueHelp = new sap.ui.commons.ValueHelpField(dynamicId + 'popupValueHelp', {
			width : '100%',
			value : ""
		});

		popupValueHelp.attachValueHelpRequest(oSubtRuleManager, oSubtRuleManager.openUsersDialog);
		popupValueHelp.setRequired(true);
		popupValueHelp.setTooltip(oSubtRuleManager._oBundle.getText("SUBSTITUTION_RULE_SUBSTITUTE_TOOLTIP"));

		popupSubstLbl.setLabelFor(popupValueHelp);
		popupMainMatrix.createRow(popupSubstLbl, popupValueHelp);

		var popupAutoFwdtLbl = new sap.ui.commons.Label(dynamicId + 'popupAutoFwdtLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_LABEL")
		/* 'Automatic Forwarding:' */
		});
		var popupSegBtn = new sap.ui.commons.SegmentedButton(dynamicId + 'popupSegBtn', {
			buttons : [new sap.ui.commons.Button(dynamicId + 'popupSegBtnON', {
				text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE_TEXT"),// "ON"
				tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE")
			}), new sap.ui.commons.Button(dynamicId + 'popupSegBtnOFF', {
				text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_OFF_STATE_TEXT"), // "OFF"
				tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_OFF_STATE")
			})]
		});

		popupSegBtn.attachSelect(function(oEvent) {
			if (sap.ui.getCore().byId

			(oEvent.getParameters().selectedButtonId).getText() == oSubtRuleManager._oBundle
					.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE_TEXT")) {

				// make the label and the DatePicket invisible. QuickFix. TODO: Create Rows and add or remove Rows.
				sap.ui.getCore().byId(dynamicId +

				'popupFromDatePicker').setProperty("visible", true);
				sap.ui.getCore().byId(dynamicId +

				'popupToDatePicker').setProperty("visible", true);

				// labels visibility set to false

				sap.ui.getCore().byId(dynamicId +

				'popupFromLbl').setProperty("visible", true);
				sap.ui.getCore().byId(dynamicId +

				'popupToLbl').setProperty("visible", true);

				// reset the required property to true

				sap.ui.getCore().byId(dynamicId +

				'popupFromDatePicker').setProperty("required", true);
				sap.ui.getCore().byId(dynamicId +

				'popupToDatePicker').setProperty("required", true);

			} else {

				// make the label and the DatePicker invisible. QuickFix. TODO: Create Rows and add or remove Rows.
				sap.ui.getCore().byId(dynamicId +

				'popupFromDatePicker').setProperty("visible", false);
				sap.ui.getCore().byId(dynamicId +

				'popupToDatePicker').setProperty("visible", false);

				// labels visibility set to false

				sap.ui.getCore().byId(dynamicId +

				'popupFromLbl').setProperty("visible", false);
				sap.ui.getCore().byId(dynamicId +

				'popupToLbl').setProperty("visible", false);

				// set the required property to false

				sap.ui.getCore().byId(dynamicId +

				'popupFromDatePicker').setProperty("required", false);
				sap.ui.getCore().byId(dynamicId +

				'popupToDatePicker').setProperty("required", false);

			}

			popupMainMatrix.rerender();
		});
		popupSegBtn.setSelectedButton(dynamicId + "popupSegBtnON");
		popupAutoFwdtLbl.setLabelFor(popupSegBtn);
		popupAutoFwdtLbl.setWrapping(true);
		popupMainMatrix.createRow(popupAutoFwdtLbl, popupSegBtn);

		var popupFromLbl = new sap.ui.commons.Label(dynamicId + 'popupFromLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTION_FROM_DATE_LABEL")
		/* 'From:' */
		});
		var popupFromDatePicker = new sap.ui.commons.DatePicker(dynamicId + 'popupFromDatePicker', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTION_FROM_DATE_LABEL"),/* 'fromDate', */
			width : '100%',
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_CREATE_FROM_DATE_TOOLTIP")
		});
		popupFromDatePicker.setRequired(true);
		popupFromDatePicker.setYyyymmdd(oSubtRuleManager.substitutionRulesManagerUtils._getTodaysDateinYYYYMMDD());
		// popupFromDatePicker.setLocale("en-US");//TODO: Donot hard code
		// Locale, should automatically pick from sap.ui.getCore().getLocale().
		popupFromLbl.setLabelFor(popupFromDatePicker);

		popupMainMatrix.createRow(popupFromLbl, popupFromDatePicker);

		var popupToLbl = new sap.ui.commons.Label(dynamicId + 'popupToLbl', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTION_TO_DATE_LABEL")
		/* 'To:' */
		});
		var popupToDatePicker = new sap.ui.commons.DatePicker(dynamicId + 'popupToDatePicker', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTION_TO_DATE_LABEL"),
			width : '100%',
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_CREATE_TO_DATE_TOOLTIP")
		});
		popupToDatePicker.setRequired(true);
		// popupToDatePicker.setLocale("en-US");//TODO: Donot Hard Code Locale,
		// should automatically pick from sap.ui.getCore().getLocale().
		popupToLbl.setLabelFor(popupToDatePicker);
		popupMainMatrix.createRow(popupToLbl, popupToDatePicker);

		var popupMainMatrixCell3 = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'popupMainMatrixCell3', {
			colSpan : 2
		});
		popupMainMatrixCell3.addContent(new sap.ui.commons.HorizontalDivider(dynamicId + 'popHorzDivdr2'));
		popupMainMatrix.createRow(popupMainMatrixCell3);

		// var popupMainMatrixCell4 = new
		// sap.ui.commons.layout.MatrixLayoutCell(dynamicId +
		// 'popupMainMatrixCell4',{colSpan : 2});
		var popupCreateBtn = new sap.ui.commons.Button(dynamicId + 'popupCreateBtn', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTIN_RULE_CREATE_BUTTON"),/* 'Create' */
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_CREATE_BUTTON_TOOLTIP")
		});
		popupCreateBtn.attachPress(oSubtRuleManager, oSubtRuleManager.createSubstitutionRule);
		// popupCreateBtn.addStyleClass("customMargin");
		// popupMainMatrixCell4.addContent(popupCreateBtn);
		var popupCancelBtn = new sap.ui.commons.Button(dynamicId + 'popupCancelBtn', {
			text : oSubtRuleManager._oBundle.getText("SUBSTITUTION_SUBSTITUTIN_RULE_CANCEL_BUTTON"),/* 'Cancel' */
			tooltip : oSubtRuleManager._oBundle.getText("SUBSTITUTION_CANCEL_BUTTON_TOOLTIP"),
			press : function() {

				// oSubtRuleManager.resetSubstRulePopup(oSubtRuleManager);
				createSubsRulePopup.close();
				createSubsRulePopup.destroy();
			}
		});
		// popupMainMatrixCell4.addContent(popupCancelBtn);
		popupMainMatrix.createRow(popupCreateBtn, popupCancelBtn);

		createSubsRulePopup.addContent(popupMainMatrix);
	}
	oSubtRuleManager.deleteMessage();
	createSubsRulePopup.setPosition(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.EndTop, newSubstitutionLink
			.getDomRef(), "13 -10", "none");
	createSubsRulePopup.open();
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.createSubtRuleRowReapterContent = function(itemKey,
		isActiveSubstRule) {
	var isSubstitutedUserRules = (itemKey === this.getId() + '--' + 'mySubstitutes') ? true : false;
	var dynamicId = itemKey;

	if (isActiveSubstRule) {
		dynamicId = dynamicId + 'active' + '--';
	} else {
		dynamicId = dynamicId + 'inactive' + '--';
	}

	var that = this;
	var oSubstRuleRowRepater = sap.ui.getCore().byId(dynamicId + 'subsRowRepeater');
	if (oSubstRuleRowRepater === undefined) {
		oSubstRuleRowRepater = new sap.ui.commons.RowRepeater(dynamicId + 'subsRowRepeater', {
			numberOfRows : 2
		});
		oSubstRuleRowRepater.attachPage(that, that.deleteMessage);
		oSubstRuleRowRepater.setDesign(sap.ui.commons.RowRepeaterDesign.Transparent);
		oSubstRuleRowRepater.setNoData(new sap.ui.commons.TextView({
			text : that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_NO_SUBSTITUTION_RULES_FOUND")
		}));
		// main matrix
		var rowRepMainMatrix = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepMainMatrix', {
			layoutFixed : true,
			// columns : 6, //UX:FEEDBACK CODE
			// widths : ['1%', '40%', '24%', '20%', '12%', '3%']////UX:FEEDBACK CODE
			columns : 6,
			// widths : ['1.5%', '2%', '37%', '24%', '21%', '12%', '3%']
			widths : ['2%', '37%', '24%', '21%', '12%', '3%']
		});
		if (isActiveSubstRule) {
			rowRepMainMatrix.addStyleClass('borderFillColorGreen');
			rowRepMainMatrix.addStyleClass('shadowEffectGreen');
			rowRepMainMatrix.addStyleClass('mySapUiMltPadRight');

		} else {
			rowRepMainMatrix.addStyleClass('borderFillColorGray');
			rowRepMainMatrix.addStyleClass('shadowEffectGray');
			// rowRepMainMatrix.addStyleClass('mySapUiMltPadRight');
		}

		// var rowRepGreyCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepGreyCell');
		// //rowRepGreyCell.addStyleClass("greyFillColor");
		// if(isActiveSubstRule){
		// rowRepGreyCell.addStyleClass("shadowEffectGreen");
		// }

		var rowRepEmptyCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepEmptyCell');
		var rowRepEmpltyTxt = new sap.ui.commons.TextView(dynamicId + 'substitutionID');
		rowRepEmpltyTxt.setVisible(false);
		rowRepEmpltyTxt.bindProperty("text", "SubstitutionRuleID");
		rowRepEmptyCell.addContent(rowRepEmpltyTxt);

		var rowRepSubsDetailMatLyt = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepSubsDetailMatLyt', {
			columns : 1,
			layoutFixed : true
		});

		// Creating Empty Row above Substitute Name.
		var rowRepEmptyRow1 = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepEmptyRow1');
		var rowRepEmpltyTxt1 = new sap.ui.commons.TextView(dynamicId + 'rowRepEmpltyTxt1', {
			text : ""
		});
		var rowRepEmpltyCell1 = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepEmpltyCell1', {
			backgroundDesign : sap.ui.commons.layout.BackgroundDesign.Transparent
		});
		rowRepEmpltyCell1.addContent(rowRepEmpltyTxt1);
		rowRepEmptyRow1.addCell(rowRepEmpltyCell1);
		// rowRepSubsDetailMatLyt.addRow(rowRepEmptyRow1);

		// Creating Row for Substitute(d) User Name
		var rowRepSubstNameRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepSubstNameRow');
		var rowRepSubstNameTxtView;
		rowRepSubstNameTxtView = new sap.ui.commons.TextView(dynamicId + 'rowRepSubstNameTxtView');
		rowRepSubstNameTxtView.bindProperty("text", "FullName", function(value) {
			if (value !== null && value !== "") {
				// var indexOfComma = value.indexOf(",");
				// var lastName = value.substring(indexOfComma + 1);
				// if(lastName === " ")value = value.substring(0, indexOfComma);//Removing comma in case there is no last name
				// for a user.
				// TODO: Uncommented Code to remove commas, as decided will fetch last name and first name from the service,
				// decision on this still pending.
				return value;
			}
		});
		rowRepSubstNameTxtView.addStyleClass('blueFontColor');

		var rowRepSubstNameCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepSubstNameCell', {
			backgroundDesign : sap.ui.commons.layout.BackgroundDesign.Transparent
		});
		rowRepSubstNameCell.addContent(rowRepSubstNameTxtView);
		rowRepSubstNameRow.addCell(rowRepSubstNameCell);
		rowRepSubsDetailMatLyt.addRow(rowRepSubstNameRow);

		// Creating Row for User Friendly Text below the Substitute(d) User Name
		var rowRepUsrFriendlyRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepUsrFriendlyRow');
		var rowRepUsrFriendlyTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepUsrFriendlyTxt');
		rowRepUsrFriendlyTxt.addStyleClass('blackFontColor');

		rowRepUsrFriendlyTxt.bindProperty("text", "FullName", function(value) {
			if (value !== null && value !== "" && value) {
				var oModel = this.getModel();
				return that.substitutionRulesManagerUtils._getText(value, isSubstitutedUserRules, oModel
						.getProperty('IsEnabled', this.getBindingContext(), false), oModel.getProperty(
						'SupportsEnableSubstitutionRule', this.getBindingContext(), false), oModel.getProperty('BeginDate', this
						.getBindingContext(), false), oModel.getProperty('EndDate', this.getBindingContext(), false));
			}
		});

		var rowRepUsrFriendlyCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepUsrFriendly');
		rowRepUsrFriendlyCell.addContent(rowRepUsrFriendlyTxt);
		rowRepUsrFriendlyRow.addCell(rowRepUsrFriendlyCell);
		rowRepSubsDetailMatLyt.addRow(rowRepUsrFriendlyRow);

		// TODO: Empty Row below the user friendly text.
		/*
		 * var matrixSubRow = new sap.ui.commons.layout.MatrixLayoutRow(); control = new sap.ui.commons.TextView({ text : ""
		 * }); matrixCell = new sap.ui.commons.layout.MatrixLayoutCell({ backgroundDesign :
		 * sap.ui.commons.layout.BackgroundDesign.Transparent }); matrixCell.addContent(control);
		 * matrixSubRow.addCell(matrixCell);
		 */
		// rowRepSubsDetailMatLyt.addRow(rowRepEmptyRow1);
		// Second column for since and until dates.
		var rowRepSinceUntilMatLyt = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepSinceUntilMatLyt', {
			columns : 1,
			layoutFixed : true
		});

		/*
		 * var rowRepSinceUntilRow = new sap.ui.commons.layout.MatrixLayoutRow(); control = new sap.ui.commons.TextView({
		 * text : "" }); matrixCell = new sap.ui.commons.layout.MatrixLayoutCell({ backgroundDesign :
		 * sap.ui.commons.layout.BackgroundDesign.Transparent }); matrixCell.addContent(control);
		 * matrixSubRow.addCell(matrixCell);
		 */
		// rowRepSinceUntilMatLyt.addRow(rowRepEmptyRow1);
		// Second Column Since Date Row
		var rowRepSinceDateRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepSinceDateRow');
		var rowRepSinceDateTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepSinceDateTxt');
		rowRepSinceDateTxt.addStyleClass('grayFontColor');
		var sinceNFromTxt = that._oBundle.getText("SUBSTITUTION_RULE_SINCE_LABEL");// "Since : ";
		if (!isActiveSubstRule) {
			sinceNFromTxt = that._oBundle.getText("SUBSTITUTION_SUBSTITUTION_FROM_DATE_LABEL");// "From : ";
		}
		// rowRepSinceDateTxt.setText(sinceNFromTxt + "02/02/2012");
		rowRepSinceDateTxt.bindProperty("text", "BeginDate", function(value) {
			// display the From and To only in case of Push (Auto Forward ON Rules)
			if (value !== undefined && value !== null & value !== "") {
				var oModel = this.getModel();
				//if (oModel.getProperty('SupportsEnableSubstitutionRule', this.getBindingContext(), false)) : Do we need this condition ?
					return sinceNFromTxt + " : " + that.substitutionRulesManagerUtils._getFormattedDate(value);
			}
		});
		var rowRepSinceDateCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepSinceDate', {
			backgroundDesign : sap.ui.commons.layout.BackgroundDesign.Transparent
		});
		rowRepSinceDateCell.addContent(rowRepSinceDateTxt);
		rowRepSinceDateRow.addCell(rowRepSinceDateCell);
		rowRepSinceUntilMatLyt.addRow(rowRepSinceDateRow);

		// Second Column Until Date Row
		var rowRepUntilDateRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepUntilDateRow');
		var rowRepUntilDateTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepUntilDateTxt');// , {text : "Until : " +
																																														// "05/02/2012"});//TODO
																																														// From Service
		rowRepUntilDateTxt.addStyleClass('grayFontColor');
		rowRepUntilDateTxt.bindProperty("text", "EndDate", function(value) {
			// display the From and To only in case of Push (Auto Forward ON Rules)
			if (value !== undefined && value !== null & value !== "") {
				var oModel = this.getModel();
			//	if (oModel.getProperty('SupportsEnableSubstitutionRule', this.getBindingContext(), false)) : Do we need this condition ?
					return that._oBundle.getText("SUBSTITUTION_RULE_UNTIL_LABEL") + " : "
							+ that.substitutionRulesManagerUtils._getFormattedDate(value);// "Until : "
			}
		});
		var rowRepUntilDateCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepUntilDateCell');
		rowRepUntilDateCell.addContent(rowRepUntilDateTxt);
		rowRepUntilDateRow.addCell(rowRepUntilDateCell);
		rowRepSinceUntilMatLyt.addRow(rowRepUntilDateRow);

		/*
		 * matrixSubRow = new sap.ui.commons.layout.MatrixLayoutRow(); control = new sap.ui.commons.TextView({ text : "" });
		 * matrixCell = new sap.ui.commons.layout.MatrixLayoutCell({ backgroundDesign :
		 * sap.ui.commons.layout.BackgroundDesign.Transparent }); matrixCell.addContent(control);
		 * matrixSubRow.addCell(matrixCell);
		 */
		// rowRepSinceUntilMatLyt.addRow(rowRepEmptyRow1);

		// Third column for Active For/In Time.
		var rowRepActiveTimeMatLyt = new sap.ui.commons.layout.MatrixLayout(dynamicId + 'rowRepActiveTimeMatLyt', {
			columns : 1,
			layoutFixed : true
		});

		// sub matrix row
		/*
		 * matrixSubRow = new sap.ui.commons.layout.MatrixLayoutRow(); control = new sap.ui.commons.TextView({ text : "" });
		 * matrixCell = new sap.ui.commons.layout.MatrixLayoutCell({ backgroundDesign :
		 * sap.ui.commons.layout.BackgroundDesign.Transparent }); matrixCell.addContent(control);
		 * matrixSubRow.addCell(matrixCell);
		 */

		// TODO: Different controls have to be created and added for the empty space. Same control cannot be added at
		// multiple places. Else try with padding through CSS.
		// rowRepActiveTimeMatLyt.addRow(rowRepEmptyRow1);
		// Third column row for Text Active For/In
		var rowRepActiveRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepActiveRow');
		var rowRepActiveTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepActiveTxt');
		rowRepActiveTxt.addStyleClass('grayFontColor');

		// TODO: externalize and modify for/In according to active or inactive.
		// From utils
		
		rowRepActiveTxt.bindProperty("text", "FullName", function(value) {
			if (value !== null && value !== "") {
				var oModel = this.getModel();
				var activeTxt = that.substitutionRulesManagerUtils._getStatus(isSubstitutedUserRules, oModel.getProperty('IsEnabled', this.getBindingContext(), false),
							oModel.getProperty('BeginDate', this.getBindingContext(), false), oModel.getProperty('EndDate', this.getBindingContext(), false));
					return activeTxt;
			}
		});

		rowRepActiveTxt.addStyleClass('blueFontColor');
		//
		// rowRepActiveTxt.setText(activeTxt);
		var rowRepActiveCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepActiveCell', {
			backgroundDesign : sap.ui.commons.layout.BackgroundDesign.Transparent
		});
		rowRepActiveCell.addContent(rowRepActiveTxt);
		rowRepActiveRow.addCell(rowRepActiveCell);
		rowRepActiveTimeMatLyt.addRow(rowRepActiveRow);

		// Third Column Row for Time in Days.
		var rowRepTimeInDaysRow = new sap.ui.commons.layout.MatrixLayoutRow(dynamicId + 'rowRepTimeInDaysRow');
		var rowRepTimeInDaysTxt = new sap.ui.commons.TextView(dynamicId + 'rowRepTimeInDaysTxt');
		rowRepTimeInDaysTxt.addStyleClass('blueFontColor');

		var timeInDaysTxt = ''; // TODO Use Service.
		var rowRepTimeInDaysCell = new sap.ui.commons.layout.MatrixLayoutCell(dynamicId + 'rowRepTimeInDaysCell');
		rowRepTimeInDaysCell.addContent(rowRepTimeInDaysTxt);
		rowRepTimeInDaysRow.addCell(rowRepTimeInDaysCell);
		rowRepActiveTimeMatLyt.addRow(rowRepTimeInDaysRow);

		/*
		 * matrixSubRow = new sap.ui.commons.layout.MatrixLayoutRow(); control = new sap.ui.commons.TextView({ text : "" });
		 * matrixCell = new sap.ui.commons.layout.MatrixLayoutCell({ backgroundDesign :
		 * sap.ui.commons.layout.BackgroundDesign.Transparent }); matrixCell.addContent(control);
		 * matrixSubRow.addCell(matrixCell);
		 */
		rowRepActiveTimeMatLyt.addRow(rowRepTimeInDaysRow);

		// Fouth Column On Off Segemented Button
		var rowRepOnOffSegBtn = new sap.ui.commons.SegmentedButton(dynamicId + 'rowRepOnOffSegBtn', {
			visible : false,
			buttons : [new sap.ui.commons.Button(dynamicId + 'rowRepOnSegBtn', {
				text : that._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE_TEXT"),
				tooltip : that._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_ON_STATE_TEXT")
			}),// "ON"
			new sap.ui.commons.Button(dynamicId + 'rowRepOffSegBtn', {
				text : that._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_OFF_STATE_TEXT"),
				tooltip : that._oBundle.getText("SUBSTITUTION_AUTOMATIC_FORWARDING_OFF_STATE_TEXT")
			})// "OFF"
			]
		});

		// We use this variable to enable/disable the Segmented Button.
		// We disable it when the Mode is "RECIEVE_TASKS" and view is I Am Substituting and if Mode is null, true in all
		// other cases.
		/* var enableSegBtn = true; */

		rowRepOnOffSegBtn.bindProperty("visible", "SupportsEnableSubstitutionRule");

		rowRepOnOffSegBtn.bindProperty("enabled", "IsEnabled", function(value) {
			if (value != null && value !== "") {
				if (value) {
					this.setSelectedButton(this.getButtons()[0].getId());
				} else {
					this.setSelectedButton(this.getButtons()[1].getId());
				}
			}
			return true;
		});
		rowRepOnOffSegBtn.attachSelect(this, function(oEvent, that) {
				var bEnable = true;
				if((oEvent.mParameters.selectedButtonId.indexOf("rowRepOnSegBtn")) == -1){
					bEnable = false;
				}
				that.updateSubstitutionRule(oEvent, that, bEnable);
		});

		// Fifth Row Delete Image.
		if (isSubstitutedUserRules) {
			var rowRepDeleteImg = new sap.ui.commons.Image(dynamicId + 'rowRepDeleteImg', {
				src : that._imgResourcePath + sap.uiext.inbox.SubstitutionRulesManagerConstants.deleteSubstRule,
				tooltip : this._oBundle.getText("SUBSTITUTION_RULE_DELETE"),
				decorative : false,
			});
			rowRepDeleteImg.setWidth("21px");
			rowRepDeleteImg.setHeight("21px");
			rowRepDeleteImg.bindProperty("visible", "SupportsDeleteSubstitutionRule", function(value) {
				return value;
			});
			rowRepDeleteImg.attachPress(this, this.deleteSubstitutionRule);
			// UX FEEDBACK CODE
			// rowRepMainMatrix.createRow(rowRepEmptyCell, rowRepSubsDetailMatLyt, rowRepSinceUntilMatLyt,
			// rowRepActiveTimeMatLyt, rowRepOnOffSegBtn, rowRepDeleteImg);
			rowRepMainMatrix.createRow(rowRepEmptyCell, rowRepSubsDetailMatLyt, rowRepSinceUntilMatLyt,
					rowRepActiveTimeMatLyt, rowRepOnOffSegBtn, rowRepDeleteImg);
		} else {
			// UX FEEDBACK CODE
			// rowRepMainMatrix.createRow(rowRepEmptyCell, rowRepSubsDetailMatLyt, rowRepSinceUntilMatLyt,
			// rowRepActiveTimeMatLyt, rowRepOnOffSegBtn);
			rowRepMainMatrix.createRow(rowRepEmptyCell, rowRepSubsDetailMatLyt, rowRepSinceUntilMatLyt,
					rowRepActiveTimeMatLyt, rowRepOnOffSegBtn);
		}

		var rowRepMainMatrixWapperMatrix = new sap.ui.commons.layout.MatrixLayout(dynamicId
				+ 'rowRepMainMatrixWapperMatrix', {
			layoutFixed : true
		});
		rowRepMainMatrixWapperMatrix.createRow(rowRepMainMatrix);
		rowRepMainMatrixWapperMatrix.createRow(new sap.ui.commons.TextView(dynamicId + 'rowRepWapperMatEmptyTxt', {
			text : ""
		}));

		// oSubstRuleRowRepater.setModel(this.getModel());
		var collectionPath = (itemKey === (this.getId() + '--iamSubstituting'))
				? this.substitutesRuleCollection
				: this.substitutionRuleCollection;// TODO: Constants
		var oFilter = [];
		var filter = new sap.ui.model.Filter("IsEnabled", sap.ui.model.FilterOperator.EQ, isActiveSubstRule
				? "true"
				: "false");
		oFilter.push(filter);

		oSubstRuleRowRepater.bindRows("/" + collectionPath, rowRepMainMatrixWapperMatrix, null, oFilter);
	} else {
		this._refreshBindings(itemKey, isActiveSubstRule);
	}

	return oSubstRuleRowRepater;

};

// TODO: Need to reuse this function instead of duplicating the code in methods above, had some issue so not not this
// try this.
// The same needs to be done for user friendly text.
// Can remove this peice of code, it not being used anywhere.
sap.uiext.inbox.SubstitutionRulesManager.prototype.formatUserName = function(value) {
	if (value !== null && value !== "") {
		var indexOfComma = value.indexOf(",");
		var lastName = value.substring(indexOfComma + 1);
		if (lastName === " ")
			value = value.substring(0, indexOfComma);
		return value;// Removing comma in case there is no last name for a user.
	}
}

sap.uiext.inbox.SubstitutionRulesManager.prototype.bindSubstitutionRules = function(path) {
	/*
	 * var oFilter = []; var filter = new sap.ui.model.Filter("IsSubstituted", sap.ui.model.FilterOperator.EQ,
	 * isSubstituted); oFilter.push(filter); filter = new sap.ui.model.Filter("Active", sap.ui.model.FilterOperator.EQ,
	 * isActiveSubstRule?"true":"false"); oFilter.push(filter); var oSubstRuleRowRepater =
	 * this._getComponent("subsRowRepeater"); var rowRepMainMatrixWapperMatrix =
	 * this._getComponent("rowRepMainMatrixWapperMatrix"); oSubstRuleRowRepater.bindRows(this.sPath,
	 * rowRepMainMatrixWapperMatrix, null, oFilter);
	 */};

sap.uiext.inbox.SubstitutionRulesManager.prototype.populateMsgBar = function() {
	var msgBarContainer = new sap.ui.commons.Toolbar(this.getId() + '--' + "msgBarContainer", {
		visible : false
	});
	var msbBarTypeImg = new sap.ui.commons.Image({
		id : this.getId() + '--' + "msbBarTypeImg",
		text : "",
		decorative : false
	});
	var msbBarTypeMsg = new sap.ui.commons.TextView({
		id : this.getId() + '--' + "msbBarTextView",
		text : ""
	});
	var msbBarCloseImg = new sap.ui.commons.Image({
		id : this.getId() + '--' + "msbBarCloseImg",
		text : "",
		decorative : false,
		tooltip : this._oBundle.getText("INBOX_MSGBAR_CLOSE_TOOLTIP")
	});
	msbBarCloseImg.addStyleClass("sapUiExtInboxToolbarRight");
	msbBarCloseImg.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.closeImg);
	msbBarCloseImg.attachPress(this, this.deleteMessage);
	msgBarContainer.addItem(msbBarTypeImg);
	msgBarContainer.addItem(msbBarTypeMsg);
	msgBarContainer.addItem(msbBarCloseImg);
	return msgBarContainer;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.deleteMessage = function(oEvent, subRulesMgr) {
	if (subRulesMgr === undefined)
		subRulesMgr = this;
	var msgBarTB = sap.ui.getCore().byId(subRulesMgr.getId() + '--' + 'msgBarContainer');
	if (msgBarTB != undefined) {
		msgBarTB.setVisible(false);
		sap.ui.getCore().byId(subRulesMgr.getId() + '--' + 'msbBarTextView').setText("");
		sap.ui.getCore().byId(subRulesMgr.getId() + '--' + 'msbBarTypeImg').setSrc("");
	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.showMessage = function(messageType, messageText) {
	var msgBarTB = sap.ui.getCore().byId(this.getId() + '--' + 'msgBarContainer');
	if (msgBarTB != undefined) {
		msgBarTB.setVisible(true);

		var msgBarText = this._getComponent('msbBarTextView');
		msgBarText.setText(messageText);

		var msgBarTypeImg = this._getComponent('msbBarTypeImg');
		msgBarTypeImg.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.messageTypeIcons[messageType]);
		msgBarTypeImg.setTooltip(this._oBundle.getText(sap.uiext.inbox.InboxConstants.messageTypeToolTip[messageType])
				+ " " + messageText);

	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._getComponent = function(sComponentName) {
	return sap.ui.getCore().byId(this.getId() + '--' + sComponentName);
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.deleteSubstitutionRule = function(oEvent, that) {
	var oModel = that.getModel();
	var oContext = oEvent.getSource().getBindingContext();
	var ruleID = oModel.getProperty("SubstitutionRuleID", oContext);
	var sapOrigin = oModel.getProperty("SAP__Origin", oContext);

	var sQueryParams =  that.inboxConstants.forwardSlash
			+ that.substitutionConstants.deleteRuleExecutionFunctionImport + that.inboxConstants.query
			+ "SubstitutionRuleID='" + ruleID + "'" + that.inboxConstants.amperSand + "SAP__Origin='" + sapOrigin + "'" + that.inboxConstants.amperSand
			+ that.inboxConstants.formatJSONURLParam;

	var requestURI = that.sUrl + sQueryParams;

	//oModel.oHeaders["DataServiceVersion"] = "2.0";  //TODO: Why do we need this now ? As in other places we make 2.0 not 1.0
	var requestOptions = {
		async : false,
		requestUri : requestURI,
		method : "POST",
		headers : {
			Accept : that.inboxConstants.acceptHeaderforJSON,
			"x-csrf-token" : oModel.oHeaders["x-csrf-token"]
		}
	};

	OData.request(requestOptions, function(data, request) {
			var oNavigationBar = sap.ui.getCore().byId(that.getId() + '--subsNavBar');
			var selectedNavItemID = oNavigationBar.getSelectedItem();
			that._refreshBindings(selectedNavItemID);
			that.showMessage("info", that._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_DELETED_SUCCESSFULLY"));
		},
			function(error) {
				if (error.response === undefined || error.response.statusCode != 205) {
					that.showMessage("error", that._oBundle
							.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_UPDATION_FAILURE_CONTACT_ADMIN"));
				} else if (error.response.statusCode == 205) {
						var eventParams = {
						statusCode : error.response.statusCode,
						statusText : error.response.statusText
				};
					oModel.fireRequestFailed(eventParams);
		}
	});

};

sap.uiext.inbox.SubstitutionRulesManager.prototype.updateSubstitutionRule = function(oEvent, that, bEnable) {
	var oModel = that.getModel();
	var oContext = oEvent.getSource().getBindingContext();
	var ruleID = oModel.getProperty("SubstitutionRuleID", oContext);
	var sapOrigin = oModel.getProperty("SAP__Origin", oContext);

	var sQueryParams =  that.inboxConstants.forwardSlash
			+ that.substitutionConstants.updateRuleExecutionFunctionImport + that.inboxConstants.query
			+ "SubstitutionRuleID='" + ruleID + "'" + that.inboxConstants.amperSand + "Enabled=" + bEnable
			+ that.inboxConstants.amperSand + "SAP__Origin='" + sapOrigin + "'" + that.inboxConstants.amperSand
			+ that.inboxConstants.formatJSONURLParam;

	var requestURI = that.sUrl + sQueryParams;

	//oModel.oHeaders["DataServiceVersion"] = "2.0";
	var requestOptions = {
		async : false,
		requestUri : requestURI,
		method : "POST",
		headers : {
			"Accept" : that.inboxConstants.acceptHeaderforJSON,
			"x-csrf-token" : oModel.oHeaders["x-csrf-token"]
		}
	};

	OData.request(requestOptions, function(data, request) {
		var oNavigationBar = sap.ui.getCore().byId(that.getId() + '--subsNavBar');
		var selectedNavItemID = oNavigationBar.getSelectedItem();
		that._refreshBindings(selectedNavItemID);
		that.showMessage("info", that._oBundle
				.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_UPDATED_SUCCESSFULLY"));
	}, function(error) {
		if (error.response === undefined || error.response.statusCode != 205) {
			that.showMessage("error", that._oBundle
					.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_UPDATION_FAILURE_CONTACT_ADMIN"));
		} else if (error.response.statusCode == 205) {
			var eventParams = {
				statusCode : error.response.statusCode,
				statusText : error.response.statusText
			};
			oModel.fireRequestFailed(eventParams);
		}
	});
};

/*
 * sap.uiext.inbox.SubstitutionRulesManager.prototype.updateSubstitutionRule = function(oEvent, enabled, takeOver,
 * subRulesMgr) {
 * 
 * var oModel = subRulesMgr.getModel(); var oEntry = oEvent.getSource().getBindingContext().getObject(); if(enabled !=
 * undefined) oEntry.Enabled = enabled; else if(takeOver != undefined) oEntry.TakenOver = takeOver; //SAPUI5 by default
 * makes it DataServiceVersion 2.0 as oData 1.0 does not support skip/top etc: oModel.oHeaders["DataServiceVersion"] =
 * "1.0"
 * 
 * oModel.update(oEvent.getSource().getBindingContext().sPath, oEntry,null, function(){ var oNavigationBar =
 * sap.ui.getCore().byId(subRulesMgr.getId() + '--subsNavBar'); var selectedNavItemID =
 * oNavigationBar.getSelectedItem(); subRulesMgr._refreshBindings(selectedNavItemID); subRulesMgr.showMessage("info",
 * subRulesMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_UPDATED_SUCCESSFULLY")); },
 * function(error){ if(error.response === undefined || error.response.statusCode != 205){
 * subRulesMgr.showMessage("error",
 * subRulesMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_UPDATION_FAILURE_CONTACT_ADMIN"));
 * }else if(error.response.statusCode == 205){ var eventParams = {statusCode : error.response.statusCode, statusText :
 * error.response.statusText}; oModel.fireRequestFailed(eventParams); } }); };
 */

sap.uiext.inbox.SubstitutionRulesManager.prototype.createSubstitutionRule = function(oEvent, oSubRuleMgr) {
	var that = this;
	var error = oSubRuleMgr.validate(oSubRuleMgr);
	if (error === false) {

		var oModel = oSubRuleMgr.getModel();
		// SAPUI5 by default makes it DataServiceVersion 2.0 as oData 1.0 does not support skip/top etc:
	//	oModel.oHeaders["DataServiceVersion"] = "1.0"

		var oEntry = {};

		var oFormat = sap.ui.core.format.DateFormat.getDateInstance({
			pattern : "yyyyMMdd"
		});
		var startDate;
		var endDate;
		var endDateInputValue = oSubRuleMgr._getComponent('popupToDatePicker').getYyyymmdd();

		if (endDateInputValue != undefined && endDateInputValue !== "") {
			var endDateYear = endDateInputValue.substr(0, 4);
			var endDateMonth = endDateInputValue.substr(4, 2);
			var endDateDate = endDateInputValue.substr(6, 8);
			// endDate = oFormat.parse(endDateInputValue);
			var offset = oSubRuleMgr.substitutionRulesManagerUtils._getTimeZoneOffset();
			if (offset !== undefined) {
				offset = offset / (60 * 1000);
				endDate = new Date(Date.UTC(endDateYear, endDateMonth - 1, endDateDate, 23, 59 - offset, 59, 59))
			} else {
				endDate = oFormat.parse(endDateInputValue);
				endDate.setHours(23, 59, 59, 59);
			}
		} else {
			endDate = new Date(2100, 01, 01);
		}

		var startDateInputValue = oSubRuleMgr._getComponent('popupFromDatePicker').getYyyymmdd();

		if (startDateInputValue != undefined && startDateInputValue !== "") {
			var startDateYear = startDateInputValue.substr(0, 4);
			var startDateMonth = startDateInputValue.substr(4, 2);
			var startDateDate = startDateInputValue.substr(6, 8);
			var offset = oSubRuleMgr.substitutionRulesManagerUtils._getTimeZoneOffset();
			if (offset !== undefined) {
				offset = offset / (60 * 1000);
				startDate = new Date(Date.UTC(startDateYear, startDateMonth - 1, startDateDate, 0, -offset, 0, 0))
			} else {
				startDate = oFormat.parse(startDateInputValue);
			}
		} else {
			startDate = new Date();
			startDate.setHours(0, 0, 0, 0);
		}

		oEntry.EndDate = "\/Date(" + endDate.getTime() + ")\/";
		oEntry.BeginDate = "\/Date(" + startDate.getTime() + ")\/";

		// how do we get the logged in user details???//Chances have been made at server side, i donn think we this anymore.
		// oEntry.SubstitutedUser = "Administrator, ";
		// oEntry.SubstitutedUserId = "USER.PRIVATE_DATASOURCE.un:Administrator";

		var popupValueHelp = oSubRuleMgr._getComponent('popupValueHelp');
		oEntry.FullName = popupValueHelp.getValue();
		oEntry.User = popupValueHelp.data("uniqueName");

		var forwardSegmentButton = oSubRuleMgr._getComponent('popupSegBtn');
		var forwardSegmentSelectedButton = forwardSegmentButton.getSelectedButton();

		// assuming that Automatic forwarding is the mode
		if (forwardSegmentSelectedButton.indexOf("popupSegBtnON") >= 0) {
			oEntry.Mode = "RECEIVE_TASKS";
			// oEntry.Active = true;
			oEntry.IsEnabled = true;
			// oEntry.TakenOver = true;
		} else {
			oEntry.Mode = "TAKE_OVER";
			// oEntry.Active = true;
			oEntry.IsEnabled = true;
			// oEntry.TakenOver = false;
		}

		var createSubsRulePopup = sap.ui.getCore().byId(oSubRuleMgr.getId() + '--createSubsRulePopup');
		var sQueryParams= "?BeginDate='"+oEntry.BeginDate+"'&EndDate='"+oEntry.EndDate+"'&IsEnabled='"+oEntry.IsEnabled+"'&Mode='"+oEntry.Mode+"'&User='"+oEntry.User+"'";
		var oRequestOptions = {
		         async:false,
		         requestUri : oSubRuleMgr.sUrl + "/" + oSubRuleMgr.substitutionConstants.CREATE_SUBSTITUTION_RULE + sQueryParams,
		         method : "POST",
		         headers : {
		                Accept : "application/json",
		                "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
		         }
		  };
		
		oSubRuleMgr._callCreateSubstitutionRuleFunctionImport(oSubRuleMgr,oRequestOptions,oEntry);
		createSubsRulePopup.close();
		createSubsRulePopup.destroy();
	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.openUsersDialog = function(oEvent, oSubRuleMgr){
	var dynamicId = oSubRuleMgr.getId() + '--';
	var usersDialog = sap.ui.getCore().byId(dynamicId + "usersDialog");
	var oTable = sap.ui.getCore().byId(dynamicId + "userTable"); 
	if(usersDialog===undefined){
		var dLayout = new sap.ui.commons.layout.MatrixLayout({
			id : dynamicId + 'dLayout',
			layoutFixed : true,
			width : '100%'
			});
		
		
		var oSearch = new sap.ui.commons.SearchField({
			id : dynamicId + 'oSearch',	
	        enableListSuggest: false,
	        tooltip : oSubRuleMgr._oBundle.getText("SUBSTIUTION_RULE_SEARCH_FOR_USERS"),//"Search For Users",
	        value: oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_SEARCH_LABEL"),//"Search",
			editable : true,
	        width: '100%'});
		
		oSearch._ctrl.addStyleClass("sapUiExtInboxSubstitutionValueHelpTesxtStyle"); // styling internal variable of the SearchField control
		oSearch.onfocusin = function(){
			oSearch._ctrl.removeStyleClass("sapUiExtInboxSubstitutionValueHelpTextStyle");
			if(oSearch._ctrl.getLiveValue() === oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_SEARCH_LABEL")){
				oSearch.setValue("");
			}
		};
		oSearch.onfocusout = function(){
			if(oSearch._ctrl.getLiveValue() === ""){
				oSearch._ctrl.addStyleClass("sapUiExtInboxSubstitutionValueHelpTextStyle");
				oSearch.setValue(oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_SEARCH_LABEL"));
			}else{
				oSearch.setValue(oSearch._ctrl.getLiveValue());
			}
		};
		
		
		//TODO: When SearchUsers is changed to composite this can be removed and not necessary to have code in two places.
		oSearch.attachSearch(oSubRuleMgr,function(oEvent,oSubRuleMgr){
			var oSearchUserResultData = oSubRuleMgr._handleSearchUsersClickforCreateSubstitution(oEvent);
			if(oSearchUserResultData){
				var oModel = new sap.ui.model.json.JSONModel();
			    oModel.setData(oSearchUserResultData);
			    oTable.clearSelection();
			    oTable.setModel(oModel);
				oTable.bindRows("/results");//fetch from configration, not to be hard coded.
				if(oSearchUserResultData.results.length > 0){ // selecting first result of the returned search user result
					oTable.setSelectedIndex(0);
				}
			}
		});
		

		dLayout.createRow(oSearch);
		var users = {
				collection: "UserInfoCollection", //fetch from configration, not to be hardcoded.
				propertiesLabel: [oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_LOGONID"),
				                  oSubRuleMgr._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_NAME")],
				properties: ["UniqueName", "DisplayName"]
		};
		if (oTable === undefined) {
			oTable = new sap.ui.table.Table(dynamicId + "userTable", {
				selectionMode : sap.ui.table.SelectionMode.Single
			});
		}
		oTable.setModel(oSubRuleMgr.getModel());
		// oTable.setTitle( "User Table");
		oTable.setVisibleRowCount(5);
		oTable.bDynamic = true;
		for ( var i = 0; i <= users.properties.length - 1; i++) {
			oTable.addColumn(new sap.ui.table.Column().setLabel(new sap.ui.commons.Label({
				text : oSubRuleMgr._oBundle.getText(users.propertiesLabel[i]),
				design : sap.ui.commons.LabelDesign.Bold
			})).setTemplate(new sap.ui.commons.TextField({
				editable : false,
				value : {
					path : users.properties[i]
				}
			})));
		}

		var dLayoutCont = new sap.ui.commons.layout.VerticalLayout(dynamicId + "userDialogVLayout", {
			width : "100%"
		});
		dLayoutCont.insertContent(dLayout, 0);
		dLayoutCont.insertContent(oTable, 1);
		usersDialog = new sap.ui.commons.Dialog(dynamicId + "usersDialog", {
			modal : true,
			title : oSubRuleMgr._oBundle.getText("SUBSTIUTION_RULE_SEARCH_FOR_USERS"),// "Search For Users",
			content : [dLayoutCont],
			buttons : [new sap.ui.commons.Button(dynamicId + "usersDialogOKBtn", {
				text : oSubRuleMgr._oBundle.getText("INBOX_BUTTON_OK_TEXT"),
				tooltip : oSubRuleMgr._oBundle.getText("SUBSTITUTE_SEARCH_USERS_OK_BUTTON_TOOLTIP"),
				press : function() {
					var table = sap.ui.getCore().byId(dynamicId + "userTable");
					var selIndex = table.getSelectedIndex();
					var rowContext = table.getContextByIndex(selIndex);
					var tabModel = sap.ui.getCore().byId(dynamicId + 'userTable').getModel();
					var selUsesDisplayName = tabModel.getProperty("DisplayName", rowContext);
					if (selUsesDisplayName === null)
						selUsesDisplayName = "";
					var selUserUniqueName = tabModel.getProperty("UniqueName", rowContext);
					var popupValueHelp = oSubRuleMgr._getComponent('popupValueHelp');
					popupValueHelp.setValue(selUsesDisplayName);
					popupValueHelp.data("uniqueName", selUserUniqueName);

					/*
					 * var uniqueNameData = sap.ui.getCore().byId(dynamicId + "popupValueHelp" + "uniqueNameData");
					 * if(uniqueNameData === undefined){ uniqueNameData = new sap.ui.core.CustomData(dynamicId + "popupValueHelp" +
					 * "uniqueNameData" , mSettings?) }
					 */
					usersDialog.destroy();
					usersDialog.close();
				}
			})]
		});
	}
	usersDialog.setWidth("400px");
	usersDialog.open();

};
sap.uiext.inbox.SubstitutionRulesManager.prototype.validate = function(oSubRuleMgr) {

	var that = this;
	var validationError = false;
	var reason = "";
	var toDate, frmDate;
	var oFormat = sap.ui.core.format.DateFormat.getDateInstance({
		pattern : "yyyyMMdd"
	});

	var endDateInputValue = oSubRuleMgr._getComponent('popupToDatePicker').getYyyymmdd();
	var startDateInputValue = oSubRuleMgr._getComponent('popupFromDatePicker').getYyyymmdd();

	if (endDateInputValue != undefined && endDateInputValue !== "") {
		var endDateYear = endDateInputValue.substr(0, 4);
		var endDateMonth = endDateInputValue.substr(4, 2);
		var endDateDate = endDateInputValue.substr(6, 8);
		// endDate = oFormat.parse(endDateInputValue);
		var offset = oSubRuleMgr.substitutionRulesManagerUtils._getTimeZoneOffset();
		if (offset !== undefined) {
			offset = offset / (60 * 1000);
			toDate = new Date(Date.UTC(endDateYear, endDateMonth - 1, endDateDate, 23, 59 - offset, 59, 59))
		} else {
			toDate = oFormat.parse(endDateInputValue);
			toDate.setHours(23, 59, 59, 59);
		}
	}

	if (startDateInputValue != undefined && startDateInputValue !== "") {
		var startDateYear = startDateInputValue.substr(0, 4);
		var startDateMonth = startDateInputValue.substr(4, 2);
		var startDateDate = startDateInputValue.substr(6, 8);
		var offset = oSubRuleMgr.substitutionRulesManagerUtils._getTimeZoneOffset();
		if (offset !== undefined) {
			offset = offset / (60 * 1000);
			frmDate = new Date(Date.UTC(startDateYear, startDateMonth - 1, startDateDate, 0, -offset, 0, 0))
		} else {
			frmDate = oFormat.parse(startDateInputValue);
		}
	}

	// var toDate = new Date(oSubRuleMgr._getComponent('popupToDatePicker').getValue());
	// var frmDate = new Date(oSubRuleMgr._getComponent('popupFromDatePicker').getValue());
	var substituteUser = oSubRuleMgr._getComponent('popupValueHelp').getValue();

	var prop = oSubRuleMgr._getComponent('popupFromDatePicker').getProperty("required");

	if (substituteUser === null || substituteUser === "") {
		validationError = true;
		reason = oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SELECT_SUBSTITUTE");

	}
	if (validationError != true && prop === true) {
		if (toDate === null || frmDate === null || toDate === "" || frmDate === "" || isNaN(toDate) || isNaN(frmDate)) {
			validationError = true;
			reason = oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_ENTER_VALID_DATE_RANGE");
		}
		if (validationError != true) {
			if (toDate < frmDate) {
				validationError = true;
				reason = oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_FROM_DATE_AFTER_TODATE");
			}
		}
	}
	if (validationError != true && prop != true) {
		if (toDate != null && frmDate != null) {

			if (validationError != true && toDate < frmDate) {
				validationError = true;
				reason = oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_FROM_DATE_AFTER_TODATE");
			}

		}
	}

	if (validationError === true) {

		oSubRuleMgr.displayMessage(oSubRuleMgr, "error", reason);

	}
	return validationError;

};
sap.uiext.inbox.SubstitutionRulesManager.prototype.populateMessageBar = function(oSubRuleMgr) {

	var dynamicId = oSubRuleMgr.getId() + '--';
	var msgBarContainer = new sap.ui.commons.Toolbar(dynamicId + "msgBarContainer1", {
		visible : false
	});
	var msbBarTypeImg = new sap.ui.commons.Image({
		id : dynamicId + "msbBarTypeImg1",
		text : "",
		decorative : false
	});
	var msbBarTypeMsg = new sap.ui.commons.TextView({
		id : dynamicId + "msbBarTextView1",
		text : ""
	});
	var msbBarCloseImg = new sap.ui.commons.Image({
		id : dynamicId + "msbBarCloseImg1",
		text : "",
		decorative : false,
		tooltip : this._oBundle.getText("INBOX_MSGBAR_CLOSE_TOOLTIP")
	});
	msbBarCloseImg.addStyleClass("sapUiExtInboxToolbarRight");
	msbBarCloseImg.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.closeImg);
	msbBarCloseImg.attachPress(oSubRuleMgr, this.hideMsgBar);
	msgBarContainer.addItem(msbBarTypeImg);
	msgBarContainer.addItem(msbBarTypeMsg);
	msgBarContainer.addItem(msbBarCloseImg);
	// oSubRuleMgr._getComponent('popupMainMatrixCellMsgBar').addContent(msgBarContainer);
	var cell = oSubRuleMgr._getComponent('popupMainMatrixCellMsgBar');
	cell.addContent(msgBarContainer);
	// oSubRuleMgr._getComponent('popupMainMatrix').rerender();
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.displayMessage = function(oSubRuleMngr, messageType, messageText) {
	var dynamicId = oSubRuleMngr.getId() + '--';
	var msgBarTB = sap.ui.getCore().byId(dynamicId + 'msgBarContainer1');
	if (msgBarTB != undefined) {
		msgBarTB.setVisible(true);

		var msgBarText = sap.ui.getCore().byId(dynamicId + 'msbBarTextView1');
		msgBarText.setProperty("text", messageText);

		var msgBarTypeImg = sap.ui.getCore().byId(dynamicId + 'msbBarTypeImg1');
		msgBarTypeImg.setProperty("src", this._imgResourcePath
				+ sap.uiext.inbox.InboxConstants.messageTypeIcons[messageType]);
		msgBarTypeImg.setTooltip(this._oBundle.getText(sap.uiext.inbox.InboxConstants.messageTypeToolTip[messageType])
				+ " " + messageText);
		/*
		 * msgBarTypeImg.setSrc( this._imgResourcePath + sap.uiext.inbox.InboxConstants.messageTypeIcons[messageType]);
		 * msgBarTypeImg.setTooltip(this._oBundle.getText(sap.uiext.inbox.InboxConstants.messageTypeToolTip[messageType]));
		 */

	}
};

sap.uiext.inbox.SubstitutionRulesManager.prototype.hideMsgBar = function(oEvent, oSubMngr) {
	var dynamicId = oSubMngr.getId() + "--";
	// oSubMngr._getComponent('msgBarContainer1').getProperty("visible",false);
	if (oSubMngr === undefined)
		oSubMngr = this;
	var msgBarTB = sap.ui.getCore().byId(dynamicId + 'msgBarContainer1');
	if (msgBarTB != undefined) {
		msgBarTB.setVisible(false);
		sap.ui.getCore().byId(dynamicId + 'msbBarTextView1').setText("");
		sap.ui.getCore().byId(dynamicId + 'msbBarTypeImg1').setSrc("");
	}

};

sap.uiext.inbox.SubstitutionRulesManager.prototype._refreshBindings = function(itemKey, isActiveRule) {
	var dynamicId = itemKey;
	var collectionPath = (itemKey === (this.getId() + '--iamSubstituting'))
			? this.substitutesRuleCollection
			: this.substitutionRuleCollection; // TODO: Constants

	// Here in JavaScript isActiveRule can be undefined, true or false.
	// It will be undefined in all the case where it is being called with just one parameter(itemKey).

	// For example in case of deleteSubtitutionRule and createSubtitution we do not pass 'isActiveRule' param.
	if (isActiveRule === undefined) {
		this._refreshBindings(itemKey, true);
		this._refreshBindings(itemKey, false);
	}
	// Bind Rows for Active RowRepeater
	else if (isActiveRule) {
		var oFilterActive = [];
		var filter1 = new sap.ui.model.Filter("IsEnabled", sap.ui.model.FilterOperator.EQ, "true");
		oFilterActive.push(filter1);
		var wrapperTemp1 = sap.ui.getCore().byId(dynamicId + 'active' + '--' + 'rowRepMainMatrixWapperMatrix');
		var oSubstRuleRowRepaterActive = sap.ui.getCore().byId(dynamicId + 'active' + '--' + 'subsRowRepeater');
		oSubstRuleRowRepaterActive.bindRows("/" + collectionPath, wrapperTemp1, null, oFilterActive);
		oSubstRuleRowRepaterActive.rerender();
	} else {// Bind Rows for InActive RowRepater
		var oFilterInActive = [];
		var filter2 = new sap.ui.model.Filter("IsEnabled", sap.ui.model.FilterOperator.EQ, "false");
		oFilterInActive.push(filter2);
		var wrapperTemp2 = sap.ui.getCore().byId(dynamicId + 'inactive' + '--' + 'rowRepMainMatrixWapperMatrix');
		var oSubstRuleRowRepaterInActive = sap.ui.getCore().byId(dynamicId + 'inactive' + '--' + 'subsRowRepeater');
		oSubstRuleRowRepaterInActive.bindRows("/" + collectionPath, wrapperTemp2, null, oFilterInActive);
		oSubstRuleRowRepaterInActive.rerender();
	}

};

sap.uiext.inbox.SubstitutionRulesManager.prototype.getSubstitutionRulesManagerUtils = function() {
	return this.substitutionRulesManagerUtils;
}

sap.uiext.inbox.SubstitutionRulesManager.prototype._searchUsers = function(oSearchInput) {
	var that = this;
	var oFunctionImport = this.oTCMModel.getFunctionImportHandler();
	oFunctionImport.setServiceURL(this.sUrl);
	oFunctionImport.setHeaders({
		Accept : this.inboxConstants.acceptHeaderforJSON,
		"x-csrf-token" : this.getModel().oHeaders["x-csrf-token"]
	});

	var sSearchTerm = oSearchInput.sSearchTerm;
	var iMaxResults = oSearchInput.iMaxResults;
	var sSAPOrigin = oSearchInput.sSAPOrigin;
	var oResultData;

	oFunctionImport.callSearchUsers({
		SearchPattern : sSearchTerm,
		MaxResults : iMaxResults,
		SAP__Origin : sSAPOrigin
	}, function(oData, response) {
		oResultData = oData;
	}, function(error) {
		that.showMessage("error", that._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
	});

	return oResultData;
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._handleSearchUsersClickforCreateSubstitution = function(oEvent){
	//TODO: Harcoded SAP Origin as TCM is not aligned for Substitution yet.
	var sSAPOrigin = "SAPOrigin";
	
	var iMaxResults = this.oConfiguration ? this.oConfiguration.getSearchUersMaxLimit() : 100;
	
	return this._searchUsers({sSearchTerm: this._getComponent('oSearch').getValue(),
							iMaxResults:iMaxResults,
								sSAPOrigin: sSAPOrigin});
	
	
};

sap.uiext.inbox.SubstitutionRulesManager.prototype._callCreateSubstitutionRuleFunctionImport= function(oSubRuleMgr,oRequestOptions,oEntry){
	var oModel = this.getModel();
	if(oModel instanceof sap.ui.model.odata.ODataModel){
    	var oServiceMetadata = oModel.getServiceMetadata();
    	if(oModel.sServiceUrl && oServiceMetadata){
    		this.oTcmMetadata.setServiceMetadata(oServiceMetadata);
    	}
    	
    }
	if(!this.oTcmMetadata.isCreatesubstitutionRuleSupported()){
	 OData.request(oRequestOptions, function(data, request) {
	    	oSubRuleMgr.showMessage("info", oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATED_SUCCESSFULLY"));
			oSubRuleMgr._refreshBindings(oSubRuleMgr.getId()+"--mySubstitutes");
			oModel.oHeaders["DataServiceVersion"] = "2.0"
	    }, function(error){
	    	if(error.response === undefined || error.response.statusCode != 205){
				oSubRuleMgr.showMessage("error", oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATION_FAILURE_CONTACT_ADMIN"));
			}else if(error.response.statusCode == 205){
				var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
				oModel.fireRequestFailed(eventParams);
			}
	    	
	    });
	}
	else{
		oModel.create(oSubRuleMgr.sPath,oEntry,null,
				function(oData, response){
					oSubRuleMgr.showMessage("info", oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATED_SUCCESSFULLY"));
					oSubRuleMgr._refreshBindings(oSubRuleMgr.getId()+"--mySubstitutes");
					oModel.oHeaders["DataServiceVersion"] = "2.0"
				},
				function(error){
					if(error.response === undefined || error.response.statusCode != 205){
						oSubRuleMgr.showMessage("error", oSubRuleMgr._oBundle.getText("SUBSTITUTION_VALIDATION_MESSAGE_SUBSTITUTION_RULE_CREATION_FAILURE_CONTACT_ADMIN"));
					}else if(error.response.statusCode == 205){
						var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
						oModel.fireRequestFailed(eventParams);
					}
				});
	}
	
	
};

}; // end of sap/uiext/inbox/SubstitutionRulesManager.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxComment') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxComment.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxComment");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxComment.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSender sender} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getThumbnailSrc thumbnailSrc} : sap.ui.core.URI</li>
 * <li>{@link #getText text} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * fsgg
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.4
 *
 * @constructor   
 * @public
 * @name sap.uiext.inbox.composite.InboxComment
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxComment", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.uiext.inbox",
	properties : {
		"sender" : {type : "string", group : "Data", defaultValue : null},
		"timestamp" : {type : "string", group : "Data", defaultValue : null},
		"thumbnailSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"text" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxComment with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxComment.extend
 * @function
 */


/**
 * Getter for property <code>sender</code>.
 * Sender of the comment chunk
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sender</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getSender
 * @function
 */

/**
 * Setter for property <code>sender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSender  new value for property <code>sender</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setSender
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC time zone
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTimestamp  new value for property <code>timestamp</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setTimestamp
 * @function
 */


/**
 * Getter for property <code>thumbnailSrc</code>.
 * URL to the thumbnail image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>thumbnailSrc</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getThumbnailSrc
 * @function
 */

/**
 * Setter for property <code>thumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sThumbnailSrc  new value for property <code>thumbnailSrc</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setThumbnailSrc
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The FeedChunk text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.uiext.inbox.composite.InboxComment} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxComment#setText
 * @function
 */


// Start of sap/uiext/inbox/composite/InboxComment.js
/**
 * This file defines behavior for the control,
 */
sap.uiext.inbox.composite.InboxComment.prototype.init = function(){
    this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
};

}; // end of sap/uiext/inbox/composite/InboxComment.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.composite.InboxTaskComments') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.composite.InboxTaskComments.
jQuery.sap.declare("sap.uiext.inbox.composite.InboxTaskComments");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new composite/InboxTaskComments.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFeederSender feederSender} : string</li>
 * <li>{@link #getFeederThumbnailSrc feederThumbnailSrc} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getComments comments} : sap.uiext.inbox.composite.InboxComment[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.composite.InboxTaskComments#event:commentSubmit commentSubmit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * InboxTaskComments
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.4
 *
 * @constructor   
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments
 */
sap.ui.core.Control.extend("sap.uiext.inbox.composite.InboxTaskComments", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.uiext.inbox",
	properties : {
		"feederSender" : {type : "string", group : "Data", defaultValue : null},
		"feederThumbnailSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null}
	},
	aggregations : {
    	"comments" : {type : "sap.uiext.inbox.composite.InboxComment", multiple : true, singularName : "comment"}
	},
	events : {
		"commentSubmit" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.composite.InboxTaskComments with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.composite.InboxTaskComments.extend
 * @function
 */

sap.uiext.inbox.composite.InboxTaskComments.M_EVENTS = {'commentSubmit':'commentSubmit'};


/**
 * Getter for property <code>feederSender</code>.
 * Sender for the comment feeder
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feederSender</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#getFeederSender
 * @function
 */

/**
 * Setter for property <code>feederSender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeederSender  new value for property <code>feederSender</code>
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#setFeederSender
 * @function
 */


/**
 * Getter for property <code>feederThumbnailSrc</code>.
 * URL to the thumbnail image for the comment feeder.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>feederThumbnailSrc</code>
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#getFeederThumbnailSrc
 * @function
 */

/**
 * Setter for property <code>feederThumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sFeederThumbnailSrc  new value for property <code>feederThumbnailSrc</code>
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#setFeederThumbnailSrc
 * @function
 */


/**
 * Getter for aggregation <code>comments</code>.<br/>
 * URL to the thumbnail image.
 * 
 * @return {sap.uiext.inbox.composite.InboxComment[]}
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#getComments
 * @function
 */


/**
 * Inserts a comment into the aggregation named <code>comments</code>.
 *
 * @param {sap.uiext.inbox.composite.InboxComment}
 *          oComment the comment to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the comment should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the comment is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the comment is inserted at 
 *             the last position        
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#insertComment
 * @function
 */

/**
 * Adds some comment <code>oComment</code> 
 * to the aggregation named <code>comments</code>.
 *
 * @param {sap.uiext.inbox.composite.InboxComment}
 *            oComment the comment to add; if empty, nothing is inserted
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#addComment
 * @function
 */

/**
 * Removes an comment from the aggregation named <code>comments</code>.
 *
 * @param {int | string | sap.uiext.inbox.composite.InboxComment} vComment the comment to remove or its index or id
 * @return {sap.uiext.inbox.composite.InboxComment} the removed comment or null
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#removeComment
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>comments</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.uiext.inbox.composite.InboxComment[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#removeAllComments
 * @function
 */

/**
 * Checks for the provided <code>sap.uiext.inbox.composite.InboxComment</code> in the aggregation named <code>comments</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.uiext.inbox.composite.InboxComment}
 *            oComment the comment whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#indexOfComment
 * @function
 */
	

/**
 * Destroys all the comments in the aggregation 
 * named <code>comments</code>.
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#destroyComments
 * @function
 */


/**
 * Event is raised when submit on the feeder is pressed. 
 *
 * @name sap.uiext.inbox.composite.InboxTaskComments#commentSubmit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'commentSubmit' event of this <code>sap.uiext.inbox.composite.InboxTaskComments</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.composite.InboxTaskComments</code>.<br/> itself. 
 *  
 * Event is raised when submit on the feeder is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.composite.InboxTaskComments</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#attachCommentSubmit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'commentSubmit' event of this <code>sap.uiext.inbox.composite.InboxTaskComments</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.composite.InboxTaskComments#detachCommentSubmit
 * @function
 */

/**
 * Fire event commentSubmit to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.composite.InboxTaskComments} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.composite.InboxTaskComments#fireCommentSubmit
 * @function
 */


// Start of sap/uiext/inbox/composite/InboxTaskComments.js
/*!
 * @copyright@
 */
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.Feeder'); // unlisted dependency retained


/**
 * This file defines behavior for the control,
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.init = function(){
	this.maxComments = 2; // max. number of comments displayed initially
	this.allComments = false; // initially render only maxComments
	this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	this.initCommentFeeder();
};

sap.uiext.inbox.composite.InboxTaskComments.prototype.initCommentFeeder = function(){
	// create comment feeder if needed
	if (!this.oCommentFeeder) {
		this.oCommentFeeder = new sap.ui.ux3.Feeder( this.getId()+'-InboxTaskCommentFeeder', {
			type: sap.ui.ux3.FeederType.Comment, thumbnailSrc: this.getFeederThumbnailSrc()
		}).setParent(this);
		this.oCommentFeeder.attachEvent('submit', this.handleCommentFeederSubmit, this); // attach event this way to have the right this-reference in handler
		this.showCommentFeeder = true;
	}
};

sap.uiext.inbox.composite.InboxTaskComments.prototype.exit = function(){
	if (this.oCommentFeeder) {
		this.oCommentFeeder.destroy();
		delete this.oCommentFeeder;
	}
	this.rb = undefined;
	this.showCommentFeeder = undefined;
	this.oText = undefined;
};

/**
 * handler for click event
 *
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.onclick = function(oEvent){
	var sTargetId = oEvent.target.getAttribute( 'ID' );

	if(sTargetId){
		switch ( sTargetId ){
		case ( this.getId() + '-all' ):
			// Click on sender
			this.showAllComments();
		break;
		}
	}
	oEvent.stopPropagation(); //to prevent comment chunks to propagate event to parentChunk
};

/**
 * After rendering, bind the keyupHandler to the input field of feeder
 * 
 *
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.onAfterRendering = function () {
	
	jQuery.sap.byId(this.getId()+'-InboxTaskCommentFeeder'+"-input").bind("keyup",this, this.keyupHandler);
	
};


/**
 * handler for keyup
 *
 * Restrict the number of characters to 500 in a comment
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.keyupHandler = function(oEvent){
	var that = oEvent.data;
	var sInputId = that.getId()+'-InboxTaskCommentFeeder'+"-input";
	var sInputText = jQuery.sap.byId(sInputId).text();
	var MAX_CHARACTER_LENGTH_FOR_COMMENTS=500;
	
	if(sInputText.length > MAX_CHARACTER_LENGTH_FOR_COMMENTS)
	{		
		jQuery.sap.byId(sInputId).text(sInputText.slice(0,MAX_CHARACTER_LENGTH_FOR_COMMENTS));		
		that.placeCaretAtEnd(document.getElementById(sInputId));
	}
		
}



	
sap.uiext.inbox.composite.InboxTaskComments.prototype.placeCaretAtEnd = function(commentTextElement) {   //Place cursor at end after the entered text is sliced 
	
	commentTextElement.focus();
	if (typeof window.getSelection != "undefined"
	&& typeof document.createRange != "undefined") 
	{
	var range = document.createRange();
	range.selectNodeContents(commentTextElement);
	range.collapse(false);
	var sel = window.getSelection();
	sel.removeAllRanges();
	sel.addRange(range);
	} 
	
	else if (typeof document.body.createTextRange != "undefined")
	{
	var textRange = document.body.createTextRange();
	textRange.moveToElementText(commentTextElement);
	textRange.collapse(false);
	textRange.select();
	} 
	
}


/**
 * show all comments
 * rerender comment section
 *
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.showAllComments = function(){

	this.allComments = !this.allComments;

	var $commentSection = jQuery.sap.byId(this.getId() + " > section"); // use sap function instead of jQuery child selector because of escaping ID
	if ($commentSection.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this.getRenderer().renderComments(rm, this);
		rm.flush($commentSection[0]);
		rm.destroy();
	}

};

/**
 * Handler for Comment feeder submit event
 *
 * @private
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.handleCommentFeederSubmit = function(oEvent){
	var sSanitizedText = this._sanitizeText(oEvent.getParameter('text'));
	//this behavior is different from the actual Feedchunk, because we need to add the comment first before displaying the comment.
	this.fireCommentSubmit({text: sSanitizedText});
};

/*
 * Overwrite standard getter for feeder thumbnail source:
 * If not set and feedChunk is child of a Feed or FeedChunk use the thumbnailsource of the parent
 * So it must not be set manual for each sub-control and is always synchron
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.setFeederThumbnailSrc = function(value) {
	this.setProperty("feederThumbnailSrc", value);

	if (this.oCommentFeeder) {
		this.oCommentFeeder.setThumbnailSrc(value);
	}
};


/*
 * Overwrite generated function
 */
sap.uiext.inbox.composite.InboxTaskComments.prototype.insertComment = function(oComment, iIndex) {

	this.insertAggregation("comments", oComment, iIndex);
	this.initCommentFeeder();
	return this;

};

sap.uiext.inbox.composite.InboxTaskComments.prototype.addComment = function(oComment) {

	this.addAggregation("comments", oComment);
	this.initCommentFeeder();
	return this;

};

sap.uiext.inbox.composite.InboxTaskComments.prototype._sanitizeText = function(sText) {
	//sText = jQuery.trim(sText);
	return jQuery.sap._sanitizeHTML(sText);
};
}; // end of sap/uiext/inbox/composite/InboxTaskComments.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.tcm.fI.TCMFunctionImport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
// Utility functions for TCMFunctionImport calls
jQuery.sap.declare("sap.uiext.inbox.tcm.fI.TCMFunctionImport");



/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
sap.ui.base.Object.extend("sap.uiext.inbox.tcm.fI.TCMFunctionImport",{ 
	
    constructor : function() {
      
       sap.ui.base.Object.apply(this);
       this.sTcmServiceURL= undefined;
       this.oHeaders = {};
       this.ofIMetadata =  sap.uiext.inbox.tcm.fI.TCMFunctionImportMetaData;
    }

});

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.setHeaders = function(mHeaders) {
	this.oHeaders = mHeaders;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.getHeaders = function() {
    return this.oHeaders;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.setServiceURL = function(sServiceURL) {
	this.sTcmServiceURL = sServiceURL;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.getServiceURL = function() {
    return this.sTcmServiceURL;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype.callSearchUsers = function(params, fnSuccess, fnError){
	var oSearchUsersFIMetadata = this.ofIMetadata.SEARCHUSERS;
	var aUrlParams = this._createURLParamsArray(params, oSearchUsersFIMetadata);
	var request = this._createRequest(oSearchUsersFIMetadata.name, aUrlParams, false, oSearchUsersFIMetadata.httpMethod);
	return OData.request(request, fnSuccess, fnError);
};


sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype._createURLParamsArray = function(params, oFIMetadata){
	var that = this;
	var oFIParamsMetaData = oFIMetadata.params, aURLParams = [], sUrlParam;
	var sFIParamName, sFIParamType, vParamValue;
	jQuery.each(oFIParamsMetaData,function(index,oFIParamMetaData){
		sFIParamName = oFIParamMetaData.name;
		sFIParamType = oFIParamMetaData.type;
		vParamValue = params[sFIParamName];
		if(vParamValue){
			sUrlParam = sFIParamName + "=" + that._formatParamValue(vParamValue,sFIParamType);
			aURLParams.push(sUrlParam);
		}else{
			if(oFIParamMetaData.nullable){
				jQuery.sap.log.warning('No parameter Value provided for a non nullable input paramater for function Import:' + oFIMetadata.name);
			}
		}
	});
	return aURLParams;
};

sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype._createRequest = function(sPath, aUrlParams, bAsync, httpMethod) {

    // create the url for the service
    var sUrl = this.sTcmServiceURL;
    if (sPath) {
        if (!jQuery.sap.startsWith(sPath, "/")) {
            sUrl += "/";
        }
        sUrl += sPath;
    }
    
    if (aUrlParams && aUrlParams.length > 0) {
        sUrl += "?" + aUrlParams.join("&");
    }

    // create a request object for the url, url params and async option
    return {
        requestUri: sUrl,
        headers: this.oHeaders,
        method: httpMethod,
        async: bAsync,
        user: this.sUser,
        password: this.sPassword
    };

};

/**
 * Format a JavaScript value according to the given EDM type
 * http://www.odata.org/documentation/overview#AbstractTypeSystem
 * 
 * @param {any} vValue the value to format
 * @param {string} sType the EDM type (e.g. Edm.Decimal)
 * @return {string} the formatted value
 */
sap.uiext.inbox.tcm.fI.TCMFunctionImport.prototype._formatParamValue = function(vParamValue,sFIParamType) {
	// Lazy creation of format objects
	if (!this.oDateTimeFormat) {
		this.oDateTimeFormat = sap.ui.core.format.DateFormat.getDateInstance({
			pattern: "'datetime'''yyyy-MM-dd'T'HH:mm:ss''"
		});
		this.oDateTimeOffsetFormat = sap.ui.core.format.DateFormat.getDateInstance({
			pattern: "'datetimeoffset'''yyyy-MM-dd'T'HH:mm:ss'Z'''"
		});
		this.oTimeFormat = sap.ui.core.format.DateFormat.getTimeInstance({
			pattern: "'time'''HH:mm:ss''"
		});
	}

	// Format according to the given type
	var sFormattedParamValue;
	switch(sFIParamType) {
		case "Edm.String":
			// quote
			sFormattedParamValue = "'" + String(vParamValue).replace(/'/g, "''") + "'";
			break;
		case "Edm.Time":
			sFormattedParamValue = "time'" + vParamValue + "'";
			break;			
		case "Edm.DateTime":
			sFormattedParamValue = this.oDateTimeFormat.format(new Date(vParamValue), true);
			break;
		case "Edm.DateTimeOffset":
			sFormattedParamValue = this.oDateTimeOffsetFormat.format(new Date(vParamValue), true);
			break;
		case "Edm.Guid":
			sFormattedParamValue = "guid'" + vParamValue + "'";
			break;
		case "Edm.Decimal":
			sFormattedParamValue = vParamValue + "M";
			break;
		case "Edm.Int64":
			sFormattedParamValue = vParamValue + "L";
			break;
		case "Edm.Single":
			sFormattedParamValue = vParamValue + "f";
			break;				
		case "Edm.Binary":
			sFormattedParamValue = "binary'" + vParamValue + "'";
			break;
		default: 
			sFormattedParamValue = new String(vParamValue);
			break;
	}
	return sFormattedParamValue;
};
}; // end of sap/uiext/inbox/tcm/fI/TCMFunctionImport.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.InboxFilters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
// Provides a filter for list bindings
	jQuery.sap.declare("sap.uiext.inbox.InboxFilters");
	
	
	
		
	/**
	 * Constructor for InboxFilters
	 *
	 * @class
	 * PreDefined Filters for Inbox
	 * 
	 *  @public
	 *  @name sap.uiext.inbox.InboxFilters
	 */
	
	sap.ui.base.Object.extend("sap.uiext.inbox.InboxFilters",{
			
			    constructor : function() {
			
			        sap.ui.base.Object.apply(this);
			
			        this.oPrimaryFilter = undefined;
			        this.oSecondaryFilter = undefined;
			        this.inboxUtils = sap.uiext.inbox.InboxUtils;
			    }
			
		});
	
	/**
	 * 
	 * Setter for the Primary filters to be applied
	 * 
	 * @name sap.uiext.inbox.InboxFilters.prototype.setPrimaryFilter
	 * @function
	 * @param {sap.uiext.inbox.InboxPrimaryFilters} 
	 *         oPrimaryFilter
	 *         
	 * @public
	 * 
	 */
	sap.uiext.inbox.InboxFilters.prototype.setPrimaryFilter = function(oPrimaryFilter){
		//TODO: add type checking..
		if(oPrimaryFilter instanceof  sap.uiext.inbox.InboxPrimaryFilters){
			this.oPrimaryFilter = oPrimaryFilter;
		}
	};
	
	/**
	 * 
	 * Setter for Secondary filters to be applied
	 * 
	 *  @name sap.uiext.inbox.InboxFilters.prototype.setSecondaryFilter
	 * 	@function
	 * 	@param {sap.uiext.inbox.InboxSecondaryFilters} 
	 *         oSecondaryFilter
	 *         
	 *  @public
	 */
	sap.uiext.inbox.InboxFilters.prototype.setSecondaryFilter = function(oSecondaryFilter){
		if(oSecondaryFilter instanceof  sap.uiext.inbox.InboxSecondaryFilters || oSecondaryFilter instanceof  sap.uiext.inbox.TaskInitialFilters){
			this.oSecondaryFilter = oSecondaryFilter;
		}
	};
	
	/**
	 * 
	 * Getter for Primary filters
	 * 
	 *  @name sap.uiext.inbox.InboxFilters.prototype.getPrimaryFilterr
	 * 	@function
	 * 	  
	 *  @type sap.uiext.inbox.InboxPrimaryFilters
	 *  @public
	 */
	sap.uiext.inbox.InboxFilters.prototype.getPrimaryFilter = function(oPrimaryFilter){
		return this.oPrimaryFilter;
	};
	
	/**
	 * 
	 * Getter for Secondary filters
	 * 
	 *  @name sap.uiext.inbox.InboxFilters.prototype.getSecondaryFilter
	 * 	@function
	 * 	
	 *  @type sap.uiext.inbox.InboxSecondaryFilters       
	 *  @public
	 */
	sap.uiext.inbox.InboxFilters.prototype.getSecondaryFilter = function(oSecondaryFilter){
		return this.oSecondaryFilter;
	};
}; // end of sap/uiext/inbox/InboxFilters.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.tcm.TCMModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.uiext.inbox.tcm.TCMModel");



//TODO: Enhance this , so that the oDataModel can be set from outside.
//We can then use the ODataModel.create method, so that we do not need to bother about CSRF token.

sap.ui.base.Object.extend("sap.uiext.inbox.tcm.TCMModel",{ 
	
    constructor : function() {
      
       sap.ui.base.Object.apply(this);
       this.oFunctionImport = undefined;
    }

});

sap.uiext.inbox.tcm.TCMModel.prototype.getFunctionImportHandler = function() {
	//TODO: make it singleton
	if(!this.oFunctionImport){
		this.oFunctionImport = new sap.uiext.inbox.tcm.fI.TCMFunctionImport();
	}
	return this.oFunctionImport;
};
}; // end of sap/uiext/inbox/tcm/TCMModel.js
if ( !jQuery.sap.isDeclared('sap.uiext.inbox.Inbox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uiext.inbox.Inbox.
jQuery.sap.declare("sap.uiext.inbox.Inbox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Inbox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTaskExecutionURLThemeValue taskExecutionURLThemeValue} : string</li>
 * <li>{@link #getHandleBindings handleBindings} : boolean (default: true)</li>
 * <li>{@link #getOpenCompletedTasks openCompletedTasks} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uiext.inbox.Inbox#event:oDataRequestCompleted oDataRequestCompleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.Inbox#event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.uiext.inbox.Inbox#event:taskAction taskAction} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A comprehensive UI design approach with graphical and functional elements for search tasks, filter tasks, and take actions on the tasks
 * ("Inbox Pattern").
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.16.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.5.2. 
 * API is not yet finished and might change completely
 * @name sap.uiext.inbox.Inbox
 */
sap.ui.core.Control.extend("sap.uiext.inbox.Inbox", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"clearDrillDownFilter", "clearRowSettings", "bindTaskTable", "getTaskTableBinding", "bindTaskExecutionURL", "bindTaskTypeDynamicFilter", "bindSearch", "setSubstitutionEnabled", "getSubstitutionEnabled", "bindTasks", "setConfiguration"
	],

	// ---- control specific ----
	library : "sap.uiext.inbox",
	properties : {
		"taskExecutionURLThemeValue" : {type : "string", group : "Misc", defaultValue : null},
		"handleBindings" : {type : "boolean", group : "Misc", defaultValue : true},
		"openCompletedTasks" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"oDataRequestCompleted" : {}, 
		"refresh" : {}, 
		"taskAction" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uiext.inbox.Inbox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uiext.inbox.Inbox.extend
 * @function
 */

sap.uiext.inbox.Inbox.M_EVENTS = {'oDataRequestCompleted':'oDataRequestCompleted','refresh':'refresh','taskAction':'taskAction'};


/**
 * Getter for property <code>taskExecutionURLThemeValue</code>.
 * set the theme URL parameter string to be appended to the task Execution URL. In case of a function callback set for Task Execution PopUp, this string will not be appended.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>taskExecutionURLThemeValue</code>
 * @public
 * @name sap.uiext.inbox.Inbox#getTaskExecutionURLThemeValue
 * @function
 */

/**
 * Setter for property <code>taskExecutionURLThemeValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTaskExecutionURLThemeValue  new value for property <code>taskExecutionURLThemeValue</code>
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#setTaskExecutionURLThemeValue
 * @function
 */


/**
 * Getter for property <code>handleBindings</code>.
 * set this as true for oData Model. If set as false, the user will need to handle task Actions, search and Task Execution URL population. See function call back methods.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>handleBindings</code>
 * @public
 * @name sap.uiext.inbox.Inbox#getHandleBindings
 * @function
 */

/**
 * Setter for property <code>handleBindings</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHandleBindings  new value for property <code>handleBindings</code>
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#setHandleBindings
 * @function
 */


/**
 * Getter for property <code>openCompletedTasks</code>.
 * set this to true to enable opening of completed tasks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>openCompletedTasks</code>
 * @public
 * @name sap.uiext.inbox.Inbox#getOpenCompletedTasks
 * @function
 */

/**
 * Setter for property <code>openCompletedTasks</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bOpenCompletedTasks  new value for property <code>openCompletedTasks</code>
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#setOpenCompletedTasks
 * @function
 */


/**
 * If handleBindings property is set to true , the control assumes an oData model is set and handles the complete logic within. In this case once the oData request is complete, this event is fired with additional parameters. 
 *
 * @name sap.uiext.inbox.Inbox#oDataRequestCompleted
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'oDataRequestCompleted' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself. 
 *  
 * If handleBindings property is set to true , the control assumes an oData model is set and handles the complete logic within. In this case once the oData request is complete, this event is fired with additional parameters. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#attachODataRequestCompleted
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'oDataRequestCompleted' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#detachODataRequestCompleted
 * @function
 */

/**
 * Fire event oDataRequestCompleted to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.Inbox#fireODataRequestCompleted
 * @function
 */


/**
 * this event is fires to handle refresh Action, when the handleBindings property is set to false. 
 *
 * @name sap.uiext.inbox.Inbox#refresh
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself. 
 *  
 * this event is fires to handle refresh Action, when the handleBindings property is set to false. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#attachRefresh
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#detachRefresh
 * @function
 */

/**
 * Fire event refresh to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.Inbox#fireRefresh
 * @function
 */


/**
 * this event is fires to handle task Actions - Claim, Release, when the handleBindings property is set to false. 
 *
 * @name sap.uiext.inbox.Inbox#taskAction
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'taskAction' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself. 
 *  
 * this event is fires to handle task Actions - Claim, Release, when the handleBindings property is set to false. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.uiext.inbox.Inbox</code>.<br/> itself.
 *
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#attachTaskAction
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'taskAction' event of this <code>sap.uiext.inbox.Inbox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @public
 * @name sap.uiext.inbox.Inbox#detachTaskAction
 * @function
 */

/**
 * Fire event taskAction to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uiext.inbox.Inbox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uiext.inbox.Inbox#fireTaskAction
 * @function
 */


/**
 * Clears all the filters applied in Drill Down. (Status, Priority, Date/Time and TaskType).
 *
 * @name sap.uiext.inbox.Inbox.prototype.clearDrillDownFilter
 * @function

 * @type void
 * @public
 */


/**
 * Row Settings applied using the Settings button shall be cleared. <TO be Implemented>
 *
 * @name sap.uiext.inbox.Inbox.prototype.clearRowSettings
 * @function

 * @type void
 * @public
 */


/**
 * Binds the Task Table Rows to the given path.
 *
 * @name sap.uiext.inbox.Inbox.prototype.bindTaskTable
 * @function
 * @param {string} 
 *         sPath
 *         Binding path for the rows of the Task Table
 * @param {object} 
 *         oTaskFilters
 *         Predefined filter for the Task Table (sap.uiext.inbox.TaskInitialFilters)

 * @type sap.uiext.inbox.Inbox
 * @public
 */


/**
 * returns the binding for the Task Table
 *
 * @name sap.uiext.inbox.Inbox.prototype.getTaskTableBinding
 * @function

 * @type object
 * @public
 */


/**
 * Registers a callback function to be invoked to populate the Task Execution PopUp.
 *
 * @name sap.uiext.inbox.Inbox.prototype.bindTaskExecutionURL
 * @function
 * @param {object} 
 *         oId
 *         callback function for getting the execution URL, will be supplied with the task ID and should return the URL to be displayed with the Task Execution PopUp.
 * @param {object} 
 *         oStatus
 *         callback function for getting the status of the task, will be supplied with the task ID and should return the Task Status.

 * @type sap.uiext.inbox.Inbox
 * @public
 */


/**
 * Registers a callback function to be invoked to populate the TaskType Drill Down.
 * This should return the array of Values to be populated in the Task Type Drill Down.
 *
 * @name sap.uiext.inbox.Inbox.prototype.bindTaskTypeDynamicFilter
 * @function

 * @type sap.uiext.inbox.Inbox
 * @public
 */


/**
 * Registers a callback function to be invoked to search on the Task Table.
 *
 * @name sap.uiext.inbox.Inbox.prototype.bindSearch
 * @function

 * @type sap.uiext.inbox.Inbox
 * @public
 */


/**
 * Setter for property isSubstitutionEnabled.
 * 
 * Boolean property to enable the sap.uiext.inbox.SubstitutionRulesManager control (default is false). If set to true, 'Manage Substitution Rules' is visible in settings button, else if set to false the option will not be visible under settings.
 * 
 * Default value is false
 *
 * @name sap.uiext.inbox.Inbox.prototype.setSubstitutionEnabled
 * @function
 * @param {boolean} 
 *         bIsSubstitutionEnabled
 *         isSubstitutionEnabled
 * @param {string} 
 *         sPath
 *         the path

 * @type void
 * @public
 */


/**
 * Getter for property isSubstitutionEnabled.
 * 
 * Boolean property to enable the sap.uiext.inbox.SubstitutionRulesManager control (default is false). If is true, 'Manage Substitution Rules' is visible in settings button, else if it is false the option will not be visible under settings.
 * 
 * Default value is false
 *
 * @name sap.uiext.inbox.Inbox.prototype.getSubstitutionEnabled
 * @function

 * @type boolean
 * @public
 */


/**
 * Bind the Inbox Task Collection
 *
 * @name sap.uiext.inbox.Inbox.prototype.bindTasks
 * @function
 * @param {string} 
 *         sPath
 *         Binding path for the element displaying the tasks within the Inbox. This path is the Task Collection according to the TCM (Task Consumption Model)
 * @param {object} 
 *         oOFilter
 *         Predefined filter that is applied to the Task Collection before displaying the tasks in the Inbox. (sap.uiext.inbox.InboxFilters)
 * @param {object} 
 *         oOSorter
 *         {sap.ui.model.Sorter}Predefined sorter that is applied to the Task Collection before displaying the tasks in the Inbox. By default the tasks are sorted on 'CreatedOn' , descending, according to TCM.
 * 
 * The sorter is not validated for the path being a valid TCM Entity Property. The sorter passed will be applied to the oData service as is. In case the entity Property in the path is a sortable property on the UI, the sorter indicator for that property will be visible.

 * @type sap.uiext.inbox.Inbox
 * @public
 */


/**
 * Set configuration on Inbox. See APIs in InboxConfiguration
 *
 * @name sap.uiext.inbox.Inbox.prototype.setConfiguration
 * @function
 * @param {object} 
 *         oOConfiguration
 *         Configuration object to set the configuration on Inbox. See APIs in InboxConfiguration

 * @type sap.uiext.inbox.Inbox
 * @public
 */


// Start of sap/uiext/inbox/Inbox.js
/*!
 * @copyright@
 */








jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.FacetFilter'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.FacetFilterList'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.MatrixLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Image'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.ToggleButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.DropdownBox'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.SearchField'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Toolbar'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.TextView'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.ToolbarSeparator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained

jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.TextField'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.OverlayContainer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.BorderLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.HorizontalLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.VerticalLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.RadioButtonGroup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Dialog'); // unlisted dependency retained

jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained

jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained



/*global OData */// declare unusual global vars for JSLint/SAPUI5 validation
// /**
// * This file defines behavior for the control,
// */
sap.uiext.inbox.Inbox.prototype.init = function() {
	//initialize inboxUtils, inboxConstants, resource bundle and other bootstrapping
	this.oTcmMetadata= new sap.uiext.inbox.TCMMetadata();
	this.oTCMModel = new sap.uiext.inbox.tcm.TCMModel();
	this.inboxUtils = sap.uiext.inbox.InboxUtils;
	this.constants = sap.uiext.inbox.InboxConstants;
	this._oBundle = sap.ui.getCore().getLibraryResourceBundle("sap.uiext.inbox");
	var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
	this._imgResourcePath = sap.ui.resource('sap.uiext.inbox', 'themes/' + sCurrentTheme + '/img/');
	
	//check for URL Parameter for the defaultView rendering.
	var oUriParams = jQuery.sap.getUriParameters();
	var defaultView_URLParam = this.constants.defaultView_URLParameter;
	var sURLViewValue = oUriParams.get(defaultView_URLParam);
    if(sURLViewValue === null){
    	var cookieValue = this.inboxUtils.getCookieValue(defaultView_URLParam);
        this.defaultView  =  cookieValue !== undefined ? cookieValue : this.constants.tableView;
    }else{
    	this.defaultView = jQuery.inArray(sURLViewValue, this.constants.inboxViews) === -1 ? this.constants.tableView : sURLViewValue;
    	this.inboxUtils.setCookieValue (defaultView_URLParam,this.defaultView,1);
    }
    
    //TODO: this does not seem to be required anymore, as the status and priority mappings on GW side are in place. Remove and Test.
    this.sProviderHost = "";
    
    this.bRefreshTaskTypes = true;
    this.selectedContexts = [];
    
    //Model binding related stuff
    this.sTypeOfModel = "";
    this.bpmSvcUrl = "";
    
    //enable/Disable some features in Inbox
    this.isSubstitutionEnabled = false;
    this.isSubstitutionRuleCreationSupported=false;
    this.isCustomAttributesEnabled = false;
    this.isCustomActionsEnabled = false;
    this.showTaskDescription = false;
    this.showTaskCategory = true;//TODO: Make it false and later handle in Inbox
    this.isBatchOperationSupported = true;
    this.isForwardActionEnabled = false;
    this.isCommentsEnabled = false;
    this.openTaskExecutionUIOpenInNewTab = false;// If false open Task Execution UI in overlay container else if its true opens in new browser tab.
    
    //this.initialLoad = true;
    this._substitutionPath = "";
    // default value
    this.sCollectionPath = "TaskCollection";
    this.filtersToApply = {};
    
    this.resetMessages = true;
    //this.attachTaskAction(this, this.defaultActionHandler);
    this.httpMethodForAction = 'POST';
    this.currentView = this.defaultView;
    this.bRefreshStartFlag = false;
    //default callbacks
    this.getDefaultTaskExecutionURLCallBack = function(id,sapOriginId) {
        // var IDURIPart = "getTaskExecutionUrl"+"?ID='"+ id +"'&$format=json";
        var IDURIPart = this.sCollectionPath + "(InstanceID='" + id + "',SAP__Origin='" + sapOriginId + "')/UIExecutionLink?$format=json";
        var requestURI = this.bpmSvcUrl + IDURIPart;
        var url = "";
        var oModel = this.getCoreModel();
        var that = this;
        /****************/
        var requestOptions = {
            async:false,
            requestUri : requestURI,
            method : "GET",
            headers : {
                Accept : "application/json",
                "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
            }
        };
        OData.request(requestOptions, function(data, request) {
            // TO-DO : make this generic
            url = data.GUI_Link;
        }, function(error) {
            if(error.response.statusCode == 205){
                var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
                oModel.fireRequestFailed(eventParams);
            }else{
            //TODO: use enums for messageType.
                that.showMessage("error", that._oBundle.getText("INBOX_MSG_ERR_EXUI") + id);
            }
        });
        return url;
    };

    this.getTaskExecURLStatusCallBack = function(id,sapOriginId) {
        var status = "";
        var requrl = this.bpmSvcUrl + this.sCollectionPath + "(InstanceID='" + id + "',SAP__Origin='" + sapOriginId + "')?$format=json";
        var oModel = this.getCoreModel();
        var that = this;
        var requestOptions = {
            async:false,
            requestUri : requrl,
            method : "GET",
            headers : {
                Accept : "application/json",
                "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
            }
        };
        OData.request(requestOptions, function(data, request) {
            // TO-DO : make this generic
            status = data.Status;
        }, function(error) {
            if(error.response.statusCode == 205){
                var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
                oModel.fireRequestFailed(eventParams);
            }else{
            //TODO: use enums for messageType.
                that.showMessage("error", that._oBundle.getText("INBOX_MSG_ERR_EXUI") + id);
            }
        });
        return status;
    };
    this.searchCallBack = "";
    this.dynamicTaskTypeFilterCallBack = "";
    this.getTaskExecutionURLCallBack = this.getDefaultTaskExecutionURLCallBack;
    
    this.lastRefreshedOnDateTime = new Date();
    
    //Inbox creation starts
    this.vLayout = this.createInboxUI();
    this.vLayout.setParent(this);
    this.addAndRemoveSubstDropDowns();
    this.constants = sap.uiext.inbox.InboxConstants;
    this.lastRefreshedOnDateTime = new Date();
   
};

sap.uiext.inbox.Inbox.prototype.exit = function() {
	this.vLayout.destroy();
	this.vLayout = null;
	
	function remove(id) {
		  var oItem = sap.ui.getCore().byId(id);
		  oItem && oItem.destroy();
	}
	remove(this.getId() + '--' + "dropdownCell1");
	remove(this.getId() + '--' + "dropdownCell2");
	remove(this.getId() + '--' + "dropdownCell3");
	remove(this.getId() + '--' + "manageSubstitutionMI");
	remove(this.getId() + '--' + "rrMainMatrixLayout");
	remove(this.getId() + '--' + "separatorRRViewCell");
	
	this._oBundle = undefined;
};

sap.uiext.inbox.Inbox.prototype.createAttributes = function(oAttData, oParent) {
    var that = this;
    var oAtt = new sap.ui.ux3.FacetFilterList(this.getId()+'--'+oAttData.name);
    oAtt.setTitle(this._oBundle.getText(oAttData.name));
    // oAtt.setAdditionalData({data: (oAttData.name+" (ID: "+oAtt.getId()+")")});
    for(var idx = 0; idx < oAttData.attributes.length; idx++){
        if(typeof oAttData.attributes[idx] == "string" || oAttData.attributes[idx].key != undefined){
            var attributeID;
            var oAttribute;
            if(oAttData.attributes[idx].key != undefined){
            	var attributeMetaData = oAttData.attributes[idx];
                attributeID = that.inboxUtils.scrub(attributeMetaData.key);
                oAttribute = new sap.ui.core.ListItem(this.getId() +'--'+ attributeID, {text : oAttData.attributes[idx].value, key:oAttData.attributes[idx].key});
                if(attributeMetaData.instanceID){
                	oAttribute.data("InstanceID",attributeMetaData.instanceID);
                	oAttribute.data("SAP__Origin",attributeMetaData.sap__Origin);
                }

            }else{
                attributeID = that.inboxUtils.scrub(oAttData.attributes[idx]);
                oAttribute = new sap.ui.core.ListItem(this.getId() +'--'+ attributeID, {text : this._oBundle.getText(oAttData.attributes[idx]), key:attributeID});

            }
            oAtt.addItem(oAttribute);
        }else{
            that.createAttributes(oAttData.attributes[idx], oAtt);
        }
    }
    oParent.addList(oAtt);

};

sap.uiext.inbox.Inbox.prototype.toggleFilterView = function(oEvent, oInbox) {
    var that = oInbox;
    var oFacet = sap.ui.getCore().byId(that.getId()+'--'+"filterFacet");
    that.showBusyLoader();
    if(oFacet === undefined){
        oFacet = new sap.ui.ux3.FacetFilter(that.getId()+'--'+"filterFacet"); 

        for(var idx=0;idx < sap.uiext.inbox.InboxConstants.aFilterMetaData.length; idx++){
            that.createAttributes(sap.uiext.inbox.InboxConstants.aFilterMetaData[idx], oFacet);
        }
        var verticalLayout = sap.ui.getCore().byId(that.getId()+'--'+"verticalLayoutContainer");
        verticalLayout.insertContent(oFacet, 2);
        var list = oFacet.getLists();
        for(var i=0; i<list.length; i++) {
            if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_PRIORITY"){
                list[i].attachSelect(that,that.applyDrillDownFilterForPriority);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_STATUS") {
                list[i].attachSelect(that,that.applyDrillDownFilterForStatus);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_CREATION_DATE"){
                list[i].setMultiSelect(false);
                list[i].attachSelect(that,that.applyDrillDownFilterForDateTime);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_TASK_TYPE"){
                list[i].attachSelect(that,that.applyDrillDownFilterForTaskType);
            } else if(list[i].getId()===that.getId()+'--'+"INBOX_FILTER_DUE_DATETIME"){
                list[i].setMultiSelect(false);
          list[i].attachSelect(that,that.applyDrillDownFilterForDueDate);
            }
    }
    }

    var statusAttr = sap.ui.getCore().byId(that.getId()+'--'+"INBOX_FILTER_STATUS");            
    if(sap.ui.getCore().byId(that.getId()+'--'+"filterComboBox2").getSelectedItemId() === that.getId()+'--'+"li_completedTasks"){
        if(statusAttr != undefined ){
            oFacet.removeList(statusAttr);
        }
    if (oFilterDateTime !== undefined) {
      oFacet.removeList(oFilterDateTime);
    }

    }
    var oFilterDateTime = sap.ui.getCore().byId(that.getId()+'--'+"INBOX_FILTER_CREATION_DATE");
    var oFilterDueDateTime = sap.ui.getCore().byId(that.getId()+'--'+"INBOX_FILTER_DUE_DATETIME");
    var sSelectedItemId = sap.ui.getCore().byId(that.getId()+'--'+"filterComboBox2").getSelectedItemId();
    if(sSelectedItemId === that.getId()+'--'+"li_overdueTasks" || sSelectedItemId === that.getId()+'--'+"li_escalatedTasks" ){
        if(oFilterDateTime !== undefined && oFacet.indexOfList(oFilterDateTime) !== -1 ){
            oFacet.removeList(oFilterDateTime);
        }
        if(oFilterDueDateTime !== undefined && oFacet.indexOfList(oFilterDueDateTime) !== -1){
            oFacet.removeList(oFilterDueDateTime);
     }

    }
    
    /*
     * if (sSelectedItemId === that.getId() + '--' + "li_overdueTasks" || sSelectedItemId === that.getId() + '--' +
     * "li_escalatedTasks") { if (oFilterDateTime != undefined && oFilterDateTime.getSelected() === true) {
     * oFilterDateTime.setSelected(false); } }
     */

    var oFilterToggleBtn = that._getComponent("filterViewButton");
    var sFilterToggleBtnIcon = oFilterToggleBtn ? oFilterToggleBtn.getIcon() : undefined;
    if(sFilterToggleBtnIcon){
    	var bShowFilter= (oFilterToggleBtn.getIcon() === that._imgResourcePath + that.constants.filterViewImageUnSelected);
    	var sFilterToggleBtnNewIcon =  bShowFilter ? that.constants.filterViewImageSelected :  that.constants.filterViewImageUnSelected;
    	oFilterToggleBtn.setIcon(that._imgResourcePath + sFilterToggleBtnNewIcon);
    	oFacet.setVisible(bShowFilter);
    }
    /*if(filterImg.getIcon() === that._imgResourcePath+sap.uiext.inbox.InboxConstants.filterViewImageUnSelected){
        // filterImg.setStyle(sap.ui.commons.ButtonStyle.Emph);
        filterImg.setIcon(that._imgResourcePath+sap.uiext.inbox.InboxConstants.filterViewImageSelected);
        oFacet.setVisible(true);
    }else{
        filterImg.setIcon(that._imgResourcePath+sap.uiext.inbox.InboxConstants.filterViewImageUnSelected);
        // filterImg.setStyle(sap.ui.commons.ButtonStyle.Default);
        oFacet.setVisible(false);
        // oController.resetFilterView();
    }*/
    //that.resetSearchCriteria();
    that.hideBusyLoader();
};

sap.uiext.inbox.Inbox.prototype.populateFilterButtonContainer = function(filterButtonContainer) {
    var filterViewCell = new sap.ui.commons.layout.MatrixLayoutCell({
        id : this.getId() + '--' + "filterButtonCell"
    });
    var selected = false;

    var filterViewButton = new sap.ui.commons.ToggleButton(this.getId() + '--' + "filterViewButton", {
        icon : this._imgResourcePath + sap.uiext.inbox.InboxConstants.filterViewImageUnSelected,
    //    text : this._oBundle.getText("INBOX_FILTER_TEXT"),
        pressed : false,
        tooltip : this._oBundle.getText("INBOX_BUTTON_FILTER_VIEW_TOOLTIP")
    });
    filterViewButton.attachPress(this, this.toggleFilterView)
    filterViewButton.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    filterViewCell.addContent(filterViewButton);
    filterViewCell.setPadding(sap.ui.commons.layout.Padding.None);
    filterButtonContainer.createRow(filterViewCell);
};
/*
sap.uiext.inbox.Inbox.prototype.populateDropDownContainer = function(dropDownContainer) {
    var dropdownCell = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "dropdownCell2");
    dropdownCell.setPadding(sap.ui.commons.layout.Padding.None);
    var dropdownComboBox = new sap.ui.commons.DropdownBox(this.getId() + '--' + "filterComboBox2", {
        tooltip : this._oBundle.getText("INBOX_TASKS_FILTER_DROPDOWN_TOOLTIP"),
        items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_openTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_OPEN_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_completedTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_COMPLETED_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_overdueTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_OVERDUE_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_escalatedTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_ESCALATED_TASKS")
        })]
    });
    dropdownComboBox.attachChange(this, this.applyDropDownFilter);
    dropdownComboBox.setValue(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_MY_OPEN_TASKS"));
    dropdownComboBox.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    dropdownComboBox.addStyleClass("sapUiExtInboxComboBox");
    dropdownCell.addContent(dropdownComboBox);
    dropDownContainer.createRow(dropdownCell);
};*/

sap.uiext.inbox.Inbox.prototype.addAndRemoveSubstDropDowns = function() {
	var dropDownRow = sap.ui.getCore().byId(this.getId() + '--' + "dropdownRow");
	var dropdowncell1 = sap.ui.getCore().byId(this.getId() + '--' + "dropdownCell1");
	var dropdowncell2 = sap.ui.getCore().byId(this.getId() + '--' + "dropdownCell2");
	var dropdowncell3 = sap.ui.getCore().byId(this.getId() + '--' + "dropdownCell3");
	var oManageSubstMenuItemInTable = sap.ui.getCore().byId(this.getId() + '--' + "manageSubstitutionMI");
	var oManageSubstMenuItemInStream = sap.ui.getCore().byId(this.getId() + '--' + "rrManageSubstitutionMI");

	if(this.getSubstitutionEnabled()) { //Do not add this combo box if substitution is disabled 
			dropDownRow.addCell(dropdowncell1);
			dropDownRow.addCell(dropdowncell2);
			dropDownRow.addCell(dropdowncell3);
			oManageSubstMenuItemInTable.setEnabled(true);
			oManageSubstMenuItemInStream.setEnabled(true);
		} else {
			if(dropDownRow != undefined) {
			dropDownRow.removeCell(dropdowncell1);
			dropDownRow.removeCell(dropdowncell3);
			}
			if(oManageSubstMenuItemInTable && oManageSubstMenuItemInStream) {
				oManageSubstMenuItemInTable.setEnabled(false);
				oManageSubstMenuItemInStream.setEnabled(false);
			}
		}
	var rrSettingsButton = sap.ui.getCore().byId(this.getId() + '--' + "rrSettingsButton");
	var tableSettingsButton = sap.ui.getCore().byId(this.getId() + '--' + "settingsButton");
	this._manageVisibilityOfSettingsButton(rrSettingsButton);
	this._manageVisibilityOfSettingsButton(tableSettingsButton);
};

sap.uiext.inbox.Inbox.prototype.populateDropDownContainer = function(dropDownContainer) {
    var dropdownRow = new sap.ui.commons.layout.MatrixLayoutRow(this.getId() + '--' + "dropdownRow");
    
    var dropdownCell1 = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "dropdownCell1");
    dropdownCell1.setPadding(sap.ui.commons.layout.Padding.None);
    //if(this.getSubstitutionEnabled()) { //Do not add this combo box if substitution is disabled 
    var dropdownComboBox1 = new sap.ui.commons.DropdownBox(this.getId() + '--' + "filterComboBox1", {
        tooltip : this._oBundle.getText("INBOX_TASKS_FILTER_DROPDOWN_TOOLTIP"),
        items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_allTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_myTasks", {
            text : this._oBundle.getText("INBOX_MY_TASKS_TEXT")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_substitutedTasks", {
            text : this._oBundle.getText("SUBSTITUTION_INBOX_DROP_DOWN_VALUE_TASKS_ASSIGNED_TO_ME")
        })]
    });
    dropdownComboBox1.attachChange(this, this.applyDropDownFilter1);
    dropdownComboBox1.setValue(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_TASKS"));
    dropdownComboBox1.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    dropdownComboBox1.addStyleClass("sapUiExtInboxComboBox");
    
    dropdownCell1.addContent(dropdownComboBox1);
    dropdownRow.addCell(dropdownCell1);
    //}
    /***/
    var dropdownCell2 = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "dropdownCell2");
    dropdownCell2.setPadding(sap.ui.commons.layout.Padding.None);
    var dropdownComboBox2 = new sap.ui.commons.DropdownBox(this.getId() + '--' + "filterComboBox2", {
        tooltip : this._oBundle.getText("INBOX_TASKS_FILTER_DROPDOWN_TOOLTIP"),
        items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_openTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_OPEN_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_completedTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_COMPLETED_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_overdueTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_OVERDUE_TASKS")
        }), new sap.ui.core.ListItem(this.getId() + '--' + "li_escalatedTasks", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ESCALATED_TASKS")
        })]
    });
    dropdownComboBox2.attachChange(this, this.applyDropDownFilter);
    dropdownComboBox2.setValue(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_OPEN_TASKS"));
    dropdownComboBox2.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    dropdownComboBox2.addStyleClass("sapUiExtInboxComboBox");
    dropdownCell2.addContent(dropdownComboBox2);
    dropdownRow.addCell(dropdownCell2);
    /***/
    //if(this.getSubstitutionEnabled()) {   //Do not add this combo box if substitution is disabled
    var dropdownCell3 = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "dropdownCell3");
    dropdownCell3.setPadding(sap.ui.commons.layout.Padding.None);
    var dropdownComboBox3 = new sap.ui.commons.DropdownBox(this.getId() + '--' + "filterComboBox3",{maxPopupItems:10});/*, {
        tooltip : this._oBundle.getText("INBOX_TASKS_FILTER_DROPDOWN_TOOLTIP"),
        items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_allUsers", {
            text : this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS")
        })]

    });*/
    
    var onBehalfOf = '';
    if(sap.ui.getCore().byId(this.getId() + '--' + 'onBehalfOfListItem') === undefined) {
        var onBehalfOf = new sap.ui.core.ListItem(this.getId() + '--' + 'onBehalfOfListItem');
    }
    onBehalfOf.setText(this._oBundle.getText("SUBSTITUTION_INBOX_FILTER_ON_BEHALF_OF"));
    onBehalfOf.setKey("onBehalfOf");
    
    dropdownComboBox3.addItem(onBehalfOf);

    var allUsers = '';
    if(sap.ui.getCore().byId(this.getId() + '--' + 'li_allUsers') === undefined) {
        allUsers = new sap.ui.core.ListItem(this.getId() + '--' + 'li_allUsers');
    }   
    allUsers.setText(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
    allUsers.setKey("allUsers");
    
    dropdownComboBox3.addItem(allUsers);

    dropdownComboBox3.attachChange(this, this.applyDropDownFilter3);
    dropdownComboBox3.setValue(this._oBundle.getText("SUBSTITUTION_INBOX_FILTER_ON_BEHALF_OF"));
    dropdownComboBox3.addStyleClass("sapUiExtInboxToolBarContainerHeight");
    dropdownComboBox3.addStyleClass("sapUiExtInboxComboBox");
    dropdownComboBox3.setEnabled(false);
    dropdownCell3.addContent(dropdownComboBox3);
    dropdownRow.addCell(dropdownCell3);
    //}

    dropDownContainer.addRow(dropdownRow);
    this.addAndRemoveSubstDropDowns();
};

// Populating the Search Bar.
sap.uiext.inbox.Inbox.prototype.populateSearchFieldContainer = function(searchFieldContainer) {

    var searchBoxCell = new sap.ui.commons.layout.MatrixLayoutCell(this.getId() + '--' + "searchBoxCell");
    searchBoxCell.setPadding(sap.ui.commons.layout.Padding.None);
    // create a simple SearchField
    var searchField = new sap.ui.commons.SearchField(this.getId() + '--' + "searchField", {
        enableListSuggest : false,
        enableClear : true,
        startSuggestion : 0,
        tooltip : this._oBundle.getText("INBOX_SEARCH_TEXT")
    });
    searchField.addStyleClass("sapUiExtInboxSearchField");
    searchField.attachSuggest(this, function(oEvent, that) {
        if (oEvent.getParameter("value") === "") {
            that.resetSearchCriteria();
            that.applyFilterOnResponse(null);
        }
    });
    searchField.attachSearch(this, this.localSearch);
    searchBoxCell.addContent(searchField);
    searchFieldContainer.createRow(searchBoxCell);
};

sap.uiext.inbox.Inbox.prototype.populateMsgBar = function() {
    var msgBarContainer = new sap.ui.commons.Toolbar(this.getId() + '--' + "msgBarContainer", {
        visible : false
    });
    var msbBarTypeImg = new sap.ui.commons.Image({
        id : this.getId() + '--' + "msbBarTypeImg",
        text : "",
        decorative : false
    });
    var msbBarTypeMsg = new sap.ui.commons.TextView({
        id : this.getId() + '--' + "msbBarTextView",
        text : ""
    });
    var msbBarCloseImg = new sap.ui.commons.Image({
        id : this.getId() + '--' + "msbBarCloseImg",
        text : "",
        decorative : false,
        tooltip : this._oBundle.getText("INBOX_MSGBAR_CLOSE_TOOLTIP")
    });
    msbBarCloseImg.addStyleClass("sapUiExtInboxToolbarRight");
    msbBarCloseImg.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.closeImg);
    msbBarCloseImg.attachPress(this, this.deleteMessage);
    msgBarContainer.addItem(msbBarTypeImg);
    msgBarContainer.addItem(msbBarTypeMsg);
    msgBarContainer.addItem(msbBarCloseImg);
    return msgBarContainer;
};

sap.uiext.inbox.Inbox.prototype.populateToolBar = function() {
    var toolBarContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "toolbarContainer", {
        layoutFixed : false,
        width : "100%",
        columns : 6,
        // other widths except empty label does not matter, rest of the space will be now filled with empty Label snippix #293
        //older %'s are: ["2%","10%","1%","12%","50%", "11%"] (not good in big screen) 
        widths : ["1px","1px","1px","1px","100%", "1px"] 
    });
   
    var viewButtonsContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "viewButtonsContainer", {
      layoutFixed : false
    });
    
    var filterButtonContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "filterButtonContainer", {
        layoutFixed : false
    });
    
    var refreshButtonContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "refreshButtonContainer", {
      layoutFixed : false
    });
    
    var dropDownContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "dropDownContainer", {
        layoutFixed : false
    });
    var emptyLabel = new sap.ui.commons.Label(this.getId() + '--' + "emptyLabel", {
        text : ""
    });
    emptyLabel.addStyleClass("sapUiExtInboxEmptyLabel");
    var searchFieldContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "searchFieldContainer", {
        layoutFixed : false
    });

    toolBarContainer.createRow(viewButtonsContainer, dropDownContainer, filterButtonContainer, refreshButtonContainer, emptyLabel, searchFieldContainer);

    this.populateViewButtonsContainer(viewButtonsContainer);
    this.populateDropDownContainer(dropDownContainer);
    this.populateFilterButtonContainer(filterButtonContainer);
    this.populateRefreshButtonContainer(refreshButtonContainer);
    this.populateSearchFieldContainer(searchFieldContainer);

    return toolBarContainer;
};

sap.uiext.inbox.Inbox.prototype.populateViews = function() {
    var that = this;
    var verticalLayout = sap.ui.getCore().byId(this.getId() + '--' + 'verticalLayoutContainer');
    var actionButtonsToolBar = new sap.ui.commons.Toolbar(this.getId() + '--' + "actionButtonsToolbarContainer");
    actionButtonsToolBar.addStyleClass("sapUiExtInboxActionButtonsToolbarContainer");

    if (sap.ui.getCore().byId(this.getId() + '--' + 'openActionButton') === undefined) {
        var completeButton = new sap.ui.commons.Button(this.getId() + '--' + "openActionButton", {
            icon : this._imgResourcePath + sap.uiext.inbox.InboxConstants.completeImage,
            text : this._oBundle.getText("INBOX_ACTION_BUTTON_OPEN"),
            enabled : false,
            tooltip : this._oBundle.getText("INBOX_ACTION_BUTTON_OPEN")
        });
        completeButton.attachPress(this, function(oEvent, view) {
            that.showBusyLoader();
            that.populateTaskExecutionContent();
            that.hideBusyLoader();
        });
        actionButtonsToolBar.addItem(completeButton);
    }
    if (sap.ui.getCore().byId(this.getId() + '--' + 'claimActionButton') === undefined) {
        var claimButton = new sap.ui.commons.Button(this.getId() + '--' + "claimActionButton", {
            icon : this._imgResourcePath + sap.uiext.inbox.InboxConstants.claimImage,
            text : this._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"),
            enabled : false,
            tooltip : this._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"),
            visible : false
        });
        claimButton.attachPress({inbox:that,view:that.constants.tableView,action:"Claim"}, that.executeActionOnTask);
        claimButton.setVisible(false);
        actionButtonsToolBar.addItem(claimButton);
    }
    if (sap.ui.getCore().byId(this.getId() + '--' + 'releaseActionButton') === undefined) {
        var releaseButton = new sap.ui.commons.Button(this.getId() + '--' + "releaseActionButton", {
            icon : this._imgResourcePath + sap.uiext.inbox.InboxConstants.releaseImage,
            text : this._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"),
            enabled : false,
            tooltip : this._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"),
            visible : false
        });
        releaseButton.attachPress({inbox:that,view:that.constants.tableView,action:"Release"}, that.executeActionOnTask);
        releaseButton.setVisible(false);
        actionButtonsToolBar.addItem(releaseButton);
    }
    if (sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton') === undefined) {
    	var forwardButton = new sap.ui.commons.Button(this.getId() + '--' + "forwardActionButton", {
    		icon : this._imgResourcePath + sap.uiext.inbox.InboxConstants.forwardTaskImage,
    		text : this._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD"),
    		enabled : false,
    		tooltip : this._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD"),
    		visible : false //TODO: Do we show it or hide it ? 
    	});
    	forwardButton.attachPress({inbox:that,view:that.constants.tableView,action:"Forward"}, that._executeForwardAction);
    	actionButtonsToolBar.addItem(forwardButton);
    }
 /*   if (sap.ui.getCore().byId(this.getId() + '--' + 'refreshButton') === undefined) {
        var seprtr = new sap.ui.commons.ToolbarSeparator();
        actionButtonsToolBar.addItem(seprtr);

        var refreshButton = new sap.ui.commons.Image(this.getId() + '--' + "refreshButton", {
            tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP"),
            decorative : false
        });
        refreshButton.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.refreshImage);
        refreshButton.attachPress(that, that.refreshTaskList);
        refreshButton.addStyleClass("sapUiExtInboxRefreshButtonHeight");
        actionButtonsToolBar.addItem(refreshButton);

        var refreshLink = new sap.ui.commons.Link(this.getId() + '--' + "refreshLink", {
            text : this._oBundle.getText("INBOX_REFRESH_TEXT"),
            tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP")
        });
        refreshLink.attachPress(that, that.refreshTaskList);
        actionButtonsToolBar.addItem(refreshLink);

    }*/
    if (sap.ui.getCore().byId(this.getId() + '--' + 'settingsButton') === undefined) {
        var settingsButton = new sap.ui.commons.MenuButton(this.getId() + '--' + "settingsButton", {
            tooltip : this._oBundle.getText("INBOX_SETTINGS_BUTTON_TOOLTIP"),
            icon : this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImage,
            iconHovered: this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImageHover,
            iconSelected: this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImageHover,	
            lite : true
        });
        settingsButton.addStyleClass("sapUiExtInboxToolbarRight");
        //settingsButton.addStyleClass("sapUiExtInboxSettingsButton");
        
        //Creating the menu
        var inboxSettingsMenu = new sap.ui.commons.Menu(this.getId() + '--' +'inboxSettingsMenu', {tooltip: this._oBundle.getText("INBOX_SETTINGS_BUTTON_TOOLTIP")});
        //Creating items and adding them to the menu
        //TODO: Later We should enable disable Substitution Menu according to the property, setter/getters are already available. 
        //Adding substitution menu only if it is enabled, by default the property is false so it will not be enabled.
    //if(this.getSubstitutionEnabled()){ //Do not add this combo box if substitution is disabled
            var manageSubstitutionMenuItem = new sap.ui.commons.MenuItem(this.getId() + '--' + "manageSubstitutionMI",{
                                                                                                                    text: this._oBundle.getText("INBOX_MANAGE_SUBSTITUTION_RULES_MENU_ITEM"),
                                                                                                                    tooltip: this._oBundle.getText("INBOX_MANAGE_SUBSTITUTION_RULES_TOOLTIP")
                                                                                                                    });
            inboxSettingsMenu.addItem(manageSubstitutionMenuItem);
//      }
        
        settingsButton.setMenu(inboxSettingsMenu);
      //Attaching an event respective to the selection made.
        settingsButton.attachItemSelected(that, that.menuButtonActionEvent);        
    //  settingsButton.attachPress(that, that.openToolPopUp);
        actionButtonsToolBar.addItem(settingsButton);
    }
    verticalLayout.addContent(actionButtonsToolBar);

    // START TABLE
    if (that._getComponent('listViewTable') === undefined) {
        var oTable = new sap.ui.table.Table(that.getId() + '--' + "listViewTable");
        oTable.addStyleClass("sapUiExtInboxCustomTable");
        oTable.setThreshold(10000);
        oTable.setEditable(false);
        oTable.bDynamic = true;
        var entitiesLength = that.constants.mEntities.taskMetadata.properties.length;
        var inboxTaskMetadataConstant = that.constants.mEntities.taskMetadata;
        
        for ( var index = 0; index < entitiesLength; index++) {

        	if (index == that.constants.TABLE_COLUMN.TASK_TITLE) {
          		var oFirstColHorLay = that._getFirstColumnContentTemplate();
          	
          		var oTaskTitleColumn = that._createTableColumn(index, "INBOX_TASK_TITLE_TOOLTIP", oFirstColHorLay)
					     //fixing the Task Title Column width, width cannot be in '%' as setFlexible will not work otherwise.
					     oTaskTitleColumn.setWidth("330px");		
					     oTaskTitleColumn.setFlexible(false);
					     oTable.addColumn(oTaskTitleColumn);
          } else if (index == that.constants.TABLE_COLUMN.CREATED_ON) {
          			var oCreatedOnTextView = new sap.ui.commons.TextView({text : {formatter : that.dateFormat, path : inboxTaskMetadataConstant.properties[index]} });
          			oCreatedOnTextView.bindProperty("tooltip", inboxTaskMetadataConstant.properties[index], that.tooltipFormatForDateTime);
    										
          			var oCreatedOnColumn = that._createTableColumn(index, "INBOX_START_DATE_TOOLTIP", oCreatedOnTextView);
          			oCreatedOnColumn.setFlexible(true); 
          			oTable.addColumn(oCreatedOnColumn);
        	} else if (index == that.constants.TABLE_COLUMN.CREATED_BY) {
        				var oCreatedByTextView = new sap.ui.commons.TextView({text : {path : inboxTaskMetadataConstant.properties[index]}	})
        				oCreatedByTextView.bindProperty("tooltip", inboxTaskMetadataConstant.properties[index]);
        		
        				var oCreatedByColumn = that._createTableColumn(index, "INBOX_CREATED_BY_NAME_TOOLTIP", oCreatedByTextView);
        				oCreatedByColumn.setFlexible(true); 
        				oTable.addColumn(oCreatedByColumn);
        				
    			} else if (index == that.constants.TABLE_COLUMN.COMPLETION_DEADLINE) {
    						var oCompletionDealineTextView = new sap.ui.commons.TextView({text : {formatter : that.dateFormat, path : inboxTaskMetadataConstant.properties[index]} });
    						oCompletionDealineTextView.bindProperty("tooltip", inboxTaskMetadataConstant.properties[index],	that.tooltipFormatForDateTime);

    						var oCompletionDeadlineColumn = that._createTableColumn(index, "INBOX_DUE_DATE_TOOLTIP", oCompletionDealineTextView);
    						oCompletionDeadlineColumn.setFlexible(true); 
    						oTable.addColumn(oCompletionDeadlineColumn);
    			} else if (index == that.constants.TABLE_COLUMN.STATUS) {
        				var oStatusTextView = new sap.ui.commons.TextView();
	        				oStatusTextView.bindText({
	        	        parts: [
	        	            {path: "Status", type: new sap.ui.model.type.String()},
	        	            {path: "StatusText", type: new sap.ui.model.type.String()}
	        	            ],
	        	        formatter: function(Status, StatusText){ // string, string, float, float
	        	        	return that._getTaskStatus(Status, StatusText);
	        	        },
	        	        useRawValues : true
	        				});
        				
        				var oStatusColumn = that._createTableColumn(index, "INBOX_STATUS_TOOLTIP", oStatusTextView);
        				oStatusColumn.setFlexible(true); 
    						oTable.addColumn(oStatusColumn);	
      		} else if (index == that.constants.TABLE_COLUMN.PRIORITY) {
      				var oPriorityTextView = new sap.ui.commons.TextView();
	      				oPriorityTextView.bindProperty("text", "Priority", function(value) {
	      					if (value != null && value != "" && value != undefined) {
	      						return that._oBundle.getText(that.constants.prioTooltip[value]);
	      					}
	      					return "";
	      				});
 
      				var oPriorityColumn = that._createTableColumn(index, "INBOX_PRIORITY_TOOLTIP", oPriorityTextView);
      				oPriorityColumn.setFlexible(true); 
      				oTable.addColumn(oPriorityColumn);	
      		}
      }

        var that = this;
        // code to capture sort event and reset search
        /*
         * oTable.addDelegate({ onAfterRendering : function() { var oTable$ = oTable.$(); var cols =
         * oTable$.find(".sapUiTableCol").get(); for ( var i = 0; i < cols.length; i++) { if
         * (cols[i].attributes['aria-sort']) { var sortValue = cols[i].attributes['aria-sort'].value; if (sortValue ===
         * "ascending" || sortValue === "descending") that.resetSearchCriteria(); } } } });
         */
        oTable.attachSort(function(oEvent) {
            that.resetSearchCriteria();
        });
        oTable.attachRowSelectionChange(function(oEvent) {
            var oDataModel = that.getCoreModel();
            var selectedStatus = [], aSelectedSAPOrigin = [];
            var selectedTaskDefinitionID = [];
            var selectedInstanceID = [];
            var selectedIndices = this.getSelectedIndices();
            var oListTable = this;
            var mParameters = oEvent.getParameters();
						var supportsAction = {
            		aSupportsClaim:[],
            		aSupportsRelease:[],
            		aSupportsForward:[]
            };
            jQuery.each(selectedIndices, function(i, selIndex) {
                var rowContext = oListTable.getContextByIndex(selIndex);
                selectedStatus.push(oDataModel.getProperty("Status", rowContext));
                var taskDefnID = oDataModel.getProperty("TaskDefinitionID", rowContext)
                var sSapOrigin = oDataModel.getProperty("SAP__Origin", rowContext)
                if(jQuery.inArray(taskDefnID,selectedTaskDefinitionID) === -1){
                	selectedTaskDefinitionID.push(oDataModel.getProperty("TaskDefinitionID", rowContext));
                }
                if(jQuery.inArray(sSapOrigin,aSelectedSAPOrigin) === -1){
                	aSelectedSAPOrigin.push(sSapOrigin);
                }
                selectedInstanceID.push(oDataModel.getProperty("InstanceID", rowContext));
                supportsAction.aSupportsClaim.push(oDataModel.getProperty("SupportsClaim", rowContext));
                supportsAction.aSupportsRelease.push(oDataModel.getProperty("SupportsRelease", rowContext));
                if(that.isForwardActionEnabled){
                	supportsAction.aSupportsForward.push(oDataModel.getProperty("SupportsForward", rowContext));
            	}
            });
            that.disableActionButtonsOnMultiStatus(selectedStatus, supportsAction, aSelectedSAPOrigin);
            if(that.isCustomActionsEnabled){
            	if(mParameters.rowIndex !== -1){
            		that._deleteCustomActionsForTableView();
            	}
            	var isCompletedTasksSelectedinDD =  that._isCompletedTasksSelected();
            	if(selectedTaskDefinitionID && selectedTaskDefinitionID.length === 1 && !isCompletedTasksSelectedinDD){
            		var aCustomActions = that._getCustomActionsDefinition(selectedInstanceID[0],selectedTaskDefinitionID[0],aSelectedSAPOrigin[0]);
            		if(aCustomActions && aCustomActions.length > 0)
            			that._createCustomActionsForTableView(aCustomActions,true);
            	}
            }
            that._handleForwardButtonVisibilityOnRowSelection(aSelectedSAPOrigin);
        });
        oTable.clearSelection();
    }
    verticalLayout.addContent(oTable);
    verticalLayout.addContent(that.createTableRowSettingsContent());
   //Creating but will be hidden.
  	that.createRowRepeaterView();
  	
};

sap.uiext.inbox.Inbox.prototype._createTableColumn = function(columnIndex, columnLabelTooltip, columnContent){
	
var inboxTaskMetadataConstant = 	this.constants.mEntities.taskMetadata;
var oTableColumn = new sap.ui.table.Column({id : this.getId() + '--' + inboxTaskMetadataConstant.properties[columnIndex]
																					}).setLabel(new sap.ui.commons.Label({
																											text : this._oBundle.getText(inboxTaskMetadataConstant.propertiesLabel[columnIndex]),
																											tooltip : this._oBundle.getText(columnLabelTooltip),
																											design : sap.ui.commons.LabelDesign.Bold})
																											).setTemplate(columnContent)
																												.setSortProperty(inboxTaskMetadataConstant.properties[columnIndex]);
return oTableColumn;
};


sap.uiext.inbox.Inbox.prototype.createTableRowSettingsContent = function() {
	var that = this;
	var tableRowSettingMatLayout = new sap.ui.commons.layout.MatrixLayout(that.getId() + '--'+ 'tableRowSettingLayoutContainer');

	//Table Row Settings.
	var oSegmentedButtonIconLite = new sap.ui.commons.SegmentedButton({id:that.getId() + '--' + 'tableRowSettingsSegBtn',
			buttons:[new sap.ui.commons.Button({id: that.getId() + '--' + 'table10RowsSegBtn',lite:true,text:'10',
													tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_TEN")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent"),
			         new sap.ui.commons.Button({id: that.getId() + '--' + 'table25RowsSegBtn',lite:true,text:'25',
			        	 					tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_TWENTYFIVE")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent"),
		           new sap.ui.commons.Button({id: that.getId() + '--' + 'table50RowsSegBtn',lite:true,text:'50',
		          	 					tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_FIFTY")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent")
	    ]});		
		oSegmentedButtonIconLite.attachSelect(function(oEvent) {
				var rowSettingValue = parseInt(sap.ui.getCore().byId(oEvent.getParameters().selectedButtonId).getText());
				var aButtons = this.getButtons();
				var sSelectedButtonId = oEvent.getParameters().selectedButtonId;
				for (var i = 0; i < aButtons.length; i++) {
					var oButton =  aButtons[i];
					if(sSelectedButtonId !== oButton.getId()){
						oButton.addStyleClass("sapUiExtInboxSegmentedButtonTransparent");
						oButton.removeStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
					}else{
						oButton.removeStyleClass("sapUiExtInboxSegmentedButtonTransparent");
						oButton.addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
					}
				}
				
				that.setNoOfRowsOnTable(rowSettingValue);
		 });
		oSegmentedButtonIconLite.setSelectedButton(that.getId() + '--' + 'table10RowsSegBtn');
		sap.ui.getCore().byId(oSegmentedButtonIconLite.getSelectedButton()).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
		var oBorderLayout2 = new sap.ui.commons.layout.BorderLayout(that.getId() + '--'+ 'tableBorderLayout', {width: "100%", height: "40px"});
		oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.end, oSegmentedButtonIconLite);
		oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.end, {
			size : "45%",
			contentAlign : "right",
			visible : true
		});
		tableRowSettingMatLayout.createRow(new sap.ui.commons.TextView({text : ' '}));//Fix For Footer scrollbar issue in IE8
		tableRowSettingMatLayout.createRow(oBorderLayout2);
		return tableRowSettingMatLayout;
	
};

sap.uiext.inbox.Inbox.prototype.createRowRepeaterView = function (){
	var that = this;
	var verticalLayout = sap.ui.getCore().byId(that.getId() + '--' + 'verticalLayoutContainer');
 
	var oTasksRowRepeater = sap.ui.getCore().byId(that.getId() + '--'+'tasksRowRepeater');
	
	//RowRepeater Creation --Start--
 	if(!oTasksRowRepeater){
 		
 		//This is the Main Matix Layout which is the template for Row Repeater.
			var rrMainMatrixLayout = new sap.ui.commons.layout.MatrixLayout({
				id : that.getId() + '--' + "rrMainMatrixLayout",
				layoutFixed : true,
	 			columns : 3,
	 			width : '100%',
	 			widths : ['9%', '83%', '8%'] });
			
		// 1.First Row (Initiator Image, Task Title, Created On Date)
			var firstRow = new sap.ui.commons.layout.MatrixLayoutRow({
				id :  that.getId() + '--' + 'rrFirstRow',
				height: '25px' });

			rrMainMatrixLayout.addRow(firstRow);

			//Cell For Initiator Image
			var taskInitiatorImageCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id :  that.getId() + '--' +  'taskInitiatorImageCell',
				rowSpan: 2 ,colSpan: 1,
				//padding: sap.ui.commons.layout.Padding.End,
				hAlign: sap.ui.commons.layout.HAlign.Center,
				vAlign: sap.ui.commons.layout.VAlign.Middle
			    });
			taskInitiatorImageCell.addStyleClass("sapUiExtInboxRRFirstRowStyle");
			 var taskInitiatorImg = new sap.ui.commons.Image(that.getId() + '--' + "taskInitiatorImg");
			 taskInitiatorImg.bindProperty("tooltip","CreatedByName");
	 	    taskInitiatorImg.setAlt(that._imgResourcePath + sap.uiext.inbox.InboxConstants.taskInitiatorDefaultImage);
	 	    
	 	    taskInitiatorImg.bindProperty("src", that.constants.taskDefinitionNavigationParam, function(taskDefinitionData){
	    		if(taskDefinitionData !== null && taskDefinitionData !== "" && taskDefinitionData !== undefined){
	    			if(taskDefinitionData !== null && taskDefinitionData !== "" && taskDefinitionData !== undefined){
		    			var oModel = that.getCoreModel();
		    			var oContext = this.getBindingContext();
		    			var categoryValue=taskDefinitionData.Category;
		    			categoryValue=categoryValue.toUpperCase();
		    			if (categoryValue !== null && categoryValue !== "" && categoryValue !== undefined) {
		    				if(categoryValue === that._oBundle.getText("ALERT"))
		    					return that._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewAlertCategoryImage;
		    				else if(categoryValue === that._oBundle.getText("NOTIFICATION"))
		    					return that._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewNotificationCategoryImage;
		    				else if(categoryValue === that._oBundle.getText("TODO"))
		    					return that._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewTodoCategoryImage;
		    				else if(categoryValue === that._oBundle.getText("TASK"))
		    					return that._imgResourcePath + sap.uiext.inbox.InboxConstants.taskInitiatorDefaultImage;
	    			}
	    		}
	    		return that._imgResourcePath + sap.uiext.inbox.InboxConstants.taskInitiatorDefaultImage;		
	    	
	    	}}); 

			  // TODO: After TaskInitiator Image is provided in Public API and in TCM, need to bind it from there, if
				// source URL is not defined and fall back on the default image.
	 	    /*taskInitiatorImg.bindProperty("alt", "Category");
	 	    taskInitiatorImg.bindProperty("src", "Category", function(value) {
	           if (value != null && value != "" && value != undefined) {
	        	   //TODO: Uncomment when Category is available
	               return that._imgResourcePath + sap.uiext.inbox.InboxConstants.taskInitiatorImages[value];
	           }
	           return "";
	 	    });*/
	 	    
				
				taskInitiatorImageCell.addContent(taskInitiatorImg);
				firstRow.addCell(taskInitiatorImageCell);

			//Cell For Task Title
			var taskTitleCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'taskTitleCell',
				padding: sap.ui.commons.layout.Padding.Bottom,
				hAlin: sap.ui.commons.layout.HAlign.Right
			});
			taskTitleCell.addStyleClass("sapUiExtInboxRRFirstRowStyle");
			
			
			//taskTitleCell.addContent(category_img);

		// 1.Row : Task Title and Date
			/*var otaskStatusImage = new sap.ui.commons.Image({
			         id : that.getId() + '--' + "rrViewTaskTitleImage",
			         text : "",
			         decorative : false,
			         visible: false
//			         tooltip : this._oBundle.getText("INBOX_MSGBAR_CLOSE_TOOLTIP")
			     });
			otaskStatusImage.bindProperty("src","",function(value){
				return "";
			});*/
			
			var taskName = new sap.uiext.inbox.InboxLink(that.getId() + '--' + "rrViewTaskTitle");
			taskName.addStyleClass('sapUiExtInboxfontBold');
			taskName.addDelegate({
	            onAfterRendering : function() {
	                if (this.data("overDue") === true) {
	                    this.addStyleClass('sapUiExtInboxRedColor');
	                }
	            }
	        });
			//taskName.addStyleClass("sapUiExtInboxNoUnderline");
	 	    taskName.bindProperty("text","TaskTitle",function(value){
	 			if(this.getBindingContext() ===  undefined)
	 			   return undefined;
	 			else
	 				return value;
	 		});
	 	    taskName.bindProperty("overdue","CompletionDeadLine", function(value){
				return that._isOverDue(value);
			});
	 	    taskName.bindProperty("tooltip","TaskTitle");
	 	    taskName.bindProperty("enabled", "Status", function(value) {
	 	    	if (value === "COMMITTED") {
	 	    		this.addStyleClass("sapUiExtInboxLnkDsbl");
	 	    		return false;
	 	    	} else if (that.getOpenCompletedTasks() === false && value == "COMPLETED") {
	 	    		this.addStyleClass("sapUiExtInboxLnkDsbl");
	 	    		return false;
	 	    	}
	 	    	this.removeStyleClass("sapUiExtInboxLnkDsbl");
	 	    	return true;

	        });
	        taskName.attachPress(this, function(oEvent, view) {
	        	//TODO: Refactor so that need not be done at two places for the different Views
	            that.showBusyLoader();
	            var oRow = oEvent.getSource().getParent();
	            var oContext = oEvent.getSource().getBindingContext();
	            var oModel = that.getCoreModel();

	            // var oTaskExecMeta = {};
	            var aTaskExecutionURLs = [];
	            var aTaskExecIDs = [];
	            var aTaskExecTitles = [];
	            var aTaskExecSAPOrigins = [];

	            aTaskExecIDs.push(oModel.getProperty("InstanceID", oContext));
	            aTaskExecTitles.push(oModel.getProperty("TaskTitle", oContext));
	            aTaskExecSAPOrigins.push(oModel.getProperty("SAP__Origin", oContext));

	            if (that.getTaskExecutionURLCallBack != "" && that.getTaskExecutionURLCallBack != undefined && that.getTaskExecutionURLCallBack !== null){
	                aTaskExecutionURLs.push(that.getTaskExecutionURLCallBack(aTaskExecIDs[0],aTaskExecSAPOrigins[0]));
	            }else{
	                aTaskExecutionURLs.push("");
	            }

	            var evt = oEvent.getParameter("windowEvent");
	            if(!evt.ctrlKey && !(evt.button==1) && !evt.shiftKey){
                    view.populateTaskExecutionContent({
                        arrayURLs : aTaskExecutionURLs,
                        arrayIDs : aTaskExecIDs,
                        arrayTitles : aTaskExecTitles,
                        aTaskSAPOrigins : aTaskExecSAPOrigins
                    });
                    that.hideBusyLoader();
    			}else{
    				that.hideBusyLoader();
    				var taskExecWindow = window.open(aTaskExecutionURLs[0]);
    				taskExecWindow.focus();
    				oEvent.preventDefault();
    			}
	            
	        });

			taskTitleCell.addContent(taskName);
			firstRow.addCell(taskTitleCell);
				
			//Cell For Created On Date
			var createdOnCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'createdOnCell',
				padding: sap.ui.commons.layout.Padding.Both,
				hAlign: sap.ui.commons.layout.HAlign.End
			});

			createdOnCell.addStyleClass("sapUiExtInboxRRFirstRowStyle");
			createdOnCell.addStyleClass("sapUiExtInboxRRPaddingRight");
			var createdOnDate = new sap.ui.commons.TextView(that.getId() + '--' + "rrViewCreatedOnDate");
			createdOnDate.addStyleClass("sapUIExtInboxRRTextColourStyle");
			createdOnDate.bindProperty("tooltip", "CreatedOn",that.tooltipFormatForDateTime);
			createdOnDate.bindProperty("text", "CreatedOn", function(value) {
				if (value !== null && value !== "") {
					return that.dateFormat(value, false);
				}
		  });

			createdOnCell.addContent(createdOnDate);
			firstRow.addCell(createdOnCell);	

			// 2. Second Row ((1st cell occupied by colSpan of Image), Task Description, Status)
			var secondRow = new sap.ui.commons.layout.MatrixLayoutRow({
				id : that.getId() + '--' + 'secondRow',
				height: '20px' });

			rrMainMatrixLayout.addRow(secondRow);

			//Cell For Task Desc
			var taskDescCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'taskDescCell',
				padding: sap.ui.commons.layout.Padding.End,
				rowSpan : 1 });

		 var taskDetails = new sap.ui.commons.TextView(that.getId() + '--' + "rrViewTaskDetails");
	 	    //taskDetails.bindElement("/TaskCollection/TaskDescription");
	 	    taskDetails.bindProperty("text","Description", function(desc){
	 	    	if(desc !== null && desc !== undefined){
	 	    		var oModel = that.getCoreModel();
	 	    		var oContext = this.getBindingContext();
	 	    		var descEntry = desc[0];
	 	    		var descVal = oModel.oData[descEntry];

	 	    		var description;
	 	    		if(descVal){
	 	    			description = descVal.Description;
	 	    		}else{
	 	    			description = desc.Description;
	 	    		}
	 	    		if(description !== null && description !== undefined && description !== ""){
	 	    			return description;
	 	    		}
	 	    	}
	 	    	return "";
	 	    });


			taskDescCell.addContent(taskDetails);
			secondRow.addCell(taskDescCell);

			//Cell For Status
			var statusCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' +  'statusCell',
				padding: sap.ui.commons.layout.Padding.End,
				hAlign: sap.ui.commons.layout.HAlign.End
			});
			statusCell.addStyleClass("sapUiExtInboxRRPaddingRight");
			
		  var statusText = new sap.ui.commons.TextView(that.getId() + '--' + "rrViewStatus");
 	    statusText.addStyleClass("sapUIExtInboxRRTextColourStyle");
 	    statusText.bindProperty("text","Status", function(value) {
 	    	var oModel= that.getModel();
 	    	var statusLabel= oModel.getProperty(sap.uiext.inbox.InboxConstants.PROPERTY_NAME_CUSTOM_STATUS,this.getBindingContext(),false);
 	    	return that._getTaskStatus(value,statusLabel);
				
 	    	
 	    });

			statusCell.addContent(statusText);
			secondRow.addCell(statusCell);

			// 3.Row (Task Initiaor Name, Claim, ".", Release, SegmentedButtons(Attachments, Comments, CustomAttributes)
			var thirdRow = new sap.ui.commons.layout.MatrixLayoutRow({
				id : that.getId() + '--' + 'thirdRow',
				height: '25px' });

			rrMainMatrixLayout.addRow(thirdRow);

			//Cell for Task Initiator Name.	
			var taskInitiatorNameCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'taskInitiatorNameCell',
				hAlign: sap.ui.commons.layout.HAlign.Center,
				colSpan : 1 });

		   var taskInitiatorName = new sap.ui.commons.TextView(that.getId() + '--' + "taskInitiatorName",{design : sap.ui.commons.TextViewDesign.Small, wrapping : false,
				width : '90%'});
		   taskInitiatorName.setTextAlign(sap.ui.core.TextAlign.Center);
		   taskInitiatorName.setDesign(sap.ui.commons.TextViewDesign.Bold);
		   //taskInitiatorName.setWrapping(true);
	 	    taskInitiatorName.bindProperty("text","CreatedByName");
	 	   // taskInitiatorVLayout.insertContent(taskInitiatorName, 1);

			taskInitiatorNameCell.addContent(taskInitiatorName);
			thirdRow.addCell(taskInitiatorNameCell);
				
				
			//Cell for Task Action Links.	
			var taskActionLayoutCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id :  that.getId() + '--' +  'actionLinksCell',
				padding: sap.ui.commons.layout.Padding.None,
				colSpan : 1 });

			//TODO: This would be a actions specific layout inside the main Layout.
			//We should try to improve it in future.
	 	   var taskActionInnerMatLayt = new sap.ui.commons.layout.MatrixLayout({
				id : that.getId() + '--' + "taskActionMatrixLayout",
				layoutFixed : false
				});
	 	    
	 	   var claimActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
	 	  	 id : that.getId() + '--' + 'claimActionCell',
	 	  	 hAlign: sap.ui.commons.layout.HAlign.Left,
	 	  	 vAlign: sap.ui.commons.layout.VAlign.Bottom,
	 	  	 colSpan : 1 });
	 	   
	 	   var claimActionLink = new sap.ui.commons.Link(that.getId() + '--' + "rrViewClaimAction",{
	 	    	tooltip:that._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"),
	 	    	visible:false,
	 	    	enabled:false
	 	    	});
	 	   claimActionLink.addStyleClass("sapUiExtInboxLnkNoUnderline");
	 	    
	 	    //DOT Seperator b/w Claim and Release Action Links
	 	   var dotLabel = new sap.ui.commons.Label({
	 		   id:that.getId() + '--' + "dotSeparator", 
	 		   text:sap.uiext.inbox.InboxConstants.DOT,
	 		   visible:false
	 		   });
	 	   dotLabel.addStyleClass("sapUIExtInboxDotSeperatorStyle"); 
	 	   
	 	   	claimActionLink.setText(that._oBundle.getText("INBOX_ACTION_BUTTON_CLAIM"));
	 	    claimActionLink.attachPress({inbox:that,view:that.constants.rowRepeaterView,action:"Claim"}, that.executeActionOnTask);
	 	    claimActionCell.addContent(claimActionLink);

	 	    var releaseActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
	 	    	id : that.getId() + '--' + 'releaseActionCell',
	 	    	hAlign: sap.ui.commons.layout.HAlign.Left,
	 	    	vAlign: sap.ui.commons.layout.VAlign.Bottom,
	 	    	colSpan : 1 });
	 	    
	 	    var releaseActionLink = new sap.ui.commons.Link(that.getId() + '--' + "rrViewReleaseAction",{
	 	    	tooltip:that._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"),
	 	    	visible:false,
	 	    	enabled:false
	 	    	});
	 	    releaseActionLink.addStyleClass("sapUiExtInboxLnkNoUnderline");
	 	    releaseActionLink.setText(that._oBundle.getText("INBOX_ACTION_BUTTON_RELEASE"));
	 	    releaseActionLink.attachPress({inbox:that,view:that.constants.rowRepeaterView,action:"Release"}, that.executeActionOnTask);
	 	    releaseActionCell.addContent(releaseActionLink);
	 	    
	 	 //DOT Seperator b/w Release and Forward Action Links
 	    	var dotLabel2 = new sap.ui.commons.Label({id:that.getId() + '--' + "dotSeparator2", visible:false, text:sap.uiext.inbox.InboxConstants.DOT});
	 	    dotLabel2.addStyleClass("sapUIExtInboxDotSeperatorStyle");
		 	   
	 	    var forwardActionCell = that._createForwardActionLinkCell();
	 	    
//	 	   var dotLabelCell = new sap.ui.commons.layout.MatrixLayoutCell({
//	 	    	id : that.getId() + '--' + 'dotLabelCell',
//	 	    	hAlign: sap.ui.commons.layout.HAlign.Center,
//	 	    	vAlign: sap.ui.commons.layout.VAlign.Top,
//	 	    	colSpan : 1 });
//	 	  dotLabelCell.addContent(dotLabel);

	 	   taskActionInnerMatLayt.createRow(claimActionCell, dotLabel, releaseActionCell, dotLabel2, forwardActionCell);

	 	  taskActionLayoutCell.addContent(taskActionInnerMatLayt);
			thirdRow.addCell(taskActionLayoutCell);	
				
			//Cell for Other Actions Segmented Buttons.	
			var segmentedButtonsCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : that.getId() + '--' + 'segmentedButtonsCell',
				padding: sap.ui.commons.layout.Padding.None,
				hAlign: sap.ui.commons.layout.HAlign.End,
				colSpan : 1 });

			 var icons = that.createOtherActions(that);
			 segmentedButtonsCell.addContent(icons);
			 thirdRow.addCell(segmentedButtonsCell);	
 	    
			 rrMainMatrixLayout.addStyleClass("sapUiExtInboxRowRepeaterLayoutBorder");
		
	 	                         
 	    var oTasksRowRepeater = new sap.ui.commons.RowRepeater(that.getId() + '--'+'tasksRowRepeater',{numberOfRows : 5});	
 	    oTasksRowRepeater.setThreshold(10000);
 	    oTasksRowRepeater.setDesign(sap.ui.commons.RowRepeaterDesign.BareShell);
 	    oTasksRowRepeater.addStyleClass("sapUiExtInboxBackgroundColour");
 	    oTasksRowRepeater.addStyleClass("sapUiExtInboxRowRepeaterBorder");
 	   
	 	}

 	
	//Adding Sorting Buttons Refresh Button and Settings
 	var rowRepeaterToolBar = that.createRowRepeaterToolBar(that);
 	rowRepeaterToolBar.setVisible(false);
 	verticalLayout.addContent(rowRepeaterToolBar);
 	
 	//This is based on the defaultView, after we introduce the concept of default view, we need to use that parameter and set visibility.
 	//If RR View is default then RR View visibilty will be true and List View Table will be false at the time of creation.
 	oTasksRowRepeater.setVisible(false);
 	verticalLayout.addContent(oTasksRowRepeater);
	 	
 	//Adding paginator and page settings(below rowrepeater).
 	var rowRepeaterToolsContent = that.createRowRepeaterToolsContent(that);
 	rowRepeaterToolsContent.setVisible(false);
 	verticalLayout.addContent(rowRepeaterToolsContent);
}

sap.uiext.inbox.Inbox.prototype.menuButtonActionEvent = function (oEvent, oInbox){
    var that = oInbox;
    var idOfItemSelected = oEvent.getParameter("itemId"); 
    if(idOfItemSelected === that.getId() + '--' +'rowSettingsMenuItem'){
        that.openToolPopUp(that);
    }else if(idOfItemSelected === that.getId() + '--' +'manageSubstitutionMI' || idOfItemSelected === that.getId() + '--' +'rrManageSubstitutionMI'){
            var substitutionRulesManager    = sap.ui.getCore().byId(that.getId() + '--' + 'substitutionRulesManager');
            if(substitutionRulesManager === undefined){
                    substitutionRulesManager = new sap.uiext.inbox.SubstitutionRulesManager(that.getId() + '--' + 'substitutionRulesManager');
                    substitutionRulesManager.setParent(that);
            }
            if(substitutionRulesManager.getModel() === undefined){
            	var newModel = new sap.ui.model.odata.ODataModel(that.bpmSvcUrl,true);
            	var oModel = that.getCoreModel();
            	newModel.oHeaders["x-csrf-token"] = oModel.oHeaders["x-csrf-token"];
            	substitutionRulesManager.setModel(newModel);
            }
            substitutionRulesManager.oTCMModel = that.oTCMModel;
            substitutionRulesManager.oConfiguration = that.oConfiguration;
            substitutionRulesManager.isSubstitutionRuleCreationSupported=that.isSubstitutionRuleCreationSupported;
            //substitutionRulesManager.bindSubstitutionRules(that._substitutionPath);
            substitutionRulesManager.open();
    }
};

sap.uiext.inbox.Inbox.prototype.populateTaskExecutionContent = function(oTaskExecMeta) {
    var that = this;
    this.showBusyLoader();

    var sTaskExecutionThemeURL = "";

    if (this.getTaskExecutionURLThemeValue() !== undefined && this.getTaskExecutionURLThemeValue() !== null
            && this.getTaskExecutionURLCallBack === this.getDefaultTaskExecutionURLCallBack) {
        sTaskExecutionThemeURL = this.getTaskExecutionURLThemeValue();
    }

    var executionUI = sap.ui.getCore().byId(this.getId() + '--' + 'taskExecUI');
    if (executionUI != undefined) {
        executionUI.destroy();
    }
    this.loadExecImages();
    this.deleteMessage();
    var i = 0;
    var urls, ids, titles, taskExecMeta,sapOrigins, aSelectedContexts;
    if (oTaskExecMeta === undefined || oTaskExecMeta === null)
        oTaskExecMeta = this.getnavigateTaskExecMetadata();

    if (oTaskExecMeta != undefined) {
        urls = oTaskExecMeta.arrayURLs;
        ids = oTaskExecMeta.arrayIDs;
        titles = oTaskExecMeta.arrayTitles;
        sapOrigins = oTaskExecMeta.aTaskSAPOrigins;
        aSelectedContexts = oTaskExecMeta.aSelectedContexts;
    }

    executionUI = new sap.ui.ux3.OverlayContainer(this.getId() + '--' + "taskExecUI");
    executionUI.setOpenButtonVisible(false);
    
    //get the selected Contexts and set it to selectedContexts in the Inbox
    if(this.currentView === this.constants.tableView && aSelectedContexts){
    	this.selectedContexts = aSelectedContexts;
    }
    executionUI.attachClose(this, function(oEvent, inBox) {
    	jQuery.sap.byId(that.getId() + '--' + "execURLFrame").attr('src', "");
    	inBox.resetSearchCriteria();
    	//TODO: refactor required. Needs to be explicitly passed and the value is again reset back to the same property.
    	inBox.applyFilterOnResponse(inBox.selectedContexts);
    	/*if(that.currentView === that.constants.tableView){
    		jQuery.sap.byId(that.getId() + '--' + "execURLFrame").attr('src', "");
    		var selectedContexts = [];
    		var oListTable = sap.ui.getCore().byId(inBox.getId() + '--' + 'listViewTable');
    		var selectedIndices = oListTable.getSelectedIndices();
	    	jQuery.each(selectedIndices, function(i, selIndex) {
	    		var rowContext = oListTable.getContextByIndex(selIndex);
	    		selectedContexts.push(rowContext);
	    	});
    		inBox.resetSearchCriteria();
    		inBox.applyFilterOnResponse(selectedContexts);
    	}else{
    		inBox.resetSearchCriteria();
    		inBox.applyFilterOnResponse(null);
    	}*/
    	//inBox.refreshTaskList(oEvent, inBox); TODO: Refresh on closing the task Execution UI
    });
    var nxtbtn = new sap.ui.commons.Button(this.getId() + '--' + "nxtBtn", {
        tooltip : this._oBundle.getText("INBOX_BUTTON_NEXT_TOOLTIP")
    });// icon : nxtBtnImage
    nxtbtn.addStyleClass("sapUiExtInboxNavigationButton");
    var nxtBtnCell = new sap.ui.commons.layout.MatrixLayoutCell({
        id : this.getId() + '--' + "nxtBtnCell"
    });
    nxtBtnCell.setVAlign(sap.ui.commons.layout.VAlign.Middle);
    nxtBtnCell.addContent(nxtbtn);

    var nxtBtnContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "nxtBtnContainer", {
        layoutFixed : false,
        height : "100%"
    });
    nxtBtnContainer.createRow(nxtBtnCell);

    var prevbtn = new sap.ui.commons.Button(this.getId() + '--' + "prevBtn", {
        tooltip : this._oBundle.getText("INBOX_BUTTON_PREVIOUS_TOOLTIP")
    });// icon : prevBtnImage,
    prevbtn.addStyleClass("sapUiExtInboxNavigationButton");
    var prevBtnCell = new sap.ui.commons.layout.MatrixLayoutCell({
        id : this.getId() + '--' + "prevBtnCell"
    });
    prevBtnCell.setVAlign(sap.ui.commons.layout.VAlign.Middle);
    prevBtnCell.addContent(prevbtn);

    var prevBtnContainer = new sap.ui.commons.layout.MatrixLayout(this.getId() + '--' + "prevBtnContainer", {
        layoutFixed : false,
        height : "100%"
    });
    prevBtnContainer.createRow(prevBtnCell);

    var label = new sap.ui.commons.Label(this.getId() + '--' + "traverseLabel");

    var content = new sap.ui.core.HTML(this.getId() + '--' + "execURLFrame", {
        content : "<iframe name='myframe' src='" + urls[i] + sTaskExecutionThemeURL + "' scrolling='auto' id = '"
                + this.getId() + '--' + "execURLFrame"
                + "' style='position: absolute;height: 100%;width: 100%; border: none;'></iframe>"
    });

    var oBorderLayout = new sap.ui.commons.layout.BorderLayout(this.getId() + '--' + "taskExecBorderLayout", {
        width : "100%",
        height : "100%",
        top : new sap.ui.commons.layout.BorderLayoutArea({
            size : "20%",
            contentAlign : "center",
            visible : false,
            content : [new sap.ui.commons.TextView({
                text : 'Task:' + titles[i],
                design : sap.ui.commons.TextViewDesign.Bold
            })]
        }),
        bottom : new sap.ui.commons.layout.BorderLayoutArea({
            size : "4%",
            contentAlign : "center",
            visible : true,
            content : [label]
        }),
        begin : new sap.ui.commons.layout.BorderLayoutArea({
            size : "4%",
            contentAlign : "center",
            visible : true,
            content : [prevBtnContainer]
        }),
        center : new sap.ui.commons.layout.BorderLayoutArea({
            contentAlign : "left",
            visible : true,
            content : [content]
        }),
        end : new sap.ui.commons.layout.BorderLayoutArea({
            size : "4%",
            contentAlign : "center",
            visible : true,
            content : [nxtBtnContainer]
        })
    });
    executionUI.addContent(oBorderLayout);
    
    content.attachAfterRendering(function(){
        jQuery.sap.byId(that.getId() + '--' + "execURLFrame").bind('load', function(event) {
            
            var idsArrayLength = ids.length;
            if(i !== idsArrayLength - 1)
                nextB.setEnabled(true);
            else
                nextB.setEnabled(false);
            
            if(i===0)
                prevB.setEnabled(false);
            else
                prevB.setEnabled(true);
            
            label.setText((i+1) + " " + that._oBundle.getText("INBOX_OF")  + " " + ids.length);
            
        });
    });

    var prevB = sap.ui.getCore().byId(this.getId() + '--' + "prevBtn");
    if (sap.ui.getCore().getConfiguration().getRTL()) {
    	prevB.setIcon(this._imgResourcePath + sap.uiext.inbox.InboxConstants.nxtBtnImage);
    }else{
    	prevB.setIcon(this._imgResourcePath + sap.uiext.inbox.InboxConstants.prevBtnImage);
    }
    prevB.setEnabled(false);

    var nextB = sap.ui.getCore().byId(this.getId() + '--' + "nxtBtn");
    if (sap.ui.getCore().getConfiguration().getRTL()) {
    	nextB.setIcon(this._imgResourcePath + sap.uiext.inbox.InboxConstants.prevBtnImage);
    }else{
    	nextB.setIcon(this._imgResourcePath + sap.uiext.inbox.InboxConstants.nxtBtnImage);
    }
    nextB.setEnabled(ids.length > 1);

    var label = sap.ui.getCore().byId(this.getId() + '--' + "traverseLabel");
    label.setText(i + 1 + " " + this._oBundle.getText("INBOX_OF") + " " + ids.length);

    nextB.attachPress(function() {
        // callBack
        
        //disable the next and prev buttons till the next one is loaded
        prevB.setEnabled(false);
        nextB.setEnabled(false);
        
        var status = "";
        if (that.getTaskExecURLStatusCallBack !== "" && that.getTaskExecURLStatusCallBack !== undefined && that.getTaskExecURLStatusCallBack !== null){ 
            status = that.getTaskExecURLStatusCallBack(ids[i],sapOrigins[i]);
        }
        if (status === "COMPLETED") {
            urls.splice(i, 1);
            ids.splice(i, 1);
        } else {
            i = i + 1;
        }

        if (urls[i] === undefined){
            // urls[i] = that.getTaskExecutionURL(ids[i]);
            urls[i] = ""; 
            if (that.getTaskExecutionURLCallBack !== "" && that.getTaskExecutionURLCallBack !== undefined && that.getTaskExecutionURLCallBack !== null){
                urls[i] = that.getTaskExecutionURLCallBack(ids[i],sapOrigins[i]);
            }
        }
        jQuery.sap.byId(that.getId() + '--' + "execURLFrame").attr('src', urls[i] + sTaskExecutionThemeURL);
        
    });

    prevB.attachPress(function() {
        // var status = that.getPropertyforTaskID("Status",ids[i]);

        //disable the next and prev buttons till the next one is loaded
        prevB.setEnabled(false);
        nextB.setEnabled(false);
        
        var status = "";
        if (that.getTaskExecURLStatusCallBack !== "" && that.getTaskExecURLStatusCallBack !== undefined && that.getTaskExecURLStatusCallBack !== null){
            that.getTaskExecURLStatusCallBack(ids[i],sapOrigins[i]);
        }
        if (status === "COMPLETED") {
            urls.splice(i, 1);
            ids.splice(i, 1);
        }

        i = i - 1;

        if (urls[i] === undefined){
            urls[i] = "";
            if (that.getTaskExecutionURLCallBack !== "" && that.getTaskExecutionURLCallBack !== undefined && that.getTaskExecutionURLCallBack !== null){
                // urls[i] = that.getTaskExecutionURL(ids[i]);
                urls[i] = that.getTaskExecutionURLCallBack(ids[i],sapOrigins[i]);
            }
        }
        jQuery.sap.byId(that.getId() + '--' + "execURLFrame").attr('src', urls[i] + sTaskExecutionThemeURL);

    });

    executionUI.open();
};

sap.uiext.inbox.Inbox.prototype.createInboxUI = function() {
    
	//Basic View: This view would be common for any view ex: Table View, Row Repeater View or Feed View
	var verticalLayout = new sap.ui.commons.layout.VerticalLayout(this.getId() + '--' + "verticalLayoutContainer");
    if (sap.ui.getCore().byId(this.getId() + '--' + 'msgBarContainer') === undefined) {
        verticalLayout.insertContent(this.populateMsgBar(), 0);
    }
    if (sap.ui.getCore().byId(this.getId() + '--' + 'toolbarContainer') === undefined) {
        verticalLayout.insertContent(this.populateToolBar(), 1);
    }
    
    this.populateViews();
    return verticalLayout;
};

sap.uiext.inbox.Inbox.prototype.openToolPopUp = function(inBox) {
    var that = inBox;
    //var rowSettingValue = that.getRowSettingsCookieValue();
    var rowSettingValue;
    var noOfrowsRBG = sap.ui.getCore().byId(that.getId() + '--' + "rowSettingsRBG");;
    var settingsPopUp = sap.ui.getCore().byId(that.getId() + '--' + "sPopup");
    if (settingsPopUp === undefined) {
        noOfrowsRBG = new sap.ui.commons.RadioButtonGroup(that.getId() + '--' + "rowSettingsRBG", {
            tooltip : "Select number of rows to be displayed on the Table",
            columns : 3
        // select: function() {oController.setRowSettingsCookieValue(this.getSelectedItem().getText(),1);}
        });
        var oItem = new sap.ui.core.Item({
            text : "10",
            key : "rows10"
        });
        noOfrowsRBG.addItem(oItem);
        oItem = new sap.ui.core.Item({
            text : "25",
            key : "rows25"
        });
        noOfrowsRBG.addItem(oItem);
        oItem = new sap.ui.core.Item({
            text : "50",
            key : "rows50"
        });
        noOfrowsRBG.addItem(oItem);
        settingsPopUp = new sap.ui.commons.Dialog(that.getId() + '--' + "sPopup", {
            title : inBox._oBundle.getText("INBOX_TABLE_SETTINGS_POPUP_TITLE"),
            content : [noOfrowsRBG],
            buttons : [new sap.ui.commons.Button({
                text : inBox._oBundle.getText("INBOX_BUTTON_OK_TEXT"),
                press : function() {
//                  that.setRowSettingsCookieValue(sap.ui.getCore().byId(that.getId() + '--' + 'rowSettingsRBG')
//                          .getSelectedItem().getText(), 1);
                    that.setNoOfRowsOnTable(sap.ui.getCore().byId(that.getId() + '--' + 'rowSettingsRBG')
                            .getSelectedItem().getText());
                    settingsPopUp.close();
                }
            })]
        });
        settingsPopUp.setWidth("231px");
        settingsPopUp.setHeight("137px");

    }
    if (rowSettingValue === undefined) {
        rowSettingValue = sap.ui.getCore().byId(that.getId() + '--' + 'listViewTable').getVisibleRowCount() + "";
    }
    if (rowSettingValue != undefined && noOfrowsRBG != undefined) {
        switch (rowSettingValue) {
            case "10" :
                noOfrowsRBG.setSelectedIndex(0);
                break;
            case "25" :
                noOfrowsRBG.setSelectedIndex(1);
                break;
            case "50" :
                noOfrowsRBG.setSelectedIndex(2);
                break;
        }
    }
    settingsPopUp.open();
};

sap.uiext.inbox.Inbox.prototype.setSubstitutionEnabled = function(isSubstitutionEnabled, path) {
    if(this.isSubstitutionEnabled != isSubstitutionEnabled) {
        this.isSubstitutionEnabled = isSubstitutionEnabled; 
        this._substitutionPath = path;
        this.addAndRemoveSubstDropDowns();
    }
    //TODO: Might need this code later point of time.
    //var settingsButton = sap.ui.getCore().byId(this.getId() + '--' + "settingsButton");
    //if(settingsButton != undefined){
    //  settingsButton.rerender();
    //}
};

sap.uiext.inbox.Inbox.prototype._setColumnVisibility = function(colList) {
	if(colList !== undefined && colList !== null){
		var that=this;
		var isTaskTitleVisible=false;
		var consts= sap.uiext.inbox.InboxConstants;
		var oTable= sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
		var invisibleCols= this.getInvisibleCols(colList);
		var cols= oTable.getColumns();
		jQuery.each(cols,function(index,column){
			jQuery.each(invisibleCols,function(index,field){
				if(that.absId(column.getId())===sap.uiext.inbox.InboxConstants.TABLE_VIEW_TECH_NAMES[field])
					column.setVisible(false);
				
			});
		});
		this.resizeColumns();
	}
};

sap.uiext.inbox.Inbox.prototype.absId= function(string){
	return string.split("--")[1].replace(/^\s+|\s+$/g,'');
	
};
sap.uiext.inbox.Inbox.prototype.getInvisibleCols= function(colList){
	var invisibleCols= [];
	jQuery.each(colList.columns,function(index,col){
		if(col.visibility===false)
			invisibleCols.push(col.field);
		
	});
	return invisibleCols;
	
};
sap.uiext.inbox.Inbox.prototype.getColumnVisibility = function() {
	return this.colList;
};

sap.uiext.inbox.Inbox.prototype.getSubstitutionEnabled = function() {
    return this.isSubstitutionEnabled
};

sap.uiext.inbox.Inbox.prototype.clearDrillDownFilter = function(){
    this.resetFilterView(true);
}

sap.uiext.inbox.Inbox.prototype.getTaskTableBinding = function() {
    var oListTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    return oListTable.getBinding('rows');
};

sap.uiext.inbox.Inbox.prototype.bindTaskExecutionURL = function(taskExecURLfnCallBack, taskExecURLStatusCallBack) {
    this.getTaskExecutionURLCallBack = taskExecURLfnCallBack;
    this.getTaskExecURLStatusCallBack = taskExecURLStatusCallBack;
    return this;
};

sap.uiext.inbox.Inbox.prototype.bindTaskTypeDynamicFilter = function(taskTypeDynamicFilterCallBack) {
    this.dynamicTaskTypeFilterCallBack = taskTypeDynamicFilterCallBack;
    return this;
};

sap.uiext.inbox.Inbox.prototype.bindSearch = function(searchCallBack) {
    this.searchCallBack = searchCallBack;
    return this;
};

sap.uiext.inbox.Inbox.prototype.bindSubstitutedUsers = function(sPath){
    var dropdownComboBox3 = sap.ui.getCore().byId(this.getId() + '--' + 'filterComboBox3');
    var onBehalfOf = sap.ui.getCore().byId(this.getId() + '--' + 'onBehalfOfListItem');
    if(onBehalfOf === undefined) {
        onBehalfOf = new sap.ui.core.ListItem(this.getId() + '--' + 'onBehalfOfListItem');
    }
    onBehalfOf.setText(this._oBundle.getText("SUBSTITUTION_INBOX_FILTER_ON_BEHALF_OF"));
    onBehalfOf.setKey("onBehalfOf");
    onBehalfOf.setEnabled(false);
    
    var allUsers = sap.ui.getCore().byId(this.getId() + '--' + 'li_allUsers');
    if(allUsers === undefined) {
        allUsers = new sap.ui.core.ListItem(this.getId() + '--' + 'li_allUsers');
    }   
    allUsers.setText(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
    allUsers.setKey("allUsers");

//  var onBehalfOf = '';
//    if(sap.ui.getCore().byId(this.getId() + '--' + 'onBehalfOfListItem') === undefined) {
//      var onBehalfOf = new sap.ui.core.ListItem(this.getId() + '--' + 'onBehalfOfListItem');
//    }
//    onBehalfOf.setText(this._oBundle.getText("SUBSTITUTION_INBOX_FILTER_ON_BEHALF_OF"));
//    onBehalfOf.setKey("onBehalfOf");
//    onBehalfOf.setEnabled(false);
//    
//    dropdownComboBox3.addItem(onBehalfOf);
//
//    var allUsers = '';
//    if(sap.ui.getCore().byId(this.getId() + '--' + 'li_allUsers') === undefined) {
//      allUsers = new sap.ui.core.ListItem(this.getId() + '--' + 'li_allUsers');
//    } 
//    allUsers.setText(this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
//  allUsers.setKey("allUsers");
//  
//  dropdownComboBox3.addItem(allUsers);

   /* var IDURIPart = sPath+"?$format=json&$skip=0&$top=100&$filter=((SubstitutedUsers eq true))&$inlinecount=allpages";*/
    var IDURIPart = sPath+"?$format=json&$skip=0&$top=100&$inlinecount=allpages";
    var requestURI = this.bpmSvcUrl + IDURIPart;
    var substitutes = "";
    var oModel = this.getCoreModel();
    var that = this;
    /****************/
    var requestOptions = {
        async:false,
        requestUri : requestURI,
        method : "GET",
        headers : {
            Accept : "application/json",
            "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
        }
    };
    OData.request(requestOptions, function(data, request) {
        // TO-DO : make this generic
        //substitutes = data.DisplayName;
        //dropdownComboBox3
        
        if(data.results.length > 0) {
            if(dropdownComboBox3.getEnabled() === false) {
                dropdownComboBox3.setEnabled(true);
            }

        dropdownComboBox3.removeAllItems();
        dropdownComboBox3.addItem(onBehalfOf);
        dropdownComboBox3.addItem(allUsers);
        
        for (var i = 0; i < data.results.length; i++) {
            substitutes +=data.results[i].DisplayName;
            //if(that.doesThisItemExistInComboBox(listOfItems, data.results[i].UniqueName) === false) {
                var listItem = new sap.ui.core.ListItem();
                listItem.setKey(data.results[i].UniqueName);
                listItem.setText(data.results[i].DisplayName);
                dropdownComboBox3.addItem(listItem);
            //}
          }
        } else {
            dropdownComboBox3.setEnabled(false);
        }
    }, function(error) {
        if(error.response.statusCode == 205){
            var eventParams = {statusCode : error.response.statusCode, statusText : error.response.statusText};
            oModel.fireRequestFailed(eventParams);
        }else{
        //TODO: use enums for messageType.
            that.showMessage("error", that._oBundle.getText("INBOX_MSG_ERR_EXUI") + this.id);
        }
    });
    
//  var newOModel = new sap.ui.model.odata.ODataModel(this.oModel.sServiceUrl,true);
//  dropdownComboBox3.setModel(newOModel);
//  
//  var oItemTemplate1 = new sap.ui.core.ListItem();
//  oItemTemplate1.bindProperty("text", "DisplayName");
//  oItemTemplate1.bindProperty("key", "UniqueName");
//  var oFilter = [];
//  var filter = new sap.ui.model.Filter("SubstitutedUsers", sap.ui.model.FilterOperator.EQ, "true");
//  oFilter.push(filter);
//  dropdownComboBox3.bindItems(sPath, oItemTemplate1, null, oFilter); 
    
    //var oModel = this.getCoreModel();
    //oModel.oData["UserInfoCollection('USER.PRIVATE_DATASOURCE.un:allUsers')"] = {"DisplayName":"All Users", "UniqueID":"USER.PRIVATE_DATASOURCE.un:allUsers","__metadata":{"type":"Inbox.UserInfo","uri":""}};
    
    /*var allUsers = new sap.ui.core.ListItem(this.getId() + '--' + "li_allUsers");
    allUsers.bindProperty("text",this._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
    allUsers.bindProperty("key","allUsers");
    dropdownComboBox3.addItem(allUsers);
    */
};

sap.uiext.inbox.Inbox.prototype.bindTaskTable = function(sPath, oTaskFilters) {
	var oInboxFilter = new sap.uiext.inbox.InboxFilters();
	var oInboxSecondaryFilter = new sap.uiext.inbox.InboxSecondaryFilters();
	oInboxFilter.setSecondaryFilter(oTaskFilters);
	this.bindTasks(sPath, oInboxFilter);
};

/**
* Bind the Inbox Task Collection
*
* @name sap.uiext.inbox.Inbox.prototype.bindTasks
* @function
* @param {string} 
 *         sPath
*         Binding path for the element displaying the tasks within the Inbox. This path is the Task Collection according to the TCM (Task Consumption Model)
* @param {object} 
 *         oOFilter
*         Predefined filter that is applied to the Task Collection before displaying the tasks in the Inbox. (sap.uiext.inbox.InboxFilters)
* @param {object} 
 *         oOSorter
*         {sap.ui.model.Sorter}Predefined sorter that is applied to the Task Collection before displaying the tasks in the Inbox. By default the tasks are sorted on 'CreatedOn' , descending, according to TCM.
* 
 * The sorter is not validated for the path being a valid TCM Entity Property. The sorter passed will be applied to the oData service as is. In case the entity Property in the path is a sortable property on the UI, the sorter indicator for that property will be visible.

* @type sap.uiext.inbox.Inbox
* @public
*/

sap.uiext.inbox.Inbox.prototype.bindTasks = function(sPath, oFilter, oSorter) {
	var oPrimaryFilter, oSecondaryFilter, oTaskFilters;
	
	// get the Primary (value in DropDown) and Secondary (Values in the Drill Down) filters
	if(oFilter){
		oPrimaryFilter = oFilter.getPrimaryFilter();
		oSecondaryFilter = oFilter.getSecondaryFilter();
    };
	
	//flag variable initialized and required for search.
	this.modelRefreshed = true;

	this.oModel = this.getModel();
	
	//Task Categories in the Table will be visible only on a flag. Change the visibility based on this flag.
    this._handleTaskCategoryVisibility();
    
    this._setCommentsVisibility();
	
  //TODO: the handle Task Category enablement is before the settting of the flags. Check whats happening here.
	this._initFlagsByModel();
	
	if (this.typeOfModel === "OData") {
		this.oModel.refreshSecurityToken();
	}

	//store the Service URL if the model is oData
    if (this.getHandleBindings()) {
        if (this.typeOfModel === "OData") {
            this.bpmSvcUrl = this.oModel.sServiceUrl;
        }
    }
    
    //Model related settings
    this.sCollectionPath = sPath;
    // Check for '/' in the path  (if any)
    if(!(/^\//).test(this.sCollectionPath))
        this.sCollectionPath = "/"+ this.sCollectionPath;
    
    this.oModel.attachRequestSent(this, function(oEvent, inBox) {
    	inBox._handleRequestSent(oEvent);
    });

    this.oModel.attachRequestCompleted(this, function(oEvent, inBox) {
    	inBox._handleRequestCompleted(oEvent);
    });
    
    this.oModel.attachRequestFailed(this, function(oEvent, inBox) {
    	inBox._handleRequestFailed(oEvent);
    });
    
    //initialize Table View
    var oModl= this.oModel;
    if(this.typeOfModel === "OData"){
    	var oServiceMetadata = oModl.getServiceMetadata()
    	if(oModl.sServiceUrl && oServiceMetadata){
    		this.oTcmMetadata.setServiceMetadata(oServiceMetadata);
    	}
    	
    }
    var table = this._initTableView();
    
    this._bindTaskActions();
   
    //Initialize rowrepeaterView
    var oTasksRowRepeater = this._initRowRepeaterView();
    var oRowRepeaterTemplate = this._getComponent('rrMainMatrixLayout');
    
    // Define default Initial Sort and Filter for Table Binding
    var initialSort = oSorter ? oSorter : new sap.ui.model.Sorter("CreatedOn", true);
    this._applySortOnView(initialSort);
    
    this._selectInitialValueinDropDown(oPrimaryFilter);

    // Reset Drill Down Filters if already applied.
    this.resetFilterView(false);
    
    //Display Row Repeater View if the default is RowRepeater View
    if (this.defaultView === this.constants.rowRepeaterView) {
    	//change this to get the RR button for segmented button
    	var viewButtonsSegBtns = sap.ui.getCore().byId(this.getId() + '--' + 'viewSelectionSegBtn');
    	if(viewButtonsSegBtns !== undefined){
    		var rrSegmentedButtonID = this.getId() + '--' + 'rrViewSelectionButton';
    		viewButtonsSegBtns.setSelectedButton(rrSegmentedButtonID);
    		var rrViewSelectionButton = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewSelectionButton');
    		viewButtonsSegBtns.fireSelect({selectedButtonId: rrSegmentedButtonID,triggeredFrom : 'initialView'});
    	}
    } 
    
    //initialize required variables for applying filters
    var toggleButton = sap.ui.getCore().byId(this.getId() + '--' + "filterViewButton");
    var $toggleButton = toggleButton.$();
    
    var aFiltersTobeApplied = [], mTempFilters;
    var oDefaultInitialDDFilter = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
    
  //temporary storage for the dropDwon filter applied
    var oInitialDDFilter = this.filtersToApply.dropDownFilter;
    if(oInitialDDFilter === undefined){
    	oInitialDDFilter = oDefaultInitialDDFilter;
    }
    
    if (oSecondaryFilter != null) {
    	
        // rendering change
        var oTaskFiltersTobeApplied = oSecondaryFilter.getFilterObjects();
        mTempFilters = oTaskFiltersTobeApplied.filterOperatorMap;
        
        var toggleOnFilter = mTempFilters ?  !toggleButton.getPressed() : toggleButton.getPressed();
        if(toggleOnFilter){
        	//call the event Handler method explicitly if the toggle Button is not visible, because the control does not fire the event in this case.
        	if(!$toggleButton.is(":visible")){
        		this.toggleFilterView(null , this);
        	}
        	toggleButton.setPressed(!toggleButton.getPressed());
        	if(toggleButton.getPressed() && $toggleButton.is(":visible"))
        	{
        		toggleButton.firePress();
        	}
        }
        
        
        if(mTempFilters){
        	
        	this.filtersToApply = oTaskFiltersTobeApplied.filtersAppliedMap;
        	aFiltersTobeApplied = this._selectFilterValuesinFacetFilterView(oSecondaryFilter, mTempFilters, oInitialDDFilter);

        }else{
        	//no Initial filters, so apply the computed DropDown Filter.
        	aFiltersTobeApplied = this._addFilterToFilterMetadata(oInitialDDFilter, aFiltersTobeApplied);
            this.filtersToApply.dropDownFilter = oInitialDDFilter;
        }
        
        if (this.defaultView === this.constants.rowRepeaterView){
        	var expand = this._getExpandParameters();
        	if(expand.length > 0 ){
        		oTasksRowRepeater.bindRows({path: this.sCollectionPath,template: oRowRepeaterTemplate, parameters: {expand: expand},sorter:initialSort,filters:aFiltersTobeApplied});
        	}else{
        		oTasksRowRepeater.bindRows({path: this.sCollectionPath,template: oRowRepeaterTemplate,sorter:initialSort,filters:aFiltersTobeApplied});
        	}
        }
        
        //TODO: store the table class level and access using getTable maybe
        var expand = this._getExpandParameters();
        if(expand.length > 0 ){
        	 table.bindRows({path: this.sCollectionPath
        			,parameters: {expand: expand},sorter:initialSort,filters:aFiltersTobeApplied});
        }else{
        	table.bindRows(this.sCollectionPath, initialSort, aFiltersTobeApplied);
        }
        
    } else {
        if(toggleButton.getPressed()){
        	//call the event Handler method explicitly if the toggle Button is not visible, because the control does not fire the event in this case.
        	/*if(!$toggleButton.is(":visible")){
        		this.toggleFilterView(null , this);
        	}*/
            toggleButton.setPressed(!toggleButton.getPressed());
            toggleButton.firePress();
        }
        this.filtersToApply.dropDownFilter = oInitialDDFilter;
        aFiltersTobeApplied = this._addFilterToFilterMetadata(oInitialDDFilter, aFiltersTobeApplied);

        //bind RowRepeater .. binding should not be here. introduce a concept of default Views, where the binding happens on the fly
        if (this.defaultView === this.constants.rowRepeaterView){
        	var expand = this._getExpandParameters();
        	if(expand.length > 0 ){
        		oTasksRowRepeater.bindRows({path: this.sCollectionPath,template: oRowRepeaterTemplate, parameters: {expand: expand},sorter:initialSort,filters:aFiltersTobeApplied});
        	}else{
        		oTasksRowRepeater.bindRows({path: this.sCollectionPath,template: oRowRepeaterTemplate,sorter:initialSort,filters:aFiltersTobeApplied});
        	}
        }
        
    	//bind Table
        var expand = this._getExpandParameters();
        if(expand.length > 0 ){
        	table.bindRows({path: this.sCollectionPath
        		,parameters: {expand: expand},sorter:initialSort,filters:aFiltersTobeApplied});
        }else{
        	table.bindRows(this.sCollectionPath, initialSort, aFiltersTobeApplied);
        }
    }
    //this.initialLoad = false;
    return this;
    /* Do we need this? */
    // return this.bindAggregation("inBox", sPath, undefined, undefined, aFilters);
};

sap.uiext.inbox.Inbox.prototype.localSearch = function(oEvent, inBox) {
	
   if (inBox.searchCallBack !== "" && inBox.searchCallBack !== undefined) {
        inBox.searchCallBack();
        return;
    }
    var oModel = inBox.getCoreModel();
    var srchText = jQuery.trim(oEvent.getParameter("query").toLowerCase());
    var srchRes = 0;
    var valueExists = 0;
    var oBindingInfo, currentViewElement;

    var currentViewElement = inBox._currentViewElement();

    // this variable maintains the latest odata state in the model
    if (inBox.modelRefreshed) {
    	oModel._original_data = oModel.oData;
    	inBox.modelRefreshed = false;
    }
    // this varaible maintains the latest state of the table bindings wrt selected filters
    if(!currentViewElement._originalKeys)
    	currentViewElement._originalKeys = currentViewElement.getBinding('rows').aKeys;


    var result = {};
    var keys = [];

    var oSearchIn = oModel._original_data;
    
    // check over the model's odata
    for ( var j in oModel._original_data) {
        var val = oModel._original_data[j];
        var valuePresent = false;
        var fieldValue;
        var taskMetadataProperty;
        // check over the table's row bindings
        for ( var l in currentViewElement._originalKeys) {
            if (j == currentViewElement._originalKeys[l]) {
                
                // Check for each field value of the row
                for ( var k = 0; k < sap.uiext.inbox.InboxConstants.mEntities.taskMetadata.properties.length; k++) {
                	 taskMetadataProperty = sap.uiext.inbox.InboxConstants.mEntities.taskMetadata.properties[k];
                     var fieldValue = eval('val.' + taskMetadataProperty);
                     if (!fieldValue  && taskMetadataProperty  === "TaskTitle") {
                	   fieldValue =  inBox._oBundle.getText("INBOX_TASK_TITLE_NOTAVAILABLE_MSG") ;
                   }
                   if (fieldValue != null) {
                    	//search on formatted value of dates
                        if (jQuery.type(fieldValue) === "date") {
                            fieldValue = (inBox.dateFormat(fieldValue));// .toLowerCase();
                        }
                        
                        //search on translated values of Priority & Status
                        if (taskMetadataProperty === "Priority" || taskMetadataProperty === "Status") {
                            fieldValue = fieldValue.replace("_", " ");
                            //special case handling for translated tooltips
                            if(fieldValue == "VERY HIGH")
                                fieldValue = inBox._oBundle.getText("INBOX_FILTER_PRIORITY_VERY_HIGH");
                            if(fieldValue == "HIGH")
                                fieldValue = inBox._oBundle.getText("INBOX_FILTER_PRIORITY_HIGH");
                            if(fieldValue == "MEDIUM")
                                fieldValue = inBox._oBundle.getText("INBOX_FILTER_PRIORITY_MEDIUM");
                            if(fieldValue == "LOW")
                                fieldValue = inBox._oBundle.getText("INBOX_FILTER_PRIORITY_LOW");
                            if(fieldValue == "READY")
                                fieldValue = inBox._oBundle.getText("INBOX_FILTER_STATUS_READY");
                            if(fieldValue == "RESERVED")
                                fieldValue = inBox._oBundle.getText("INBOX_FILTER_STATUS_RESERVED");
                            if(fieldValue == "IN PROGRESS")
                                fieldValue = inBox._oBundle.getText("INBOX_FILTER_STATUS_IN_PROGRESS");

                        }
                        fieldValue = fieldValue.toLowerCase();
                        if (fieldValue.indexOf(srchText) >= 0)
                            valuePresent = true;
                    }
                }
                
                //Check within navigation properties
                //Under Description
                var descEntry, descDataEntry;
                if(!valuePresent){
                	if(val.Description){
                		//TODO: Time Being not supporting search on description for Gateway Services.
                		// In Gateway Description is an Object
                		/*Ex: Description: Object{
              		 										__deferred: 
																						uri: "URL"
                		 */
                		// In BPM Description is an Array
                		/*Ex: Description: Object {
              													__list: Array[1]
              																		0: "URL"
                		 */
                		var oDescription = val.Description;
                		valuePresent= inBox._getValuePresent(oModel.oData,oDescription,sap.uiext.inbox.InboxConstants.NAVIGATION_DESCRIPTION,srchText);
                	}
                } 
                //Under Task Definition Data
                var defEntry, defData;
            	if(!valuePresent){
            		if(val.TaskDefinitionData){
            			//TODO: Time Being not supporting search on TaskDefinitionData for Gateway Services same reason as above.
            			var oTaskDefinitionData = val.TaskDefinitionData;
            			valuePresent= inBox._getValuePresent(oModel.oData,oTaskDefinitionData,sap.uiext.inbox.InboxConstants.NAVIGATION_TASKDEFINITION,srchText);
            			}            		
            		}
            	
            	//For Custom Attributes
                if(!valuePresent){
                    if(val.CustomAttributeData){
                        var aCustomAttributeKeys = val.CustomAttributeData.__list;
                        if(aCustomAttributeKeys !== undefined){
                            for(var i = 0; i < aCustomAttributeKeys.length; i++ ){
                                var customAttributeKey = aCustomAttributeKeys[i];
                                var fieldValue = oSearchIn[customAttributeKey].Value;
                                //TODO: in two places... refactor
                                if (fieldValue != null || fieldValue != undefined) {
                                    fieldValue = fieldValue.toLowerCase();
                                    if (fieldValue.indexOf(srchText) >= 0)
                                        valuePresent = true;
                                }
                            }
                        }
                    }
                }
                // If the value is present, maintain the row's id
                if (valuePresent) {
                	//add task
                	var key = String(keys.length);
                	result[key] = val; // create a condensed result without gaps
                	keys.push(key); // collect keys
                	//add the description
                	if(val.Description){
                		var oDescription = val.Description;
                		if(oDescription && oDescription.__list instanceof Array){ //It is array in case of BPM OData service.
                			descEntry = oDescription.__list[0];
                			descDataEntry = oModel.oData[descEntry];
                			if(descDataEntry)
                				result[descEntry] = descDataEntry;
                		}
                		else{ //To support description as Object 
                			var oDescriptionObject= oDescription.__ref;
                			if(oDescription && oDescriptionObject){
                				descDataEntry = oModel.oData[oDescriptionObject];
                    			if(descDataEntry)
                    				result[oDescriptionObject] = descDataEntry;
                			}
                		}
                	}
                	//add the task definition data
                	if(val.TaskDefinitionData){
                		var oTaskDefinitionData = val.TaskDefinitionData;
                		if(oTaskDefinitionData && oTaskDefinitionData.__list instanceof Array){ //It is array in case of BPM OData service.
                			defEntry = val.TaskDefinitionData.__list[0];
                			defData = oModel.oData[defEntry];
                			if(defData)
                				result[defEntry] = defData;
                		}
                		else{ //To support definition as Object 
                			var oDefinitionObject= oTaskDefinitionData.__ref;
                			if(oTaskDefinitionData && oDefinitionObject){
                				defData = oModel.oData[oDefinitionObject];
                				if(defData)
                				result[oDefinitionObject]= defData;
                			}
                		}
                	}
                }
            }
        }
    }
    oModel.oData = result;
    // update the bookkeeping in each affected binding, here only for the Table.rows

    oBindingInfo = currentViewElement.mBindingInfos["rows"];
    
    if (oBindingInfo && oBindingInfo.binding) {
        oBindingInfo.binding.iLength = keys.length; // update the length information
        oBindingInfo.binding.aKeys = keys; // update the key information for the filtered result
        // oBindingInfo.binding.checkUpdate();
        inBox.currentView === inBox.constants.tableView ? currentViewElement.rerender():currentViewElement.updateRows(false);
    }
    var iResultLength = currentViewElement.getBinding('rows').iLength;
    inBox._updatePaginator(iResultLength);
    if (iResultLength <= 0)
    //TODO: use enums for messageType.
        inBox.showMessage("info", inBox._oBundle.getText("INBOX_MSG_FOR_NO_DATA"));
    else
        inBox.deleteMessage();
    inBox.fireODataRequestCompleted({bindingLength:iResultLength,appliedFilter:inBox._oBundle.getText("INBOX_SEARCH_RESULTS_TEXT")});
};

sap.uiext.inbox.Inbox.prototype.applyFilterOnResponse = function(selectedContextsbeforeReq, rebind) {
 // TODO utility method - duplicate code..
    // var oModel = sap.ui.getCore().getModel();
    var oModel = this.getCoreModel();
    var that = this;
    this.showBusyLoader();
    var oListBinding;
    var currentViewElement;
    if(that.currentView === that.constants.tableView){
    	currentViewElement = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    	if (currentViewElement !== undefined) {
            if (selectedContextsbeforeReq != undefined && selectedContextsbeforeReq != null) {
                that.selectedContexts = selectedContextsbeforeReq;
            } else {
                that.selectedContexts = [];
            }
            oListBinding = currentViewElement.getBinding('rows');
    	}
    }else if(this.currentView === that.constants.rowRepeaterView){
    	currentViewElement = sap.ui.getCore().byId(this.getId() + '--'+'tasksRowRepeater');
    	if (currentViewElement !== undefined) {
    		currentViewElement.gotoPage(1);
    		var rowRepeaterPaginator = this._getComponent('rowRepeaterPaginator');
    		if(rowRepeaterPaginator){
    			rowRepeaterPaginator.destroy();
    		}
            oListBinding = currentViewElement.getBinding('rows');
    	}
    }
    
    var oFilter = [];
    if (oListBinding != null && oListBinding != undefined) {
    	for ( var item in that.filtersToApply) {
    		var filter = that.filtersToApply[item];
    		if(jQuery.isArray(filter)){
    			oFilter = oFilter.concat(filter)
    		}else
    			oFilter.push(filter);
    	}
    	if(this.currentView === that.constants.rowRepeaterView && rebind){
    		var oSorter = oListBinding.oSorter;
    		var oRowRepeaterSortCombobox = that._getComponent('sortByFilterComboBox');
    		var sRRSelectedItemID = oRowRepeaterSortCombobox.getSelectedItemId();
    		if(sRRSelectedItemID){
    			var sSorterID = that.constants.mRRSortMap[that._removeParentID(sRRSelectedItemID)];
    			oSorter = sSorterID?that._getComponent(sSorterID).getSorter():oSorter;
    		}
    		var oTemplate = that._getComponent("rrMainMatrixLayout");
    		var expand = that._getExpandParameters();
     	    if(expand.length > 0 ){
     	    	currentViewElement.bindRows({path: that.sCollectionPath,template: oTemplate, parameters: {expand: expand},sorter:oSorter,filters:oFilter});
     	    }else{
     	    	currentViewElement.bindRows({path: that.sCollectionPath,template: oTemplate,sorter:oSorter,filters:oFilter});
     	    }
    	}else{
    		oListBinding.filter(oFilter, sap.ui.model.FilterType.Control);
    	}
    }
    
    // variables maintained for search
    that.modelRefreshed = true;
    if(oListBinding){
    	currentViewElement._originalKeys = oListBinding.aKeys;
    }
    this.hideBusyLoader();
};

sap.uiext.inbox.Inbox.prototype.refreshTaskList = function(oEvent, inBox) {
	inBox.bRefreshStartFlag = true;
	// FIXME:this causes a [problem to reset the gif in case of json/xml
    if (!inBox.getHandleBindings()) {
        inBox.fireRefresh(oEvent);
    } else {
        /*var refreshButton = sap.ui.getCore().byId(inBox.getId() + '--' + 'refreshButton');
        refreshButton.setSrc(inBox._imgResourcePath + sap.uiext.inbox.InboxConstants.refreshImageGif);*/
    }
    var oModel = inBox.getCoreModel();
    var oTable = sap.ui.getCore().byId(inBox.getId() + '--' + 'listViewTable');
    var oRowRepeater = sap.ui.getCore().byId(inBox.getId() + '--' + 'tasksRowRepeater');

    var oListBinding;
    var rowContext;
    var selectedIndices = inBox.getlistTableSelectedIndices();
    var selectedTasks = [];

    jQuery.each(selectedIndices, function(i, selIndex) {
        rowContext = oTable.getContextByIndex(selIndex);
        selectedTasks.push(rowContext);
    });
    
    var currentViewElement;
    if(inBox.currentView === sap.uiext.inbox.InboxConstants.tableView){
    	currentViewElement = oTable;
    }else if(inBox.currentView === sap.uiext.inbox.InboxConstants.rowRepeaterView){
    	currentViewElement = oRowRepeater;
    }

    if (currentViewElement != undefined) {
        if (selectedTasks != undefined && selectedTasks != null) {
            inBox.selectedContexts = selectedTasks;
        } else {
            inBox.selectedContexts = [];
        }

        
        oListBinding = currentViewElement.getBinding('rows');

        var oFilter = [];

        if (oListBinding != null && oListBinding != undefined) {
            for ( var item in inBox.filtersToApply) {
                var filter = inBox.filtersToApply[item];
                if(jQuery.isArray(filter)){
                    oFilter = oFilter.concat(filter)
                }else
                    oFilter.push(filter);
            }
            oListBinding.filter(oFilter, sap.ui.model.FilterType.Control);
        }
    }
    // variables maintained for search
    inBox.modelRefreshed = true;
    currentViewElement._originalKeys = currentViewElement.getBinding('rows').aKeys;
    inBox.resetSearchCriteria();
    
    var dropdownComboBox3 = sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3');
    if(dropdownComboBox3 != undefined && dropdownComboBox3.getEnabled() === true) {
    inBox.bindSubstitutedUsers("/SubstitutedUsersCollection");
    }
    var refreshedOnText = sap.ui.getCore().byId(inBox.getId() + '--' + "refreshOnText");
    if(refreshedOnText){
    	 inBox.lastRefreshedOnDateTime = new Date();
    	 var refreshedTime = inBox._getFormattedRefreshOnDateTime();
    	 refreshedOnText.setText(inBox._oBundle.getText("INBOX_TEXT_ON") + sap.uiext.inbox.InboxConstants.SPACE + refreshedTime);
    	 refreshedOnText.setTooltip(inBox._getFormattedTooltipForLastRefreshedTime());
    }
};

sap.uiext.inbox.Inbox.prototype.applyDropDownFilter1 = function(oEvent, inBox) {
    var listItemID = oEvent.getSource().getSelectedItemId();
    
    if (listItemID === inBox.getId() + '--' + "li_substitutedTasks") {
        sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').setEnabled(false);
        inBox.filtersToApply.dropDownFilter1 = new sap.ui.model.Filter("IsSubstituted", sap.ui.model.FilterOperator.EQ, true);
        inBox.bindSubstitutedUsers("/SubstitutedUsersCollection");
        sap.ui.getCore().byId(inBox.getId() + '--' + 'onBehalfOfListItem').setEnabled(false);
        
    }else{
        //sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').setValue(inBox._oBundle.getText("INBOX_DROP_DOWN_VALUE_ALL_USERS"));
        sap.ui.getCore().byId(inBox.getId() + '--' + 'onBehalfOfListItem').setEnabled(true);
        sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').setSelectedItemId(inBox.getId() + '--' + 'onBehalfOfListItem');
        sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').setEnabled(false);
        delete inBox.filtersToApply.dropDownFilter3;
        
        if (listItemID === inBox.getId() + '--' + "li_allTasks") {
            delete inBox.filtersToApply.dropDownFilter1;
        }else if (listItemID === inBox.getId() + '--' + "li_myTasks") {
            inBox.filtersToApply.dropDownFilter1 = new sap.ui.model.Filter("IsSubstituted", sap.ui.model.FilterOperator.EQ, false);         
        }
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyDropDownFilter3 = function(oEvent, inBox) {
    var listItemID = oEvent.getSource().getSelectedItemId();
    
    if (listItemID === inBox.getId() + '--' + "li_allUsers") {
        delete inBox.filtersToApply.dropDownFilter3;
    }else{
        inBox.filtersToApply.dropDownFilter3 = new sap.ui.model.Filter("SubstitutedUser", sap.ui.model.FilterOperator.EQ, sap.ui.getCore().byId(inBox.getId() + '--' + 'filterComboBox3').getSelectedKey());
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyDropDownFilter = function(oEvent, inBox) {
    var isCompTasksSelectedinDD = false;
    var listItemID = oEvent.getSource().getSelectedItemId();
    var statusAttr = sap.ui.getCore().byId(inBox.getId() + '--' + "INBOX_FILTER_STATUS");
    var oFilterDateTime = sap.ui.getCore().byId(inBox.getId() + '--' + "INBOX_FILTER_CREATION_DATE");
    var oFilterDueDateTime = sap.ui.getCore().byId(inBox.getId() + '--' + "INBOX_FILTER_DUE_DATETIME");
    var oFacet = sap.ui.getCore().byId(inBox.getId()+'--'+"filterFacet");

    // clear search text for every new filter select
    inBox.resetSearchCriteria();

    if (listItemID === inBox.getId() + '--' + "li_completedTasks") {
    	isCompTasksSelectedinDD = true;
        inBox._deleteCustomActions();
        if (statusAttr !== undefined) {
            statusAttr.setSelectedKeys(["sapUiFacetFilter_ALL"]);
            // statusAttr.setSelected(false);
            oFacet.removeList(statusAttr);
            
        }
    
        if (oFilterDateTime !== undefined) {
            oFilterDateTime.setSelectedKeys(["sapUiFacetFilter_ALL"]);
            oFacet.removeList(oFilterDateTime);
        }
        if (oFilterDueDateTime !== undefined) {
            oFilterDueDateTime.setSelectedKeys(["sapUiFacetFilter_ALL"]);
            oFacet.removeList(oFilterDueDateTime);
        }

        
        delete inBox.filtersToApply.resStat;
        delete inBox.filtersToApply.readyStat;
        delete inBox.filtersToApply.InProStat;
        delete inBox.filtersToApply.neCompleted;
        
        delete inBox.filtersToApply.today;
        delete inBox.filtersToApply.last30;
        delete inBox.filtersToApply.last15;
        delete inBox.filtersToApply.last7;
        
        inBox.clearFiltersForDueDate();
        
        //if(inBox.sProviderHost !== "ODATA4J")// has to be oData4j
            inBox.filtersToApply.dropDownFilter = [new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "COMPLETED")];
        //else
        //  inBox.filtersToApply.dropDownFilter = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.EQ, "COMPLETED");
    }
    if (listItemID === inBox.getId() + '--' + "li_openTasks") {
        if (statusAttr != undefined) {
            // statusAttr.setSelected(true);
            oFacet.addList(statusAttr);
        }
        if (oFilterDateTime != undefined && oFacet.indexOfList(oFilterDateTime) === -1) {
            oFacet.addList(oFilterDateTime);
        }
        if (oFilterDueDateTime !== undefined && oFacet.indexOfList(oFilterDueDateTime) === -1) {
        oFacet.addList(oFilterDueDateTime);
    }

        // this.filtersToApply['dropDownFilter'] would be anyways update with 'ne' completed filter
        delete inBox.filtersToApply.neCompleted;
        if ((inBox.filtersToApply.resStat === undefined) && (inBox.filtersToApply.readyStat === undefined)
                && (inBox.filtersToApply.InProStat === undefined)) {
            inBox.filtersToApply.dropDownFilter = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE,
                    "COMPLETED");
        } else {
            delete inBox.filtersToApply.dropDownFilter;
        }
        // this.filtersToApply['dropDownFilter'] = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE,
        // "COMPLETED");
    }
    if (listItemID === inBox.getId() + '--' + "li_overdueTasks") {
        if (statusAttr != undefined) {
            // statusAttr.setSelected(true);
            oFacet.addList(statusAttr);
        }
        
        if (oFilterDateTime != undefined && oFacet.indexOfList(oFilterDateTime) !== -1) {
            oFilterDateTime.setSelectedKeys(["sapUiFacetFilter_ALL"]);
            oFacet.removeList(oFilterDateTime);
        }
        if (oFilterDueDateTime !== undefined && oFacet.indexOfList(oFilterDueDateTime) !== -1) {
            oFilterDueDateTime.setSelectedKeys(["sapUiFacetFilter_ALL"]);
        oFacet.removeList(oFilterDueDateTime);
    }
        
        inBox.clearFiltersForDueDate();
        
        delete inBox.filtersToApply.today;
        delete inBox.filtersToApply.last30;
        delete inBox.filtersToApply.last15;
        delete inBox.filtersToApply.last7;
        var formD = inBox.getFormattedDateTimeOff(0, true);
        inBox.filtersToApply.dropDownFilter = new sap.ui.model.Filter("CompletionDeadLine", sap.ui.model.FilterOperator.LT,
                formD.toUTCString());
        if ((inBox.filtersToApply.resStat === undefined) && (inBox.filtersToApply.readyStat === undefined)
                && (inBox.filtersToApply.InProStat === undefined) && (inBox.filtersToApply.neCompleted === undefined) ) {       
            inBox.filtersToApply.neCompleted = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
        }
    }
    if (listItemID === inBox.getId() + '--' + "li_escalatedTasks") {
        if (statusAttr != undefined) {
            // statusAttr.setSelected(true);
            oFacet.addList(statusAttr);
        }
        if (oFilterDateTime != undefined && oFacet.indexOfList(oFilterDateTime) != -1) {
            oFilterDateTime.setSelectedKeys(["sapUiFacetFilter_ALL"]);
            oFacet.removeList(oFilterDateTime);
        }
        
        inBox.clearFiltersForDueDate();
        
        delete inBox.filtersToApply.today;
        delete inBox.filtersToApply.last30;
        delete inBox.filtersToApply.last15;
        delete inBox.filtersToApply.last7;
        inBox.filtersToApply.dropDownFilter = new sap.ui.model.Filter("IsEscalated", sap.ui.model.FilterOperator.EQ, true);
        if ((inBox.filtersToApply.resStat === undefined) && (inBox.filtersToApply.readyStat === undefined)
                && (inBox.filtersToApply.InProStat === undefined) && (inBox.filtersToApply.neCompleted === undefined) ) {       
            inBox.filtersToApply.neCompleted = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
        }
    }

    // hide standard action Buttons and Links if Completed Tasks are selected in DropdownBox  
    if (isCompTasksSelectedinDD == true){
    	inBox.hideAllActionButtonsandLinks();
    } else {
    	inBox.showAllActionButtonsandLinks();
    }
    
    var taskDefinitionFilter = inBox._isDrillDownFilterSelected('TaskDefinitionID');
    inBox._deleteCustomActions(null);
    if(!isCompTasksSelectedinDD && taskDefinitionFilter){
    	
    	/*var oTaskTypefilterList = inBox._getComponent("INBOX_FILTER_TASK_TYPE");
	    var aSelectedKeys = oTaskTypefilterList.getSelectedKeys();
		if(aSelectedKeys && aSelectedKeys.length === 1){
			//need to check if with the key we can store an object. This is too much of an overhead.
			var aItems = oTaskTypefilterList.getItems();
			var key = aSelectedKeys[0];
    		var sapOrigin;
			
	    	for (var j = 0; j < aItems.length; j++) {
		    	if (key === aItems[j].getKey()) {
			    	sapOrigin = aItems[j].data("SAP__Origin"); 
				}
			}
    		var aCustomActionsDefinitionArray = inBox._getCustomActionsDefinition(null,aSelectedKeys[0],sapOrigin);
	    	//create Columns
		    if(aCustomActionsDefinitionArray && aCustomActionsDefinitionArray.length>0)
		    	inBox._createCustomActionButtons(aCustomActionsDefinitionArray, false);
		
     }*/
    	inBox.applyFilterOnResponse(null,true);
	 }else{
		 inBox.applyFilterOnResponse(null);
	 }
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForPriority = function() {
    delete this.filtersToApply.lowPrio;
    delete this.filtersToApply.medPrio;
    delete this.filtersToApply.hiPrio;
    delete this.filtersToApply.veryhiPrio;
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForStatus = function() {
    delete this.filtersToApply.resStat;
    delete this.filtersToApply.readyStat;
    delete this.filtersToApply.InProStat;
    delete this.filtersToApply.neCompleted;
    // delete this.filtersToApply.openTasks;
    if (this.filtersToApply.dropDownFilter != undefined) {
    if ((this.filtersToApply["dropDownFilter"].sPath === "Status")
            && (this.filtersToApply["dropDownFilter"].sOperator === "NE")) {
        delete this.filtersToApply.dropDownFilter;
        }
    }
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForDueDate = function() {
  delete this.filtersToApply.dueDateToday;
  delete this.filtersToApply.dueDatenext30;
  delete this.filtersToApply.dueDatenext15;
  delete this.filtersToApply.dueDatenext7;
};

sap.uiext.inbox.Inbox.prototype.clearFiltersForDateTime = function() {
    delete this.filtersToApply.today;
    delete this.filtersToApply.last30;
    delete this.filtersToApply.last15;
    delete this.filtersToApply.last7;
};


sap.uiext.inbox.Inbox.prototype.clearFiltersForTaskType = function() {
    for ( var item in this.filtersToApply ){ 
        if(this.filtersToApply[item].sPath === 'TaskDefinitionID') {
            delete this.filtersToApply[item];
        }
    }
};



sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForPriority = function(oEvent, inBox) {
    var filterOperatorPrioLow, filterOperatorPrioMedium, filterOperatorPrioHigh, filterOperatorPrioVeryHigh;
    var attributeChanged = oEvent.getParameter("selectedItems");
    inBox.resetSearchCriteria();
    inBox.clearFiltersForPriority();
    for(var i=0; i<attributeChanged.length; i++) {
    switch(attributeChanged[i].getId()){
    case inBox.getId()+'--'+"INBOX_FILTER_PRIORITY_LOW":
        if (this.filterOperatorPrioLow === undefined )
            filterOperatorPrioLow = inBox.inboxUtils._getPriorityFilters("LOW",inBox.sProviderHost);
        inBox.filtersToApply['lowPrio']=filterOperatorPrioLow;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_PRIORITY_MEDIUM":
        if (filterOperatorPrioMedium === undefined)
            filterOperatorPrioMedium = inBox.inboxUtils._getPriorityFilters("MEDIUM",inBox.sProviderHost);
        inBox.filtersToApply['medPrio']=filterOperatorPrioMedium;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_PRIORITY_HIGH":
        if (filterOperatorPrioHigh === undefined)
            filterOperatorPrioHigh = inBox.inboxUtils._getPriorityFilters("HIGH",inBox.sProviderHost);
        inBox.filtersToApply['hiPrio']=filterOperatorPrioHigh;
        break;
    case inBox.getId()+'--'+"INBOX_FILTER_PRIORITY_VERY_HIGH":
        if (filterOperatorPrioVeryHigh === undefined)
            filterOperatorPrioVeryHigh = inBox.inboxUtils._getPriorityFilters("VERY_HIGH",inBox.sProviderHost);
        inBox.filtersToApply['veryhiPrio']=filterOperatorPrioVeryHigh;
        break;    
    };
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForStatus = function(oEvent, inBox) {
    var filterOperatorStatusRES, filterOperatorStatusREADY, filterOperatorStatusINPRO, filterOperatorStatusOPENTASKS;
    inBox.resetSearchCriteria();
    inBox.clearFiltersForStatus();
    
    if(oEvent.getParameter("all")){
        filterOperatorStatusOPENTASKS = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
        //inBox.filtersToApply['dropDownFilter'] = filterOperatorStatusOPENTASKS;
        inBox.filtersToApply['neCompleted'] = filterOperatorStatusOPENTASKS;
    }else{
            var attributeChanged = oEvent.getParameter("selectedItems");
            for(var i=0; i<attributeChanged.length; i++) {
            switch(attributeChanged[i].getId()){
        
            case inBox.getId()+'--'+"INBOX_FILTER_STATUS_RESERVED":
                if (filterOperatorStatusRES === undefined)
                    filterOperatorStatusRES = inBox.inboxUtils._getStatusFilters("RESERVED",inBox.sProviderHost);
                inBox.filtersToApply['resStat']=filterOperatorStatusRES;
                break;
            case inBox.getId()+'--'+"INBOX_FILTER_STATUS_READY":
                if (filterOperatorStatusREADY === undefined)
                    filterOperatorStatusREADY = inBox.inboxUtils._getStatusFilters("READY",inBox.sProviderHost);
                inBox.filtersToApply['readyStat']=filterOperatorStatusREADY;
                break;
            case inBox.getId()+'--'+"INBOX_FILTER_STATUS_IN_PROGRESS":
                if (filterOperatorStatusINPRO === undefined)
                    filterOperatorStatusINPRO = inBox.inboxUtils._getStatusFilters("IN_PROGRESS",inBox.sProviderHost);
                inBox.filtersToApply['InProStat']=filterOperatorStatusINPRO;
                break;
            };
            }
    }
    inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForDateTime = function(oEvent, inBox) {
    var filterOperatorDateToday, filterOperatorDate30, filterOperatorDate15, filterOperatorDate7;
    var todayAttr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DATETIME_TODAY");
    var last30Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DATETIME_MONTH"); 
    var last15Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DATETIME_15DAYS"); 
    var last7Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DATETIME_WEEK"); 
    var attributeChanged = oEvent.getParameter("selectedItems");
    inBox.resetSearchCriteria();
    inBox.clearFiltersForDateTime();
    var dropdownbox =  sap.ui.getCore().byId(inBox.getId()+'--'+'filterComboBox2');
    var isCompTasksSelected = false;
    if(dropdownbox.getSelectedItemId() === inBox.getId()+'--'+'li_completedTasks'){
        isCompTasksSelected = true;
    }
    for(var i=0; i<attributeChanged.length; i++) {
        switch(attributeChanged[i].getId()){
        case inBox.getId()+'--'+"INBOX_FILTER_DATETIME_TODAY":
            var formD = inBox.getFormattedDateTimeOff(0, false);
            // TODO: Can remove this check, one because we checking against null which is not valid in JavaScript,
            // two the variables are always undefined as they are created inside this function,
            // and the function is called for every selection.
            if (filterOperatorDateToday === undefined){
                    filterOperatorDateToday = new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD.toUTCString());
            }
            inBox.filtersToApply['today']=filterOperatorDateToday;

            // Clear the filter from the stack.
            delete inBox.filtersToApply.last30;
            delete inBox.filtersToApply.last15;
            delete inBox.filtersToApply.last7;
            break;
        case inBox.getId()+'--'+"INBOX_FILTER_DATETIME_MONTH":
            var formD = inBox.getFormattedDateTimeOff(30, false);
            if (filterOperatorDate30 === undefined){
                    filterOperatorDate30 = new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD.toUTCString());
            }
            inBox.filtersToApply['last30']=filterOperatorDate30;
            // Clear the filter from the stack.
            delete inBox.filtersToApply.today;
            delete inBox.filtersToApply.last15;
            delete inBox.filtersToApply.last7;
            break;
        case inBox.getId()+'--'+"INBOX_FILTER_DATETIME_15DAYS":
            var formD = inBox.getFormattedDateTimeOff(15, false);
            if (filterOperatorDate15 === undefined){
                    filterOperatorDate15 = new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD.toUTCString());
            }
            inBox.filtersToApply['last15']=filterOperatorDate15;

            delete inBox.filtersToApply.today;
            delete inBox.filtersToApply.last30;
            delete inBox.filtersToApply.last7;
            break;
        case inBox.getId()+'--'+"INBOX_FILTER_DATETIME_WEEK":
            var formD = inBox.getFormattedDateTimeOff(7, false);
            if (filterOperatorDate7 === undefined){
                    filterOperatorDate7 = new sap.ui.model.Filter("CreatedOn", sap.ui.model.FilterOperator.GE, formD.toUTCString());
            }
            inBox.filtersToApply['last7']=filterOperatorDate7;
            delete inBox.filtersToApply.today;
            delete inBox.filtersToApply.last30;
            delete inBox.filtersToApply.last15;
            break;
        };

    }
    inBox.applyFilterOnResponse(null);
};


sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForTaskType = function(oEvent, inBox) {
	//this.data(null);
	var constants = inBox.constants;
// var filterOperatorStatusRES, filterOperatorStatusREADY, filterOperatorStatusINPRO;
    inBox.resetSearchCriteria();
    inBox.clearFiltersForTaskType();
    var isOdataModelBound = (inBox.typeOfModel === "OData");
    if(isOdataModelBound && inBox.currentView === inBox.constants.tableView){
    	inBox._clearCustomAttributeSort();
    }
    if(!oEvent.getParameter("all")) {
        var attributeChanged = oEvent.getParameter("selectedItems");
        inBox.bRefreshTaskTypes = false;
        if(isOdataModelBound){
        	inBox._createCustomAttributes(attributeChanged);
        	inBox._createCustomActions(attributeChanged);
        }

        for(var i=0; i<attributeChanged.length; i++) {
            inBox.filtersToApply[attributeChanged[i].getKey()]=new sap.ui.model.Filter("TaskDefinitionID", sap.ui.model.FilterOperator.EQ, decodeURIComponent(attributeChanged[i].getKey()));
        };
    }else{
        if(inBox.isCustomActionsEnabled === true && isOdataModelBound ){
            inBox._deleteCustomActions(null);
        }
        if(inBox.isCustomAttributesEnabled === true && isOdataModelBound){
            // change to delete all columns other than the fixed..... 
            inBox._deleteCustomAttributeColumns(null);
            inBox._modifyListBindingForExpand(false,constants.customAttributeNavigationParam);
         }
    }
    var rebind = (inBox.currentView === inBox.constants.rowRepeaterView)?true:false
    inBox.applyFilterOnResponse(null, rebind);
};



sap.uiext.inbox.Inbox.prototype._getCustomAttributeMetaData = function(sTaskDefinitionID,sSapOriginID){
	var that = this;
	var constants = this.constants;
	var oTaskDefinitionTCMMetadata = constants.TaskDefinitionCollection;
	
	var oCustomAttributeMetaDataArrayMap = constants.oTaskDefinitionCustomAttributesMap;
	var aCustomAttributeMetaDataArray = oCustomAttributeMetaDataArrayMap[sTaskDefinitionID];
	
	if(!aCustomAttributeMetaDataArray){
		var sURIPart = constants.forwardSlash 
								+ oTaskDefinitionTCMMetadata.entityName 
									+ "(" 
										+ oTaskDefinitionTCMMetadata.properties.taskDefnID 
												+"='" 
													+ sTaskDefinitionID + "'," 
														+ constants.sapOrigin + 
																"='" + sSapOriginID + 
																		"')" +
																				constants.forwardSlash 
																					+  oTaskDefinitionTCMMetadata.navParam.customAttrDefn;
		
		var sRequestURI = this.bpmSvcUrl + sURIPart;
		aCustomAttributeMetaDataArray = [];
		var oModel = this.getCoreModel();
		
	    var oRequestOptions = {
	        async:false,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON,
	            "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
	        }
	    };
    
	    OData.request(oRequestOptions, function(data, request) {
	        
	        // TO-DO : make this generic
	        var aCustomAttributeDefinitionArray = data.results;
	        for(var i=0;i<aCustomAttributeDefinitionArray.length;i++){
	            var oCustomAttributeDefn = {};
	            oCustomAttributeDefn.Name = 	aCustomAttributeDefinitionArray[i].Name;
	            oCustomAttributeDefn.Type =  aCustomAttributeDefinitionArray[i].Type;
	            oCustomAttributeDefn.Label = aCustomAttributeDefinitionArray[i].Label;
	            aCustomAttributeMetaDataArray.push(oCustomAttributeDefn);
	        }
	        oCustomAttributeMetaDataArrayMap[sTaskDefinitionID] = aCustomAttributeMetaDataArray;
	    }, function(error) {
	        that.showMessage("error", this._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
	    });
	}
    return aCustomAttributeMetaDataArray;
};

sap.uiext.inbox.Inbox.prototype._getCustomAttributeData = function(sTaskInstanceID,sSapOriginID){
	var that = this;
	var constants = this.constants;
	var oTaskCollectionTCMMetadata = constants.TaskCollection;
	
    var oCustomAttributeValuesMap = constants.oTaskInstanceCustomAttributeValuesMap;
	var oCustomAttributesValues = oCustomAttributeValuesMap[sTaskInstanceID];
	if(!oCustomAttributesValues){
		var sURIPart = constants.forwardSlash 
								+ oTaskCollectionTCMMetadata.entityName 
										+ "(" 
											+ oTaskCollectionTCMMetadata.properties.instanceID
													+ "='"
															+ sTaskInstanceID + 
																"',"
																	+ constants.sapOrigin 
																		+ "='" 
																			+ sSapOriginID 
																					+ "')" 
																						+ constants.forwardSlash
																							+ oTaskCollectionTCMMetadata.navParam.customAttrValues;
    
		var sRequestURI = this.bpmSvcUrl + sURIPart;
		var oCustomAttributesValues = {};
		var oModel = this.getCoreModel();
		
	    var oRequestOptions = {
	        async:false,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON,
	            "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
	        }
	    };
    
	    OData.request(oRequestOptions, function(data, request) {
        
        // TO-DO : make this generic
	    	var aCustomAttributeData = data.results;
	    	for(var i=0;i<aCustomAttributeData.length;i++){
	    		oCustomAttributesValues[aCustomAttributeData[i].Name] = aCustomAttributeData[i].Value;
	    		oCustomAttributeValuesMap[sTaskInstanceID] = oCustomAttributesValues;
	    	}
	    }, function(error) {
	    	that.showMessage("error", this._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
	    });
	}
    return oCustomAttributesValues;
};

sap.uiext.inbox.Inbox.prototype._createCustomAttributeColumns= function(customAttributeDefinitionArray){
	var that = this;
	var oTable = this._getComponent('listViewTable');
	var oModel = this.getCoreModel();
	var columnIndex = 0;
	var NAME = "name";
	//check if columns present and if not add
	for (var i = 0; i < customAttributeDefinitionArray.length; i++) {
		var oColumn = this._getComponent(that.inboxUtils.scrub(customAttributeDefinitionArray[i].Name));
		var columnTextAlignment = sap.ui.core.TextAlign.Left;
		var customAttrDefArrayType = customAttributeDefinitionArray[i].Type;
		if(customAttrDefArrayType)
			if (jQuery.inArray(customAttrDefArrayType.replace("class ", ""),sap.uiext.inbox.InboxConstants.rightAlignedTypes) != -1)
				columnTextAlignment = sap.ui.core.TextAlign.Right;
		if(!oColumn){
			oTable.insertColumn(
		            new sap.ui.table.Column({id:that.getId() + '--' +that.inboxUtils.scrub(customAttributeDefinitionArray[i].Name)})
		            .data("customAttrName", customAttributeDefinitionArray[i].Name)
		            .setLabel(new sap.ui.commons.Label({text: customAttributeDefinitionArray[i].Label,tooltip: customAttributeDefinitionArray[i].Label, design : sap.ui.commons.LabelDesign.Bold}))
		            .setTemplate(
		            	new sap.ui.commons.TextView({id:that.getId() + '--' +that.inboxUtils.scrub(customAttributeDefinitionArray[i].Name) + 'textView'}).data(NAME,customAttributeDefinitionArray[i].Name).bindProperty("text", "CustomAttributeData", function(value){
			            	var path = that.sCollectionPath.replace(/^\//,"")+"('"+this.data(NAME)+"')";
			            	var returnValue = "";
			                if(value !== undefined && value !== "" && value !== null){
			                	for(var i=0;i<value.length;i++){
			                		//refine this
			                		var oCustomAttribute = oModel.oData[value[i]] === undefined ? oModel._original_data[value[i]] : oModel.oData[value[i]];
			                		//TODO due to search oModel.oData values are getting replaced. So adding a workaround here. Needs to be properly investigated.
			                		if(oCustomAttribute.Name === this.data(NAME)){
			                			returnValue = oCustomAttribute.Value;
			                			break;
				                    }
			                	}
			                }
			                return returnValue;
		            }).setTextAlign(columnTextAlignment))
		            .setFlexible(true)
		            .bindProperty("sortProperty","CustomAttributeData",function(value){
		            	return "CustomAttributeData/"+this.data("customAttrName");
		            }),i+1
		    );
    	}else{
    		if(oTable.indexOfColumn(oColumn) === -1){
    			var oLabel = oColumn.getLabel();
    			if(oLabel.getText() !== customAttributeDefinitionArray[i].Label){
    				oLabel.setText(customAttributeDefinitionArray[i].Label);
    			}
    			oTable.insertColumn(oColumn,i+1);
    		}
    	}
    }
	this.resizeColumns();
};


sap.uiext.inbox.Inbox.prototype._createCustomAttributeLayout= function(customAttributeDefinitionArray){
	var that = this;
	var oTable = this._getComponent('listViewTable');
	var oModel = this.getCoreModel();
	var columnIndex = 0;
	//check if columns present and if not add
	for (var i = 0; i < customAttributeDefinitionArray.length; i++) {
		var oColumn = this._getComponent(that.inboxUtils.scrub(customAttributeDefinitionArray[i].Name));
		if(!oColumn){
			oTable.insertColumn(
		            new sap.ui.table.Column({id:that.getId() + '--' +that.inboxUtils.scrub(customAttributeDefinitionArray[i].Name)})
		            .data("customAttrName", customAttributeDefinitionArray[i].Name)
		            .setLabel(new sap.ui.commons.Label({text: customAttributeDefinitionArray[i].Label, design : sap.ui.commons.LabelDesign.Bold}))
		            .setTemplate(
		            	new sap.ui.commons.TextField({name:customAttributeDefinitionArray[i].Name, editable:false}).bindProperty("value", "CustomAttributeData", function(value){
			            	var path = that.sCollectionPath.replace(/^\//,"")+"('"+this.getName()+"')";
			            	var returnValue = "";
			                if(value !== undefined && value !== "" && value !== null){
			                	for(var i=0;i<value.length;i++){
			                		//refine this
			                		var oCustomAttribute = oModel.oData[value[i]] === undefined ? oModel._original_data[value[i]] : oModel.oData[value[i]];
			                		//TODO due to search oModel.oData values are getting replaced. So adding a workaround here. Needs to be properly investigated.
			                		if(oCustomAttribute.Name === this.getName()){
				                        returnValue = oCustomAttribute.Value;
				                    }
			                	}
			                }
			                return returnValue;
		            }))
		            .setFlexible(true)
		            .bindProperty("sortProperty","CustomAttributeData",function(value){
		            	return "CustomAttributeData/"+this.data("customAttrName");
		            }),i+1
		    );
    	}else{
    		if(oTable.indexOfColumn(oColumn) === -1){
    			var oLabel = oColumn.getLabel();
    			if(oLabel.getText() !== customAttributeDefinitionArray[i].Label){
    				oLabel.setText(customAttributeDefinitionArray[i].Label);
    			}
    			oTable.insertColumn(oColumn,i+1);
    		}
    	}
    }
};


sap.uiext.inbox.Inbox.prototype._deleteCustomAttributeColumns = function(customAttributeDefinitionArray){
    //TODO refine this to delete only the ones not in customAttributeDefinitionArray
    var oTable = this._getComponent('listViewTable');
    
    var aTableColumns = oTable.getColumns();
    for (var i=0; i<aTableColumns.length; i++){
        var oColumn = aTableColumns[i];
        if(jQuery.inArray(this._removeParentID(oColumn.getId()),sap.uiext.inbox.InboxConstants.mEntities.taskMetadata.properties)===-1){
            oTable.removeColumn(oColumn);
        	oColumn.destroy();
        }
    }
};

sap.uiext.inbox.Inbox.prototype.applyDrillDownFilterForDueDate = function(oEvent, inBox) {
       var filterOperatorDueDateToday, filterOperatorDueDate30, filterOperatorDueDate15, filterOperatorDueDate7,filterOperatorDueDateLowerRange;
       var todayAttr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_TODAY");
       var next30Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_MONTH"); 
       var next15Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_15DAYS"); 
       var next7Attr = sap.ui.getCore().byId(inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_WEEK"); 
       inBox.resetSearchCriteria();
       inBox.clearFiltersForDueDate();

       if(!oEvent.getParameter("all")) {
         var attributeChanged = oEvent.getParameter("selectedItems");
         var fromDate = inBox.getFormattedDateTimeOff(0);
         //filterOperatorDueDateLowerRange = new sap.ui.model.Filter("CompletionDeadLine", sap.ui.model.FilterOperator.GE, fromDate.toUTCString());
         //inBox.filtersToApply['dueDateLowerRange']=filterOperatorDueDateLowerRange;
         
           for(var i=0; i<attributeChanged.length; i++) {
                  switch(attributeChanged[i].getId()){
                  case inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_TODAY":
                         var formD = inBox.getFormattedDueDateTimeOff(1);
                         if (filterOperatorDueDateToday === undefined){
                             filterOperatorDueDateToday = new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD.toUTCString()},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate.toUTCString()}], true);    
                         }
                         inBox.filtersToApply['dueDateToday']=filterOperatorDueDateToday;
    
                         // Clear the filter from the stack.
                         delete inBox.filtersToApply.next30;
                         delete inBox.filtersToApply.next15;
                         delete inBox.filtersToApply.next7;
                         break;
                  case inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_MONTH":
                         var formD = inBox.getFormattedDueDateTimeOff(30);
                         if (filterOperatorDueDate30 === undefined){
                               filterOperatorDueDate30 = new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD.toUTCString()},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate.toUTCString()}], true);
                         }
                         inBox.filtersToApply['dueDatenext30']=filterOperatorDueDate30;
                         // Clear the filter from the stack.
                         delete inBox.filtersToApply.dueDateToday;
                         delete inBox.filtersToApply.next15;
                         delete inBox.filtersToApply.next7;
                         break;
                  case inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_15DAYS":
                         var formD = inBox.getFormattedDueDateTimeOff(15);
                         if (filterOperatorDueDate15 === undefined){
                               filterOperatorDueDate15 = new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD.toUTCString()},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate.toUTCString()}], true);
                         }
                         inBox.filtersToApply['dueDatenext15']=filterOperatorDueDate15;
    
                         delete inBox.filtersToApply.dueDateToday;
                         delete inBox.filtersToApply.next30;
                         delete inBox.filtersToApply.next7;
                         break;
                  case inBox.getId()+'--'+"INBOX_FILTER_DUE_DATETIME_WEEK":
                         var formD = inBox.getFormattedDueDateTimeOff(7);
                         if (filterOperatorDueDate7 === undefined){
                               filterOperatorDueDate7 = new sap.ui.model.odata.Filter("CompletionDeadLine", [{operator:sap.ui.model.FilterOperator.LE, value1: formD.toUTCString()},{operator:sap.ui.model.FilterOperator.GE, value1:fromDate.toUTCString()}], true);
                         }
                         inBox.filtersToApply['dueDatenext7']=filterOperatorDueDate7;
                         delete inBox.filtersToApply.dueDateToday;
                         delete inBox.filtersToApply.next30;
                         delete inBox.filtersToApply.next15;
                         break;
                  };
    
           }
       }
       inBox.applyFilterOnResponse(null);
};

sap.uiext.inbox.Inbox.prototype._getSelectedContextsBeforeRequest = function() {
    return this.selectedContexts;
};

sap.uiext.inbox.Inbox.prototype.showAllActions = function() { // displaying standard action buttons and links if type of model is not OData
    var claimButton = sap.ui.getCore().byId(this.getId() + '--' + 'claimActionButton');
    var releaseButton = sap.ui.getCore().byId(this.getId() + '--' + 'releaseActionButton');
    var completeButton = sap.ui.getCore().byId(this.getId() + '--' + 'openActionButton');
    var forwardButton = sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton');
    var claimLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewClaimAction');
    var releaseLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewReleaseAction');
    var forwardLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewForwardAction');
    var dot1 = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator');
    var dot2 = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator2');

    completeButton.setVisible(true);
    claimButton.setVisible(true);
    releaseButton.setVisible(true);
    forwardButton.setVisible(true);
    claimLink.setVisible(true);
    releaseLink.setVisible(true);
    forwardLink.setVisible(true);
    dot1.setVisible(true);
    dot2.setVisible(true);
};

sap.uiext.inbox.Inbox.prototype.hideAllActionButtonsandLinks = function() { // hiding standard action buttons and links if Completed Tasks are selected in dropdownBox
    var claimButton = sap.ui.getCore().byId(this.getId() + '--' + 'claimActionButton');
    var releaseButton = sap.ui.getCore().byId(this.getId() + '--' + 'releaseActionButton');
    var completeButton = sap.ui.getCore().byId(this.getId() + '--' + 'openActionButton');
    var forwardButton = sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton');
    var claimLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewClaimAction');
    var releaseLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewReleaseAction');
    var forwardLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewForwardAction');
    var dot1 = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator');
    var dot2 = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator2');

    if (this.getOpenCompletedTasks() == false){
    	completeButton.setVisible(false);
    }
    claimButton.setVisible(false);
    releaseButton.setVisible(false);
    forwardButton.setVisible(false);
    
    claimLink.setVisible(false);
    releaseLink.setVisible(false);
    forwardLink.setVisible(false);
    
    dot1.setVisible(false);
    dot2.setVisible(false);
};

sap.uiext.inbox.Inbox.prototype.showAllActionButtonsandLinks = function() { // displaying standard action buttons and links if Completed Tasks are not selected in dropdownBox
    var claimButton = sap.ui.getCore().byId(this.getId() + '--' + 'claimActionButton');
    var releaseButton = sap.ui.getCore().byId(this.getId() + '--' + 'releaseActionButton');
    var completeButton = sap.ui.getCore().byId(this.getId() + '--' + 'openActionButton');
    var forwardButton = sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton');
    var claimLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewClaimAction');
    var releaseLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewReleaseAction');
    var forwardLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewForwardAction');
    var dot1 = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator');
    var dot2 = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator2');

    if(this.typeOfModel === "OData"){
    	completeButton.setVisible(true);
    	
    	if(this.oTcmMetadata._isSupportsClaim()){
        	claimButton.setVisible(true);
            claimLink.setVisible(true);
            dot1.setVisible(true);
        }
        
        if(this.oTcmMetadata._isSupportsClaim()){
        	releaseButton.setVisible(true);
            releaseLink.setVisible(true);
            dot2.setVisible(true);
        }
        
        if(this.oTcmMetadata._isSupportsForward() && this.isForwardActionEnabled){
        	forwardButton.setVisible(true);
            forwardLink.setVisible(true);
        } 
    } else { // for Models other than OData
    	this.showAllActions();
    }
};

sap.uiext.inbox.Inbox.prototype._handleActionButtonsEnable = function(bSupportsAction) {
	if( (bSupportsAction.length > 0) && !(jQuery.inArray(false, bSupportsAction) > -1) )  {
        return true;
    } else {
       	return false;
    }
};

sap.uiext.inbox.Inbox.prototype.disableActionButtonsOnMultiStatus = function(selectedStatus, selectedActions) {
    var claimButton = sap.ui.getCore().byId(this.getId() + '--' + 'claimActionButton');
    var releaseButton = sap.ui.getCore().byId(this.getId() + '--' + 'releaseActionButton');
    var forwardButton = sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton');
    var completeButton = sap.ui.getCore().byId(this.getId() + '--' + 'openActionButton');
    var bCompletedTasksSelected =  this._isCompletedTasksSelected();
    var bGetOpenCompletedTasks = this.getOpenCompletedTasks();
    
    var bSupportsClaim = selectedActions.aSupportsClaim;
    var bSupportsForward = selectedActions.aSupportsForward;
    var bSupportsRelease = selectedActions.aSupportsRelease;
    
    if ( !bGetOpenCompletedTasks && bCompletedTasksSelected ){
    	completeButton.setVisible(false);
    } else {
    	completeButton.setVisible(true);
    }
    
    if (selectedStatus.length > 0 && !jQuery.inArray("COMPLETED", selectedStatus) > -1 ){
    	completeButton.setEnabled(true);
    } else {
    	if (this.getOpenCompletedTasks() == true){
    		completeButton.setEnabled(true);
    	}
    	else{
    		completeButton.setEnabled(false);
    	}
    } 
    
    claimButton.setEnabled(this._handleActionButtonsEnable(bSupportsClaim));
    releaseButton.setEnabled(this._handleActionButtonsEnable(bSupportsRelease));
    forwardButton.setEnabled(this._handleActionButtonsEnable(bSupportsForward));
};

sap.uiext.inbox.Inbox.prototype.dateFormat = function(dateValue, bDisplayYear) {
  if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
      var date;
      if (dateValue.indexOf('Date') != -1) {
          date = new Date();
          date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
      } else {
          date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
      }
      dateValue = date;
  }

  if (dateValue != undefined && dateValue != "") {
      var ins = sap.ui.core.format.DateFormat.getDateInstance({
          style : "medium"
      });
      if(bDisplayYear !== undefined && bDisplayYear === false)
  	{
  		ins = sap.ui.core.format.DateFormat.getDateInstance({
  			pattern: "MMM dd",
              style : "medium"
          });
  	}
      return ins.format(dateValue);
  }
      //FOR Time Zone Support, do not forget to add timeoffset property in inbox control.
      /*var utc = Date.UTC(dateValue.getUTCFullYear(),dateValue.getUTCMonth(),dateValue.getUTCDate(),dateValue.getUTCHours(),dateValue.getUTCMinutes(),dateValue.getUTCSeconds(),dateValue.getUTCMilliseconds())
      var inboxInstance = this;
      while(inboxInstance != undefined && !(inboxInstance instanceof sap.uiext.inbox.Inbox))
      {
          inboxInstance = inboxInstance.getParent();
      }
      var localTime =  utc + inboxInstance.getTimezoneOffset() + (new Date().getTimezoneOffset()*60*1000);
      var ins = sap.ui.core.format.DateFormat.getDateTimeInstance({
          style : "medium"
      });
      return ins.format(new Date(localTime));*/
  return "";

};

sap.uiext.inbox.Inbox.prototype.tooltipFormatForDateTime = function(dateValue) {
    if (dateValue != undefined && typeof (dateValue) == 'string' && dateValue != "") {
        var date;
        if (dateValue.indexOf('Date') != -1) {
            date = new Date();
            date.setTime(dateValue.substring((dateValue.indexOf("(") + 1), dateValue.indexOf(")")));
        } else {
            date = new Date(dateValue.substring((dateValue.indexOf("'") + 1), dateValue.length - 1));
        }
        dateValue = date;
    }

    if (dateValue != undefined && dateValue != "") {
        var ins = sap.ui.core.format.DateFormat.getDateTimeInstance({
            style : "full"
        });
        return ins.format(dateValue);
    }       
    return "";

};

sap.uiext.inbox.Inbox.prototype.executeActionOnTask = function(oEvent, eventParameters) {
	
	var inBox = eventParameters.inbox;
	var view = eventParameters.view;
	var action = eventParameters.action;
	var rowRepeaterPaginator = sap.ui.getCore().byId(inBox.getId()+ '--' +"rowRepeaterPaginator");
	var isForwardAction = (action === inBox.constants.FORWARD) ? true : false;
	var forwardTo = isForwardAction ? eventParameters.forwardTo : '';
	
    inBox.showBusyLoader();
    var oListTable, rowContext, oModel;
    
    //var action = oEvent.getSource().getId();
    
    var selectedIDs = [], selectedContexts = [],selectedSAPOrigins = [], selectedForwardToUsers = [];
    var selectedStatus = [];
    var concatSelectedIDs = "'", concatSelectedSAPOrigins = "'", concatForwardToUsers = "'";
    var selectedID, selectedSAPOrigin;
    // reset search
    inBox.resetSearchCriteria();
    oModel = inBox.getCoreModel();
    
    if(view === inBox.constants.tableView){
    	oListTable = sap.ui.getCore().byId(inBox.getId() + '--' + 'listViewTable');
        if (oEvent.getSource())
            var selectedIndices = inBox.getlistTableSelectedIndices();
        
        jQuery.each(selectedIndices, function(i, selIndex) {
            rowContext = oListTable.getContextByIndex(selIndex);
            selectedContexts.push(rowContext);
            
            selectedID = oModel.getProperty("InstanceID", rowContext);
            selectedSAPOrigin = oModel.getProperty("SAP__Origin", rowContext);
            
            selectedIDs.push(selectedID);
            selectedSAPOrigins.push(selectedSAPOrigin);
            
            if (i == 0){
                concatSelectedIDs = concatSelectedIDs + selectedID;
            	concatSelectedSAPOrigins = concatSelectedSAPOrigins + selectedSAPOrigin;
            	if(isForwardAction){
            		concatForwardToUsers = concatForwardToUsers + forwardTo;
            	}
            }
            else{
                concatSelectedIDs = concatSelectedIDs + ";" + selectedID;
            	concatSelectedSAPOrigins = concatSelectedSAPOrigins + ";" + selectedSAPOrigin;
            	if(isForwardAction){
            		concatForwardToUsers = concatForwardToUsers + ";" + forwardTo;
            	}
            }
        });
        concatSelectedIDs = concatSelectedIDs + "'";
        concatSelectedSAPOrigins = concatSelectedSAPOrigins + "'";
        if(isForwardAction){
        	concatForwardToUsers = "'" + forwardTo + "'";
        }
   }else if(view === inBox.constants.rowRepeaterView){
	   var oContext = oEvent.getSource().getBindingContext();
	   selectedID = oModel.getProperty("InstanceID", oContext);
       selectedSAPOrigin = oModel.getProperty("SAP__Origin", oContext);
       
       selectedIDs.push(selectedID);
       selectedSAPOrigins.push(selectedSAPOrigin);
       
	   concatSelectedIDs = concatSelectedIDs + selectedID +"'";
	   concatSelectedSAPOrigins = concatSelectedSAPOrigins + selectedSAPOrigin +"'";
	   if(isForwardAction){
	  	 concatForwardToUsers = "'" + forwardTo + "'";
	   }
	  /* if(rowRepeaterPaginator){
		   rowRepeaterPaginator.setCurrentPage(1);
	   }*/
   }
    
    if (selectedIDs != null || selectedIDs.length > 0) {
        var IDURIPart, requestURI, requestOptions, status;
        if (action === "Complete") {
            action = "Complete";
        }
        if (action === "Claim") {
            action = "Claim";
        }
        if (action === "Release") {
            action = "Release";
        }if(isForwardAction){
        	action = "Forward";
        }
//      if (!inBox.getHandleBindings()) {
            var eventParams = oEvent.getParameters();
            // oDataEventParams.bindingLength = length;
            eventParams.action = action;
            eventParams.selectedIDs = concatSelectedIDs;
            eventParams.selectedSAPOrigins = concatSelectedSAPOrigins;
            
            eventParams.selectedIDList = selectedIDs;
            eventParams.selectedSAPOriginList = selectedSAPOrigins;
            
            if(isForwardAction){
            	eventParams.selectedForwardToUsers = concatForwardToUsers;
            }
            inBox.fireTaskAction(eventParams);
            inBox.applyFilterOnResponse(selectedContexts);
  }
    inBox.resetMessages = false;
};

sap.uiext.inbox.Inbox.prototype.defaultActionHandler = function(oEvent, inBox) {
	var constants = inBox.constants;
    var action = oEvent.getParameter('action');
    var concatSelectedIDs = oEvent.getParameter('selectedIDs');
    var IDURIPart, requestURI, requestOptions, status;
    var concatSAPOrigins = oEvent.getParameter('selectedSAPOrigins');
    var oModel = inBox.getCoreModel();
    var selectedIDList = oEvent.getParameter('selectedIDList');
    var selectedSAPOriginList = oEvent.getParameter('selectedSAPOriginList');
    var commentsList = oEvent.getParameter('commentsList');
    var isForwardAction = (action === inBox.constants.FORWARD) ? true : false;
    
    var errorHandler = function(error){
    	inBox.showMessage("error", inBox._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
    };
    
    var selectedIDListLength = selectedIDList.length;
    if((selectedIDListLength > 1) && inBox.isBatchOperationSupported){
    	var oBatchOperation, sPath, aBatchOperations = [];
    	for(var i = 0;i < selectedIDListLength ; i ++){
    		sPath = action + constants.query + "InstanceID='" + selectedIDList[i] + "'" + constants.amperSand + constants.sapOrigin + "'" +  selectedSAPOriginList[i] + "'"; 
    		if(commentsList && commentsList.length > 0){
    			sPath = sPath + "&Comments='" +  commentsList[i] +"'";
    		}
    		 if(isForwardAction){
    			 sPath = sPath + "&ForwardTo=" + oEvent.getParameter('selectedForwardToUsers');
    		  }
        	oBatchOperation = oModel.createBatchOperation(sPath,inBox.httpMethodForAction);
        	//aBatchOperations.push(oBatchOperation);
        	oModel.addBatchChangeOperations([oBatchOperation]);
        }
    	oModel.submitBatch(function(data,response){
    		   var batchResponses = data.__batchResponses;
    	       var i, j, iChangeResLength, len;
    	       var noOfErrors = 0;
    	       for(i = 0, len = batchResponses.length; i < len; i++){
        	           var aChangeResponses = batchResponses[i].__changeResponses;
        	           if(aChangeResponses){
                           for(j = 0, iChangeResLength = aChangeResponses.length; j < iChangeResLength ; j++){
                               var oChangeResponse = aChangeResponses[j];
                               noOfErrors = !(oChangeResponse.statusCode >= 200 && oChangeResponse.statusCode <= 202)? noOfErrors+1 : noOfErrors;
                           }
        	           }
        	       }
    	           /*var data = batchResponses[i];
    	           if(data.response.statusCode !== 200 && data.response.statusCode !== 201){
    	        	   noOfErrors = noOfErrors + 1;
    	           }*/
    	       if(noOfErrors > 0){
    	    	   inBox.showMessage("error", noOfErrors + " " + inBox._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
    	       }else{
    	    	   inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_ACTION_SUCCESS"));
    	       }
    		},errorHandler,false);
    }else{
    	
    IDURIPart = '/' + action + "?InstanceID=" + concatSelectedIDs + "&SAP__Origin=" + concatSAPOrigins + "&$format=json";
    if(isForwardAction){
    	IDURIPart = IDURIPart + "&ForwardTo=" + oEvent.getParameter('selectedForwardToUsers');
    }
    requestURI = inBox.bpmSvcUrl + IDURIPart;
 
   
  requestOptions = {
		         async:false,
		         requestUri : requestURI,
		         method : inBox.httpMethodForAction,
		         headers : {
		                Accept : "application/json",
		                "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
		         }
		  };

	    OData.request(requestOptions, function(data, request) {
	          inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_ACTION_SUCCESS"));
	    }, errorHandler);
    }
};

sap.uiext.inbox.Inbox.prototype.fillAttributes = function() {
    var inBox = this;
    var oFacetFilter = sap.ui.getCore().byId(this.getId()+'--'+'filterFacet');
    if(oFacetFilter != undefined){
        var taskTypes = sap.uiext.inbox.InboxConstants.aFilterMetaData[0].attributes;
        var taskParentAttr = oFacetFilter.getLists()[0];
        if(taskParentAttr === undefined || taskParentAttr === null)
            return;
            
        var taskAttributes = taskParentAttr.getItems();

        jQuery.each(taskAttributes, function(i, attr) {
            // TODO : here comparison is dependent on the language of TaskTitle.
            var attrIDPos = inBox.inboxUtils.inArray(attr.getKey(),taskTypes);
            if(attr.getKey()!='sapUiFacetFilter_ALL') {
                if(attrIDPos === -1)
                {
                    taskParentAttr.removeItem(attr);
                }else{
                    taskTypes.splice(attrIDPos,1);
                }
            }
        });
        
        if (taskTypes.length > 0) {
            jQuery.each(taskTypes, function(i, taskType) {
                // If TaskTypes have specialCharacters this is failing - needs to be checked
                var taskTypeID = inBox.inboxUtils.scrub(taskType.key);
                var oAttribute = sap.ui.getCore().byId(inBox.getId() + '--' + taskTypeID);
                if (oAttribute === undefined)
                	oAttribute = new sap.ui.core.ListItem(inBox.getId() + '--' + taskTypeID,{text: taskType.value, key:taskType.key}).data("InstanceID",taskType.instanceID).data("SAP__Origin",taskType.sap__Origin);
                taskParentAttr.addItem(oAttribute);
            });
        }
    }
};

sap.uiext.inbox.Inbox.prototype.resetFilterView = function(bClearTableBinding) {
    var appliedDDFilter;
    if (this.filtersToApply.dropDownFilter) {
        appliedDDFilter = this.filtersToApply.dropDownFilter;
    } else if (this.filtersToApply.resStat != undefined || this.filtersToApply.readyStat != undefined
            || this.filtersToApply.InProStat != undefined) {
        appliedDDFilter = new sap.ui.model.Filter("Status", sap.ui.model.FilterOperator.NE, "COMPLETED");
    }
    this.filtersToApply = {};
    if (appliedDDFilter != undefined) {
        this.filtersToApply.dropDownFilter = appliedDDFilter;
    }
    for (var idx = 0; idx < sap.uiext.inbox.InboxConstants.aFilterMetaData.length; idx++) {
        var attr = sap.ui.getCore().byId(this.getId() + '--' + sap.uiext.inbox.InboxConstants.aFilterMetaData[idx].name);
        if (attr != undefined)
            attr.setSelectedKeys(["sapUiFacetFilter_ALL"]);
    }
    if(bClearTableBinding)
        this.applyFilterOnResponse(null);
    
};

sap.uiext.inbox.Inbox.prototype.getlistTableSelectedIndices = function() {
    var listTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    return listTable.getSelectedIndices();
};

sap.uiext.inbox.Inbox.prototype.getCoreModel = function() {
    return sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable').getModel();
};

sap.uiext.inbox.Inbox.prototype.getnavigateTaskExecMetadata = function() {
    // var taskExecMeta = {};
    var oListTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    var taskExecutionURLs = [];
    var taskExecIDs = [];
    var taskExecTitles = [];
    var aTaskExecSAPOrigins = [];
    var aSelectedContexts = [];
    var selectedIndices = this.getlistTableSelectedIndices();
    var oModel = this.getCoreModel();
    jQuery.each(selectedIndices, function(i, selIndex) {
        var rowContext = oListTable.getContextByIndex(selIndex);
        aSelectedContexts.push(rowContext);
        // taskExecIDs.push(oModel.getProperty("ID",rowContext));
        taskExecIDs.push(oModel.getProperty("InstanceID", rowContext));
        taskExecTitles.push(oModel.getProperty("TaskTitle", rowContext));
        aTaskExecSAPOrigins.push(oModel.getProperty("SAP__Origin", rowContext));
    });
    if (this.getTaskExecutionURLCallBack != "" && this.getTaskExecutionURLCallBack != undefined && this.getTaskExecutionURLCallBack !== null){
        taskExecutionURLs.push(this.getTaskExecutionURLCallBack(taskExecIDs[0],aTaskExecSAPOrigins[0]));
    }
    else{
        taskExecutionURLs.push("");
    }
    /*
     * taskExecMeta["arrayURLs"] = taskExecutionURLs; taskExecMeta["arrayIDs"] = taskExecIDs; taskExecMeta["arrayTitles"] =
     * taskExecTitles;
     */
    return {
    	aSelectedContexts : aSelectedContexts,
        arrayURLs : taskExecutionURLs,
        arrayIDs : taskExecIDs,
        arrayTitles : taskExecTitles,
        aTaskSAPOrigins : aTaskExecSAPOrigins
    };
};

sap.uiext.inbox.Inbox.prototype.getlistTableSelectedContexts = function() {
    var selectedContexts = [];
    var selectedIndices = this.getlistTableSelectedIndices();
    var oListTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    jQuery.each(selectedIndices, function(i, selIndex) {
        selectedContexts.push(oListTable.getContextByIndex(selIndex));
    });
    return selectedContexts;
};

sap.uiext.inbox.Inbox.prototype.showBusyLoader = function() {
    sap.ui.core.BusyIndicator.show(0);
    var busyLoader = jQuery.sap.byId("busy_loader");
    busyLoader.css('position', 'absolute');
    busyLoader.css('top', "50%");
    busyLoader.css('left', "50%");
    busyLoader.css('display', '');
    busyLoader.show();
    busyLoader.css('z-index', 99);

};

sap.uiext.inbox.Inbox.prototype.hideBusyLoader = function() {
    sap.ui.core.BusyIndicator.hide();
    var busyLoader = jQuery.sap.byId("busy_loader");
    busyLoader.css('display', 'none');
    busyLoader.css('z-index', -1);
};

sap.uiext.inbox.Inbox.prototype.resetSearchCriteria = function() {
    var srchFld = sap.ui.getCore().byId(this.getId() + '--' + 'searchField');
    srchFld.setValue("");
};

sap.uiext.inbox.Inbox.prototype.loadExecImages = function() {
    var requrl = this._imgResourcePath + sap.uiext.inbox.InboxConstants.prevBtnImage;
    var requrl1 = this._imgResourcePath + sap.uiext.inbox.InboxConstants.nxtBtnImage;
    jQuery.ajax({
        url : requrl,
        type : "GET",
        async : true,
        success : function(data, textStatus, XMLHttpRequest) {
        },
        error : function(XMLHttpRequest, textStatus, errorThrown) {
            // TODO Add proper Error handling and Messaging
        }
    });

    jQuery.ajax({
        url : requrl1,
        type : "GET",
        async : true,
        success : function(data, textStatus, XMLHttpRequest) {
        },
        error : function(XMLHttpRequest, textStatus, errorThrown) {
            // TODO Add proper Error handling and Messaging
        }
    });
};

/*sap.uiext.inbox.Inbox.prototype.getRowSettingsCookieValue = function() {
    var i, x, y, aCookies = document.cookie.split(";");
    for (i = 0; i < aCookies.length; i++) {
        x = aCookies[i].substr(0, aCookies[i].indexOf("="));
        y = aCookies[i].substr(aCookies[i].indexOf("=") + 1);
        x = x.replace(/^\s+|\s+$/g, "");
        if (x == (this.getId() + "nOfRows")) {
            return unescape(y);
        }
    }
};*/

/*sap.uiext.inbox.Inbox.prototype.setRowSettingsCookieValue = function(value, exDays) {
    // var exdate = new Date();
    // exdate.setDate(exdate.getDate() + exDays);
    // var c_value = escape(value) + ((exDays == null) ? "" : "; expires=" + exdate.toUTCString());
    document.cookie = this.getId() + "nOfRows" + "=" + escape(value);// c_value;
    this.setNoOfRowsOnTable(value);
};*/

sap.uiext.inbox.Inbox.prototype.setNoOfRowsOnTable = function(value) {
    var table = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
    if (table != undefined)
        table.setVisibleRowCount(parseInt(value, 10));
};


sap.uiext.inbox.Inbox.prototype.showMessage = function(messageType, messageText) {
    var msgBarTB = sap.ui.getCore().byId(this.getId() + '--' + 'msgBarContainer');
    if (msgBarTB != undefined) {
        msgBarTB.setVisible(true);
        
        var msgBarText = this._getComponent('msbBarTextView');
        msgBarText.setText(messageText);
        
        
        var msgBarTypeImg = this._getComponent('msbBarTypeImg');
        msgBarTypeImg.setSrc(
                this._imgResourcePath + sap.uiext.inbox.InboxConstants.messageTypeIcons[messageType]);
        msgBarTypeImg.setTooltip(this._oBundle.getText(sap.uiext.inbox.InboxConstants.messageTypeToolTip[messageType]));

    }
};

sap.uiext.inbox.Inbox.prototype.deleteMessage = function(oEvent, inBox) {
    if (inBox === undefined)
        inBox = this;
    var msgBarTB = sap.ui.getCore().byId(inBox.getId() + '--' + 'msgBarContainer');
    if (msgBarTB != undefined) {
        msgBarTB.setVisible(false);
        sap.ui.getCore().byId(inBox.getId() + '--' + 'msbBarTextView').setText("");
        sap.ui.getCore().byId(inBox.getId() + '--' + 'msbBarTypeImg').setSrc("");
    }
};

sap.uiext.inbox.Inbox.prototype.getFormattedDateTimeOff = function(subT, isNow) {
    var myDate = new Date();
    myDate.setDate(myDate.getDate() - subT);
    if(!isNow){
        myDate.setHours(0);
        myDate.setSeconds(0);
        myDate.setMinutes(myDate.getTimezoneOffset());
    }
    return myDate;
};

sap.uiext.inbox.Inbox.prototype.getFormattedDueDateTimeOff = function(subT) {
  var myDate = new Date();
  myDate.setDate(myDate.getDate() + subT);
  myDate.setHours(0);
  myDate.setSeconds(0);
  myDate.setMinutes(myDate.getTimezoneOffset());
  return myDate;
};

sap.uiext.inbox.Inbox.prototype.refreshTaskTypes = function(){
    if (this.dynamicTaskTypeFilterCallBack != "" && this.dynamicTaskTypeFilterCallBack !== undefined) {
        sap.uiext.inbox.InboxConstants.aFilterMetaData[0].attributes = this.dynamicTaskTypeFilterCallBack();
        this.fillAttributes();
        return;
    }
  var oTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
  var aTasks = [];
  var oMap = {};
  var sValue;
  if (this.getHandleBindings()) {
      var oContexts = this._currentViewElement().getBinding("rows").getContexts();
      var oModel = this.getCoreModel();
      jQuery.each(oContexts, function(i, oContext) {
    	  sValue = {"key":oModel.getProperty("TaskDefinitionID", oContext), "value":oModel.getProperty("TaskDefinitionName", oContext),"instanceID":oModel.getProperty("InstanceID", oContext),"sap__Origin":oModel.getProperty("SAP__Origin", oContext)};
            if (!oMap[sValue.key]) {
                oMap[sValue.key] = true;
                aTasks.push(sValue);
            }
      });
  }else{
      var oListBinding = this._currentViewElement().getBinding("rows");
      if(oListBinding && oListBinding.oList){
	      jQuery.each(oListBinding.oList, function(i, oEntry) {
	          sValue = {"key":oEntry.TaskDefinitionID, "value":oEntry.TaskDefinitionName};
	          if (!oMap[sValue.key]) {
	            oMap[sValue.key] = true;
	            aTasks.push(sValue);
	          }
	      });
      }
  }
  
  if(aTasks.length > 0){
    sap.uiext.inbox.InboxConstants.aFilterMetaData[0].attributes = aTasks;
        this.fillAttributes();
  }
};

sap.uiext.inbox.Inbox.prototype.onAfterRendering = function() {
    // TODO: Apply CSS
    var oTable$ = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable').$();
    oTable$.find("a:disabled").addClass("sapUiExtInboxLnkDsbl");
    
    // TODO: focus CSS
  /*  var settingsButton$ = sap.ui.getCore().byId(this.getId() + '--' + 'settingsButton').$();
    settingsButton$.hover(function(){
        settingsButton$.css("background-color","transparent");
        });
    settingsButton$.focus(function(){
                                        settingsButton$.css("background-color","transparent");
                                        });
    settingsButton$.css("background-color","transparent");
    
   settingsButton$.addClass("sapUiExtInboxSettingsButton");*///TODO: Confirm the behaviour with PO.
};


sap.uiext.inbox.Inbox.prototype._getComponent = function(sComponentName) { 
    return sap.ui.getCore().byId(this.getId() + '--' + sComponentName); 
};

sap.uiext.inbox.Inbox.prototype._removeParentID = function(sComponentName) { 
    var parentID = this.getId();
    return sComponentName.replace(this.getId()+"--","");
    
};

sap.uiext.inbox.Inbox.prototype.populateViewButtonsContainer = function(viewButtonsContainer) {
	var listViewCell = new sap.ui.commons.layout.MatrixLayoutCell({id : this.getId() + '--' + "segmentedButtonCell"});
	/*var listViewImg = new sap.ui.commons.Image({
		id : this.getId() + '--' +  "tableViewImage",
		src : this._imgResourcePath + sap.uiext.inbox.InboxConstants.tableViewImageSelected,
		text : "",
		tooltip : this._oBundle.getText("INBOX_LIST_VIEW_TOOLTIP")
	});
	listViewImg.attachPress(this, this.switchViews);
	listViewImg.addStyleClass("sapUiExtInboxToolBarContainerHeight");
	listViewCell.addContent(listViewImg);
	listViewCell.setPadding(sap.ui.commons.layout.Padding.None);

	// Uncomment the code for Steam View button and also donot forget to
	// increase the width to 4% while creating the toolBarContainer.
	 var matrixViewCell = new sap.ui.commons.layout.MatrixLayoutCell();
	 var matrixViewImg = new sap.ui.commons.Image({
	 id: this.getId() + '--' + "rrViewImage",
	 src : this._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewImageUnselected,
	 text : "",
	 tooltip : this._oBundle.getText("INBOX_STREAM_VIEW_TOOLTIP")
	 });
	 matrixViewImg.attachPress(this, this.switchViews);
	 matrixViewImg.addStyleClass("sapUiExtInboxToolBarContainerHeight");
	 matrixViewCell.addContent(matrixViewImg);
	 matrixViewCell.setPadding(sap.ui.commons.layout.Padding.None);*/
	 
	 var oSegmentedButtonViewSelectionLite = new sap.ui.commons.SegmentedButton({id:this.getId() + '--' + 'viewSelectionSegBtn',
			buttons:[new sap.ui.commons.Button({id: this.getId() + '--' + 'tableViewSelectionButton',lite: true,icon: this._imgResourcePath + sap.uiext.inbox.InboxConstants.tableViewImageSelected,
				iconHovered: this._imgResourcePath + sap.uiext.inbox.InboxConstants.tableViewImageSelected, iconSelected: this._imgResourcePath + sap.uiext.inbox.InboxConstants.tableViewImageSelected,
													tooltip:this._oBundle.getText("INBOX_LIST_VIEW_TOOLTIP")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected"),//.addStyleClass("sapUiExtInboxToolBarContainerHeight"),
			         new sap.ui.commons.Button({id: this.getId() + '--' + 'rrViewSelectionButton',lite: true,icon: this._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewImageUnselected,
			        	 iconHovered: this._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewImageSelected, iconSelected: this._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewImageSelected,
			        	 					tooltip:this._oBundle.getText("INBOX_STREAM_VIEW_TOOLTIP")}).addStyleClass("sapUiExtInboxSegmentedButtonViewSelection")]});//.addStyleClass("sapUiExtInboxToolBarContainerHeight")]});
	 oSegmentedButtonViewSelectionLite.setSelectedButton(this.getId() + '--' + 'tableViewSelectionButton');
	 oSegmentedButtonViewSelectionLite.attachSelect(this, this.switchViews);
	 oSegmentedButtonViewSelectionLite.addStyleClass("sapUiExtInboxToolBarContainerHeight");
	 listViewCell.addContent(oSegmentedButtonViewSelectionLite);
	 listViewCell.setPadding(sap.ui.commons.layout.Padding.None);
	viewButtonsContainer.createRow(listViewCell);
};

sap.uiext.inbox.Inbox.prototype.updateStylingOnSwitchingView = function(buttonSelected, oEvent) {
	var aButtons = oEvent.getSource().getButtons();
	var oButton;
	for( var i=0; i<aButtons.length; i++){
	oButton = aButtons[i];
	    if(buttonSelected.getId() != oButton.getId()) {
	        oButton.addStyleClass("sapUiExtInboxSegmentedButtonViewSelection");
	        oButton.removeStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
	      }
     
	 else {
	        oButton.removeStyleClass("sapUiExtInboxSegmentedButtonViewSelection");
            oButton.addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
	      }
	 }
	};	


sap.uiext.inbox.Inbox.prototype.switchViews = function(oEvent, oInbox) {
    //TODO : need to refresh model at each switch so as to see latest data
    var that = oInbox;
    var buttonClicked = sap.ui.getCore().byId(oEvent.getSource().getSelectedButton());
    var tableViewSelectionButtonId = that.getId() + '--' + "tableViewSelectionButton";
    var rrViewSelectionButtonId = that.getId() + '--' + "rrViewSelectionButton";
    var tableView = sap.ui.getCore().byId(that.getId() + '--' + 'listViewTable');
    var tableRowSettings = sap.ui.getCore().byId(that.getId() + '--' + 'tableRowSettingLayoutContainer');
    
    var oTasksRowRepeater = sap.ui.getCore().byId(that.getId() + '--'+'tasksRowRepeater');
    var verticalLayout = sap.ui.getCore().byId(that.getId() + '--' + 'verticalLayoutContainer');
    var actionButtonsToolBar = sap.ui.getCore().byId(that.getId() + '--' + 'actionButtonsToolbarContainer');
    var rowRepeaterToolBar = sap.ui.getCore().byId(that.getId() + '--'+ 'rrToolbar'); 
    var rowRepeaterToolsContent = sap.ui.getCore().byId(that.getId() + '--'+ 'rowRepeaterToolsMatLayout'); 
    var rowRepeaterPaginator = sap.ui.getCore().byId(that.getId()+ '--' +"rowRepeaterPaginator")
    
    var currentViewElement = that._currentViewElement();
    var currentViewElementBinding = currentViewElement.getBinding('rows');
    var taskDefinitionFilter = false, bUpdateBinding = true, aSelectedKeys;
    var jSONModel = that.oModel instanceof sap.ui.model.json.JSONModel ;
    
    that.updateStylingOnSwitchingView(buttonClicked, oEvent) ;
 
    if(currentViewElementBinding &&  currentViewElementBinding.sFilterParams && currentViewElementBinding.sFilterParams.indexOf('TaskDefinitionID') !== -1){
    	taskDefinitionFilter = true;
    	var oTaskTypefilterList = that._getComponent("INBOX_FILTER_TASK_TYPE");
        aSelectedKeys = oTaskTypefilterList.getSelectedKeys();
    }
    
    if(buttonClicked.getId() === tableViewSelectionButtonId){
           that.currentView = that.constants.tableView;
           buttonClicked.setIcon(that._imgResourcePath + that.constants.tableViewImageSelected);
           var rrViewSelectionButton = sap.ui.getCore().byId(rrViewSelectionButtonId);
           rrViewSelectionButton.setIcon(that._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewImageUnselected);
           actionButtonsToolBar.setVisible(true);
           tableView.setVisible(true);
           rowRepeaterToolBar.setVisible(false);
           oTasksRowRepeater.setVisible(false);
           rowRepeaterToolsContent.setVisible(false);
           tableRowSettings.setVisible(true);
           if(taskDefinitionFilter && aSelectedKeys && aSelectedKeys.length === 1){
        	   var aItems = oTaskTypefilterList.getItems();
        	   var key = aSelectedKeys[0];
        	   var aSelectedItem = [];
        	   
        	   for (var j = 0; j < aItems.length; j++) {
        		   if (key === aItems[j].getKey()) {
        			   aSelectedItem.push(aItems[j]);
        			   break;
        		   }
               }
                  //that._modifyListBindingForExpand(true,that.constants.customAttributeNavigationParam);
        	   that._createCustomAttributes(aSelectedItem);
          }
    }
    
    if(buttonClicked.getId() === rrViewSelectionButtonId){
           that.currentView = that.constants.rowRepeaterView;
           buttonClicked.setIcon(that._imgResourcePath + sap.uiext.inbox.InboxConstants.rrViewImageSelected);
           var tableViewSelectionButton = sap.ui.getCore().byId(tableViewSelectionButtonId);
           tableViewSelectionButton.setIcon(that._imgResourcePath + sap.uiext.inbox.InboxConstants.tableViewImageUnselected);
           if(that.isCustomAttributesEnabled){
                  var customAttrButton = that._getComponent('customAttributesSegBtn');
                  if(customAttrButton && !customAttrButton.getVisible()){
                        customAttrButton.setVisible(true);
                  }
           }
           actionButtonsToolBar.setVisible(false);
           tableView.setVisible(false);
           tableRowSettings.setVisible(false);
           if(oTasksRowRepeater.getModel() === undefined || oTasksRowRepeater.getModel() === null){
                  oTasksRowRepeater.setModel(that.getModel());
           }
           rowRepeaterToolBar.setVisible(true);
           oTasksRowRepeater.setVisible(true);
           rowRepeaterToolsContent.setVisible(true);
           if(oTasksRowRepeater.getBinding('rows')){
        	   //oTasksRowRepeater.setCurrentPage(1);
               var numberOfRows = oTasksRowRepeater.getBinding('rows').iLength;
               //rowRepeaterPaginator.setNumberOfPages(Math.ceil(numberOfRows/5));
               that._updatePaginator(numberOfRows);
           }else{
               if(oEvent.getParameters().triggeredFrom === undefined){
            	   		var oRowRepeaterTemplate = that._getComponent('rrMainMatrixLayout');
                        var initialSort = new sap.ui.model.Sorter("CreatedOn", true);
                        var expand = that._getExpandParameters();
                        var filtersTobeApplied = that._getFilterArray();
                        if(that.isCustomActionsEnabled){
                               that._deleteCustomActions();
                               var isCompletedTasksSelectedinDD =  that._isCompletedTasksSelected();
                               if(!isCompletedTasksSelectedinDD && taskDefinitionFilter){
                                      if(aSelectedKeys && aSelectedKeys.length === 1){
                                             //need to check if with the key we can store an object. This is too much of an overhead.
                                             var aItems = oTaskTypefilterList.getItems();
                                             var key = aSelectedKeys[0];
                                             var sapOrigin;
                               
                                             for (var j = 0; j < aItems.length; j++) {
                                                    if (key === aItems[j].getKey()) {
                                                           sapOrigin = aItems[j].data("SAP__Origin");
                                                           break;
                                                    }
                                             }
                                             var aCustomActionsDefinitionArray = that._getCustomActionsDefinition(null,aSelectedKeys[0],sapOrigin);
                                             //create Columns
                                             if(aCustomActionsDefinitionArray && aCustomActionsDefinitionArray.length>0)
                                                    that._createCustomActionButtons(aCustomActionsDefinitionArray, false);
                                      }
                               }
                        }
                        if(expand.length > 0 ){
                             oTasksRowRepeater.bindRows({path: that.sCollectionPath,template: oRowRepeaterTemplate,parameters: {expand: expand},sorter:initialSort,filters:filtersTobeApplied});
                        }else{
                        	oTasksRowRepeater.bindRows({path: that.sCollectionPath,template: oRowRepeaterTemplate,sorter:initialSort,filters:filtersTobeApplied});
                        }
                        bUpdateBinding = false;
                        if(jSONModel){
                            var iResultLength = oTasksRowRepeater.getBinding('rows').iLength;
                            that._updatePaginator(iResultLength);
                        }
               }
           }
           //rowRepeaterPaginator.setCurrentPage(1);
    }
    
    if(bUpdateBinding){
           if(that.isCustomActionsEnabled){
                        that._deleteCustomActions();
                        var isCompletedTasksSelectedinDD =  that._isCompletedTasksSelected();
                        if(!isCompletedTasksSelectedinDD && taskDefinitionFilter){
                               if(aSelectedKeys && aSelectedKeys.length === 1){
                                      //need to check if with the key we can store an object. This is too much of an overhead.
                                      var aItems = oTaskTypefilterList.getItems();
                                      var key = aSelectedKeys[0];
                                      var sapOrigin;
                        
                                      for (var j = 0; j < aItems.length; j++) {
                                             if (key === aItems[j].getKey()) {
                                                    sapOrigin = aItems[j].data("SAP__Origin");
                                                    break;
                                             }
                                      }
                                      var aCustomActionsDefinitionArray = that._getCustomActionsDefinition(null,aSelectedKeys[0],sapOrigin);
                                      //create Columns
                                      if(aCustomActionsDefinitionArray && aCustomActionsDefinitionArray.length>0)
                                             that._createCustomActionButtons(aCustomActionsDefinitionArray, false);
                               }
                               that.applyFilterOnResponse(null,true);
                        }else{
                               that.applyFilterOnResponse(null);
                        }
           }else{
           //that.refreshTaskList(oEvent, oInbox); //TODO: Should we Refresh Tasks using this function call ? 
                  if(oEvent.getParameters().triggeredFrom === undefined){
                        if(jSONModel && (that.currentView === that.constants.rowRepeaterView)){
                               that.applyFilterOnResponse(null,true);
                        }else{ 
                               that.applyFilterOnResponse(null);
                        }
                  }
           }
    }
};

sap.uiext.inbox.Inbox.prototype.createOtherActions = function(oInbox) {
	var that = oInbox;
	var attachmentButton = new sap.ui.commons.ToggleButton({
		id : that.getId() + '--' + 'attachmentsSegBtn',
		visible : false,
		lite : true,
		icon : that._imgResourcePath + sap.uiext.inbox.InboxConstants.attachmentsImage,
		tooltip : this._oBundle.getText("INBOX_SHOW_ATTACHMENTS")
	});
		//attachmentButton.bindProperty("visible", "HasAttachments");

		var commentsButton = new sap.ui.commons.ToggleButton({
			id : that.getId() + '--' + 'commentsSegBtn',
			visible : false,
			lite : true,
			icon : that._imgResourcePath + sap.uiext.inbox.InboxConstants.commentsImage,
			tooltip : this._oBundle.getText("INBOX_SHOW_COMMENTS")
		});
	
		var customAttributesButton = new sap.ui.commons.ToggleButton({
			id : that.getId() + '--' + 'customAttributesSegBtn',
			enabled : true,
			lite : true,
			visible: false,
			tooltip : this._oBundle.getText("INBOX_SHOW_CUSTOM_ATTRIBUTES"),
			icon : that._imgResourcePath + sap.uiext.inbox.InboxConstants.customAttributesImage
		});
		
		/*
		 * var attachmentsImage = new sap.ui.commons.Image({ id : that.getId() + '--' + "attachmentsImg", decorative : false,
		 * src: that._imgResourcePath + sap.uiext.inbox.InboxConstants.attachmentsImage // tooltip :
		 * this._oBundle.getText("HAS ATTACHMENTS")//TODO: What Tootip ? });
		 * attachmentsImage.bindProperty("visible","HasAttachments");
		 * 
		 * var commentsImage = new sap.ui.commons.Image({ id : that.getId() + '--' + "commentsImg", decorative : false, src:
		 * that._imgResourcePath + sap.uiext.inbox.InboxConstants.commentsImage // tooltip :
		 * this._oBundle.getText("HAS_COMMENTS")//TODO: What Tootip ? }); commentsImage.bindProperty("visible","HasComments");
		 */
		
		var rrOtherActionMatLay = new sap.ui.commons.layout.MatrixLayout(that.getId() + '--'+ 'rrOtherActionsMatLay',{layoutFixed: false,columns:3, width:"30%"});
		rrOtherActionMatLay.createRow(attachmentButton, commentsButton, customAttributesButton);
		
	
		customAttributesButton.attachPress(this, function(oEvent, that) {
			that._handleActionButtonToggleinRowRepeater(oEvent);
		});
	return  rrOtherActionMatLay;
};

sap.uiext.inbox.Inbox.prototype._isOverDue = function(value) {
	//need to be overrriddedn in app for different timezones
	if(value === undefined || value === null || value === "")
		return false;
	
	var now = new Date().getTime();
	var overdue = (value.getTime() - now) < 0 ? true : false;
	return overdue;
};

sap.uiext.inbox.Inbox.prototype._currentView = function() {
	return this.currentView;
};

sap.uiext.inbox.Inbox.prototype.createRowRepeaterToolBar = function(oInbox) {
		var that = oInbox;	
	 var actionButtonsToolBar = sap.ui.getCore().byId(this.getId() + '--' + 'rrToolbar');
	 var oRowRepeater = sap.ui.getCore().byId(this.getId() + '--'+'tasksRowRepeater');
	
	 if(!actionButtonsToolBar){
		 var actionButtonsToolBar = new sap.ui.commons.Toolbar(this.getId() + '--' + "rrToolbar");
		 actionButtonsToolBar.addStyleClass("sapUiExtInboxActionButtonsToolbarContainer");
		 
		 //TODO: Add Label SortBy:
		 var sortIndex = 0;
		 if (sap.ui.getCore().byId(this.getId() + '--' + 'sortByLabel') === undefined) {
			 var sortByLabel = new sap.ui.commons.Label(this.getId() + '--' + "sortByLabel", {text: this._oBundle.getText("INBOX_SORT_BY_LABEL") + sap.uiext.inbox.InboxConstants.COLON,
				 design: sap.ui.commons.LabelDesign.Bold});
			 actionButtonsToolBar.insertItem(sortByLabel, sortIndex);
		 }
		 //Sort by Drop down list
		var dropdownComboBox = new sap.ui.commons.DropdownBox(this.getId() + '--' + "sortByFilterComboBox", {
		    tooltip : this._oBundle.getText("INBOX_SORT_BY_LABEL"),
		    items : [new sap.ui.core.ListItem(this.getId() + '--' + "li_creationDate", {
		        text : this._oBundle.getText("INBOX_FILTER_CREATION_DATE"),
		        tooltip : this._oBundle.getText("INBOX_SORT_BY_LABEL") +" "+ this._oBundle.getText("INBOX_FILTER_CREATION_DATE")
		    }), new sap.ui.core.ListItem(this.getId() + '--' + "li_taskTitle", {
		        text : this._oBundle.getText("INBOX_TASK_TITLE"),
		        tooltip : this._oBundle.getText("INBOX_SORT_BY_LABEL") +" "+ this._oBundle.getText("INBOX_TASK_TITLE")
		    }), new sap.ui.core.ListItem(this.getId() + '--' + "li_status", {
		        text : this._oBundle.getText("INBOX_STATUS"),
		        tooltip : this._oBundle.getText("INBOX_SORT_BY_LABEL") +" "+ this._oBundle.getText("INBOX_STATUS")
		    })]
		});
		dropdownComboBox.setValue(this._oBundle.getText("INBOX_FILTER_CREATION_DATE"));
		dropdownComboBox.addStyleClass("sapUiExtInboxRowRepeaterSortBy");
		 var _sortByStartDate = new sap.ui.commons.RowRepeaterSorter(this.getId() + '--' + 'sortByStartDate',{sorter:new sap.ui.model.Sorter("CreatedOn",true)});//Ascending
		 var _sortByTaskTitle = new sap.ui.commons.RowRepeaterSorter(this.getId() + '--' + 'sortByTaskTitle',{sorter:new sap.ui.model.Sorter("TaskTitle",true)});//Initialise it as descneding, as toggle would change it to Ascending
		 var _sortByStatus = new sap.ui.commons.RowRepeaterSorter(this.getId() + '--' + 'sortByStatus',{sorter:new sap.ui.model.Sorter("Status",true)});//Initialise it as descneding, as toggle would change it to Ascending
		 oRowRepeater.addSorter(_sortByStartDate);
		 oRowRepeater.addSorter(_sortByTaskTitle);
		 oRowRepeater.addSorter(_sortByStatus);
		 
		dropdownComboBox.attachChange(this, function(oEvent, inBox){
			var oEmptyListItem = inBox._getComponent('li_empty');
			if(this.indexOfItem(oEmptyListItem) !== -1)
				this.removeItem(oEmptyListItem);
			
		    var listItemID = oEvent.getSource().getSelectedItemId();
		    that.resetSearchCriteria();
		    var sorter;
		    if (listItemID === inBox.getId() + '--' + "li_creationDate") {
		    	sorter = sap.ui.getCore().byId(that.getId() + '--' + 'sortByStartDate').getSorter();
		    	sorter.bDescending = !sorter.bDescending;
		    	oRowRepeater.triggerSort(that.getId() + '--' + 'sortByStartDate');
		    }else if(listItemID === inBox.getId() + '--' + "li_taskTitle"){
		    	sorter = sap.ui.getCore().byId(that.getId() + '--' + 'sortByTaskTitle').getSorter();
		    	sorter.bDescending = !sorter.bDescending;
		    	oRowRepeater.triggerSort(that.getId() + '--' + 'sortByTaskTitle');
		    }else if(listItemID === inBox.getId() + '--' + "li_status"){
		    	sorter = sap.ui.getCore().byId(that.getId() + '--' + 'sortByStatus').getSorter();
		    	sorter.bDescending = !sorter.bDescending;
		    	oRowRepeater.triggerSort(that.getId() + '--' + 'sortByStatus');
		    }
		    that._updateRowRepeaterSortImage(sorter.bDescending);
	
		});
		 actionButtonsToolBar.insertItem(dropdownComboBox,sortIndex+1);
		//Sorting indicator image
		 var sortIcon = new sap.ui.commons.Image(this.getId() + '--' + "sortImage", {
			 tooltip : this._oBundle.getText("INBOX_SORT_INDICATOR_DESC"),
			 decorative : false
		 });
		 sortIcon.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.sortDescImage);
		 sortIcon.addStyleClass("sapUiExtInboxRefreshButtonHeight");
		 sortIcon.attachPress(this, function(oEvent, inBox){
			 var oSortListBox = inBox._getComponent('sortByFilterComboBox');
			 var oListItemID = oSortListBox.getSelectedItemId();
			 var oRowRepeater = sap.ui.getCore().byId(inBox.getId() + '--'+'tasksRowRepeater');
			 
			 inBox.resetSearchCriteria();
			 var sSorterID = inBox.constants.mRRSortMap[inBox._removeParentID(oListItemID)];
			 var oSorter = sSorterID?inBox._getComponent(sSorterID).getSorter():undefined;
			 
			 if(oSorter){
				 oSorter.bDescending = !oSorter.bDescending;
				 oRowRepeater.triggerSort(inBox.getId() + '--' + sSorterID);
				 inBox._updateRowRepeaterSortImage(oSorter.bDescending);
				 if(oSorter.bDescending){
					 this.setSrc(inBox._imgResourcePath + sap.uiext.inbox.InboxConstants.sortDescImage);
					 this.setTooltip(inBox._oBundle.getText("INBOX_SORT_INDICATOR_DESC"));
				 }else{
					 this.setSrc(inBox._imgResourcePath + sap.uiext.inbox.InboxConstants.sortAscImage);
					 this.setTooltip(inBox._oBundle.getText("INBOX_SORT_INDICATOR_ASC"));
				 }
			 }
		 });
		 actionButtonsToolBar.insertItem(sortIcon, sortIndex+2);
	 }
		 
		 //Refresh Button and Refresh Link
/*		 if (sap.ui.getCore().byId(this.getId() + '--' + 'rrRefreshImage') === undefined) {
			 
			 var refreshButton = new sap.ui.commons.Image(this.getId() + '--' + "rrRefreshImage", {
				 tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP"),
				 decorative : false
			 });
			 refreshButton.setSrc(this._imgResourcePath + sap.uiext.inbox.InboxConstants.refreshImage);
			 refreshButton.attachPress(that, that.refreshTaskList);
			 refreshButton.addStyleClass("sapUiExtInboxRefreshButtonHeight");
			 actionButtonsToolBar.insertRightItem(refreshButton, 0);
			 
			 var refreshLink = new sap.ui.commons.Link(this.getId() + '--' + "rrRefreshLink", {
				 text : this._oBundle.getText("INBOX_REFRESH_TEXT"),
				 tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP")
			 });
			 refreshLink.attachPress(that, that.refreshTaskList);
			// actionButtonsToolBar.insertRightItem(refreshLink,1);
				/}*/
		 //Here
		 var settingsButton = that._createRRSettingsMenuButton();
		 actionButtonsToolBar.insertRightItem(settingsButton, 3);
		 //Seperator
		// var seprtr = new sap.ui.commons.ToolbarSeparator();
		// actionButtonsToolBar.insertRightItem(seprtr,3);

		
	 return actionButtonsToolBar;
}

sap.uiext.inbox.Inbox.prototype.createRowRepeaterToolsContent = function(oInbox) {
	var that = oInbox;
	var oTasksRowRepeater = sap.ui.getCore().byId(that.getId() + '--'+'tasksRowRepeater');
	var rowRepeaterToolsMatLayout = new sap.ui.commons.layout.MatrixLayout(that.getId() + '--'+ 'rowRepeaterToolsMatLayout');
//	var rowRepeaterToolsMatLayout = new sap.ui.commons.layout.MatrixLayout(that.getId() + '--'+ 'rowRepeaterToolsMatLayout',{columns:3, width:"100%",widths:["40.5%","44%","5.3%"]});
//["2%","39%","46%","5%"]

	//Paginator
	var oPaginator = new sap.ui.commons.Paginator(that.getId()+ '--' +"rowRepeaterPaginator");
	oPaginator.attachPage(that, function(oEvent, inBox){
		inBox._handleRowRepeaterPaginatorClick(oEvent);
	});
		
		//Row Repeater Page Settings.
		var oSegmentedButtonIconLite = new sap.ui.commons.SegmentedButton({id:that.getId() + '--' + 'rowRepeaterRowSettingsSegBtn',
			buttons:[new sap.ui.commons.Button({id: that.getId() + '--' + '5RowsSegBtn',lite:true,text:'5',
													tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_FIVE")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent"),
			         new sap.ui.commons.Button({id: that.getId() + '--' + '10RowsSegBtn',lite:true,text:'10',
			        	 					tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_TEN")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent"),
		           new sap.ui.commons.Button({id: that.getId() + '--' + '20RowsSegBtn',lite:true,text:'20',
		          	 					tooltip:this._oBundle.getText("INBOX_SET_NUMBER_OF_ROWS_TO") +" "+ this._oBundle.getText("INBOX_NUMBER_TWENTY")}).addStyleClass("sapUiExtInboxSegmentedButtonTransparent")
	    ]});		
		oSegmentedButtonIconLite.attachSelect(function(oEvent) {
				var rowSettingValue = parseInt(sap.ui.getCore().byId(oEvent.getParameters().selectedButtonId).getText());
				var aButtons = this.getButtons();
				for (var i = 0; i < aButtons.length; i++) {
					aButtons[i].removeStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
				}
				sap.ui.getCore().byId(oEvent.getParameters().selectedButtonId).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
					oTasksRowRepeater.setNumberOfRows(rowSettingValue);
					//TODO: Need a null check here
					var numberOfRows = oTasksRowRepeater.getBinding('rows').iLength;
					that._updatePaginator(numberOfRows);
		 });
		oSegmentedButtonIconLite.setSelectedButton(that.getId() + '--' + '5RowsSegBtn');
		sap.ui.getCore().byId(oSegmentedButtonIconLite.getSelectedButton()).addStyleClass("sapUiExtInboxSegmentedButtonTransparentSelected");
	//rowRepeaterToolsMatLayout.createRow(new sap.ui.commons.TextView({text : ' '}));	
	var separatorCell = new sap.ui.commons.layout.MatrixLayoutCell(that.getId() + '--' + "separatorRRViewCell");
	var separatorView = new sap.ui.commons.TextView({id:that.getId() + '--' + 'separator',text:"|"});
	separatorCell.addContent(separatorView);
	separatorCell.setPadding(sap.ui.commons.layout.Padding.None);
	var oBorderLayout2 = new sap.ui.commons.layout.BorderLayout(that.getId() + '--'+ 'borderLayout', {width: "100%", height: "40px"});
	//oBorderLayout2.addStyleClass("sapUIExtInboxRRToolBarStyle");

//	var settingsButton = that._createRRSettingsMenuButton();
	 //Commenting this out as it creates a scrollbar in IE8, instead creating row with empty textview.
//	oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.top, new sap.ui.commons.TextView({text : ' '}));
//	oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.top, {
//		size : "10px",
//		contentAlign : "center",
//		visible : true
//	});
  
	/*oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.begin, settingsButton);
	oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.begin, {
		size : "20%",
		contentAlign : "left",
		visible : true
	});*/

	oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.center, oPaginator);
	oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.center, {
		size :"55%",
		contentAlign : "right",
		visible : true
	});

	oBorderLayout2.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.end, oSegmentedButtonIconLite);
	oBorderLayout2.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.end, {
		size : "45%",
		contentAlign : "right",
		visible : true
	});
	rowRepeaterToolsMatLayout.createRow(new sap.ui.commons.TextView({text : ' '}));//Fix For Footer scrollbar issue in IE8
	rowRepeaterToolsMatLayout.createRow(oBorderLayout2);
	return rowRepeaterToolsMatLayout;
	
};

sap.uiext.inbox.Inbox.prototype._createCustomAttributesRRViewMatrixLayout = function(customAttributeDefinitionArray,customAttributeValueArray, rowNumber) {
	var that = this;
	var oCustomAttributesRRViewMatrixLayout = new sap.ui.commons.layout.MatrixLayout({
		    layoutFixed : true,
		    width : "94%"
			});
	oCustomAttributesRRViewMatrixLayout.addStyleClass('sapUIExtInboxCustomAttributesBorder');
	
	//TODO: Use this when individual Custom Attribute can be fetched.
	var numberOfCustomAttrValues = customAttributeDefinitionArray.length;
	
	var oModel = this.getCoreModel();
	//check if columns present and if not add
	for(var counter = 1; counter<= numberOfCustomAttrValues; counter++){
				
				var index = counter - 1;		
				
				var oLabelID =  that.getId() + '--' + 'customattr'+'-label-'+'-row-'+rowNumber+'-index-' + index;
				var oTViewID = that.getId() + '--' +  'customattr'+'-value-'+'-row-'+rowNumber+'-index-' + index;
			
				var oLabel = sap.ui.getCore().byId(oLabelID);
				var oTView = sap.ui.getCore().byId(oTViewID);
				
				if(!oLabel){
					oLabel = new sap.ui.commons.Label({id :oLabelID,text : customAttributeDefinitionArray[index].Label}).data("customAttrName", customAttributeDefinitionArray[index].Name);
				}
				
				if(!oTView){
					oTView = new sap.ui.commons.TextView({id : oTViewID}).data("customAttrName",customAttributeDefinitionArray[index].Name);
				}
				oTView.setText(customAttributeValueArray[customAttributeDefinitionArray[index].Name]);
				oLabel.setLabelFor(oTView);
				//====Layout Logic STARTS===
				
				var custAttrLblValueMatLay = that._createLabelValueMatrixLayout(oLabel, oTView);
				
				if(counter % 3 === 1) {
					var oBorderLayout = new sap.ui.commons.layout.BorderLayout({width: "100%", height: "18px"});
					oBorderLayout.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.begin, custAttrLblValueMatLay);
					oBorderLayout.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.begin, {
						size : "33.33%",
						contentAlign : "left",
						visible : true
					});
				}

				if(counter % 3 === 2) {
					oBorderLayout.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.center, custAttrLblValueMatLay);
					oBorderLayout.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.center, {
						size : "33.33%",
						contentAlign : "center",
						visible : true
					});
			 if(counter === numberOfCustomAttrValues){
				 oBorderLayout.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.end, new sap.ui.commons.TextView({text:' '}));
				 oBorderLayout.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.end, {
						size : "33.33%",
						contentAlign : "left",
						visible : true
					});
					}
				}

				if(counter % 3 === 0) {
					oBorderLayout.createArea(sap.ui.commons.layout.BorderLayoutAreaTypes.end, custAttrLblValueMatLay);
					oBorderLayout.setAreaData(sap.ui.commons.layout.BorderLayoutAreaTypes.end, {
						size : "33.33%",
						contentAlign : "left",
						visible : true
					});
				}
				//====Layout Logic ENDS====
				var oCell = new sap.ui.commons.layout.MatrixLayoutCell();
				oCell.addStyleClass("sapUiExtInboxPaddingBottom");//This is to reduce the spacing between two rows of custom attributes in Row repeater.
				oCell.addContent(oBorderLayout);
				oCustomAttributesRRViewMatrixLayout.createRow(oCell);
	}
	
	return oCustomAttributesRRViewMatrixLayout;
};

sap.uiext.inbox.Inbox.prototype._currentViewElement = function() {
	var oTable = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
	var oRowRepeater = sap.ui.getCore().byId(this.getId() + '--' + 'tasksRowRepeater');
	
	var oBindingInfo, currentViewElement;
	if(this.currentView === sap.uiext.inbox.InboxConstants.tableView){
		currentViewElement = oTable;
	}else if(this.currentView === sap.uiext.inbox.InboxConstants.rowRepeaterView){
		currentViewElement = oRowRepeater;
	}
	return currentViewElement;
};

sap.uiext.inbox.Inbox.prototype._updatePaginator = function(length) {
	var oPaginator = this._getComponent('rowRepeaterPaginator'),
	oSegmentedButton = this._getComponent('rowRepeaterRowSettingsSegBtn'),
	oTasksRowRepeater = this._getComponent('tasksRowRepeater');
	
	if(!oPaginator){
		var oPaginator = new sap.ui.commons.Paginator(this.getId()+ '--' +"rowRepeaterPaginator");
		oPaginator.attachPage(this, function(oEvent, inBox){
			inBox._handleRowRepeaterPaginatorClick(oEvent);
		});
		var oBorderLayout2 =this._getComponent('borderLayout');
		if(oBorderLayout2){
			var oRRBorderlayoutCenter = oBorderLayout2.getCenter();
			if(oRRBorderlayoutCenter){
				oRRBorderlayoutCenter.addContent(oPaginator);
			}
			
		}
	}
	var rowSettingValue = sap.ui.getCore().byId(oSegmentedButton.getSelectedButton()).getText();
	oPaginator.setNumberOfPages(Math.ceil(length/rowSettingValue));
	oPaginator.setCurrentPage(1);
	oTasksRowRepeater.gotoPage(1);
};

sap.uiext.inbox.Inbox.prototype._createLabelValueMatrixLayout = function(sLabel, sValue){//TODO: Provide dynamic id to the controls.
	sLabel.addStyleClass("sapUiExtInboxCustomAttLabel").setWrapping(false);

	sValue.addStyleClass("sapUiExtInboxCustomAttValue").setWrapping(false);

var oMLCell1 = new sap.ui.commons.layout.MatrixLayoutCell({
	 hAlign : sap.ui.commons.layout.HAlign.Right,
	   vAlign : sap.ui.commons.layout.VAlign.Top,
	  padding: sap.ui.commons.layout.Padding.End,
	  content : [sLabel]
});
var oMLCell2 = new sap.ui.commons.layout.MatrixLayoutCell({
		hAlign : sap.ui.commons.layout.HAlign.Left,
		vAlign : sap.ui.commons.layout.VAlign.Top,
   padding: sap.ui.commons.layout.Padding.Begin, 
	  content : [sValue]
});

return new sap.ui.commons.layout.MatrixLayout().createRow(oMLCell1, oMLCell2);
};

sap.uiext.inbox.Inbox.prototype._getCustomActionsDefinition = function(instanceID, taskDefinitionID,sapOrigin) {
	var that = this;
	var aCustomActionArrayMap = sap.uiext.inbox.InboxConstants.taskDefinitionDecisionOptionsMap;
	var aCustomActionArray = aCustomActionArrayMap[taskDefinitionID];
	if(aCustomActionArray === undefined && instanceID){
		//TODO SAP Origin
		var oModel = this.getCoreModel();
		oModel.read(that.constants.decisionOptionsFunctionImport,null,["InstanceID='"+instanceID+"'&SAP__Origin='"+sapOrigin+"'",that.constants.formatJSONURLParam],false,function(oData, response){
			aCustomActionArray = aCustomActionArrayMap[taskDefinitionID] = oData.results;
		},function(oError){
			//TODO error message
			//that.showMessage("error", that._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
		});
	}
	return aCustomActionArray;
};

sap.uiext.inbox.Inbox.prototype._executeCustomAction = function(oEvent, eventParameters) {
	var decisionKey = oEvent.getSource().data("key");
	var inBox = eventParameters.inbox;
	var view = eventParameters.view;
	
    inBox.showBusyLoader();

    var oListTable, rowContext, oModel;
    
    var selectedIDs = [], selectedContexts = [], selectedSAPOrigins = [];
    var selectedStatus = [];
    var concatSelectedIDs = "'", concatSelectedSAPOrigins = "'";
    var comments = [];
    var selectedID, selectedSAPOrigin;
    // reset search
    inBox.resetSearchCriteria();
    var oModel = inBox.getCoreModel();
    
    if(view === inBox.constants.tableView){
    	oListTable = inBox._getComponent('listViewTable');
        if (oEvent.getSource())
            var selectedIndices = inBox.getlistTableSelectedIndices();
        
        jQuery.each(selectedIndices, function(i, selIndex) {
            rowContext = oListTable.getContextByIndex(selIndex);
            selectedContexts.push(rowContext);
            
            selectedID = oModel.getProperty("InstanceID", rowContext);
            selectedSAPOrigin = oModel.getProperty("SAP__Origin", rowContext);
            
            selectedIDs.push(selectedID);
            selectedSAPOrigins.push(selectedSAPOrigin);
            
            if (i == 0){
                concatSelectedIDs = concatSelectedIDs + selectedID;
                concatSelectedSAPOrigins = concatSelectedSAPOrigins + selectedSAPOrigin;
            }
            else{
                concatSelectedIDs = concatSelectedIDs + ";" + selectedID;
                concatSelectedSAPOrigins = concatSelectedSAPOrigins + ";" + selectedSAPOrigin;
            }
        });
        concatSelectedIDs = concatSelectedIDs + "'";
        concatSelectedSAPOrigins = concatSelectedSAPOrigins + "'";
   }else if(view === inBox.constants.rowRepeaterView){
	   var oContext = oEvent.getSource().getBindingContext();
	   selectedID = oModel.getProperty("InstanceID", oContext);
       selectedSAPOrigin = oModel.getProperty("SAP__Origin", oContext);
       
       selectedIDs.push(selectedID);
       selectedSAPOrigins.push(selectedSAPOrigin);
       
	   concatSelectedIDs = concatSelectedIDs + selectedID +"'";
	   concatSelectedSAPOrigins = concatSelectedSAPOrigins + selectedSAPOrigin +"'";
   }
	
    var IDURIPart, requestURI, requestOptions, status, selectedIDLength;
    
    selectedIDLength = selectedIDs.length;
    
    if((selectedIDLength > 1) && inBox.isBatchOperationSupported){
    	var oBatchOperation, sPath, aBatchOperations = [];
    	for(var i = 0;i < selectedIDLength; i ++){
    		sPath = inBox.constants.decisionExecutionFunctionImport + inBox.constants.query + "InstanceID='" + selectedIDs[i] + "'" + inBox.constants.amperSand + "SAP__Origin='" + selectedSAPOrigins[i] + "'" +inBox.constants.amperSand + "DecisionKey='"+ decisionKey + "'" ; 
    		if(comments && comments.length > 0){
    			sPath = sPath + "&Comments='" +  comments[i] +"'";
    		}
        	oBatchOperation = oModel.createBatchOperation(sPath,inBox.httpMethodForAction);
        	 oModel.addBatchChangeOperations([oBatchOperation]);
        }
    	//oModel.addBatchChangeOperations(aBatchOperations);
    	oModel.submitBatch(function(data,response){
 		   var batchResponses = data.__batchResponses;
	       var i, j, iChangeResLength, len;
	       var noOfErrors = 0;
	       for(i = 0, len = batchResponses.length; i < len; i++){
    	           var aChangeResponses = batchResponses[i].__changeResponses;
    	           if(aChangeResponses){
                       for(j = 0, iChangeResLength = aChangeResponses.length; j < iChangeResLength ; j++){
                           var oChangeResponse = aChangeResponses[j];
                           noOfErrors = !(oChangeResponse.statusCode >= 200 && oChangeResponse.statusCode <= 202)? noOfErrors+1 : noOfErrors;
                       }
    	           }
    	       }
	       if(noOfErrors > 0){
	    	   inBox.showMessage("error", noOfErrors + " " + inBox._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
	       }else{
	    	   inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_ACTION_SUCCESS"));
	       }
		},function(error) {
    	        inBox.showMessage("error", inBox._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
    	    },false);
    }else{
	    IDURIPart = inBox.constants.forwardSlash + inBox.constants.decisionExecutionFunctionImport + inBox.constants.query + "InstanceID=" + concatSelectedIDs + inBox.constants.amperSand + "SAP__Origin=" + concatSelectedSAPOrigins + inBox.constants.amperSand + "DecisionKey='"+ decisionKey + "'" 
	    				+ inBox.constants.amperSand + inBox.constants.formatJSONURLParam;
	    if(comments && comments.length > 0)
	    	IDURIPart = IDURIPart + "&comments='"+comments[0]+"'";
	    requestURI = inBox.bpmSvcUrl + IDURIPart;
	    
	    requestOptions = {
	         async:false,
	         requestUri : requestURI,
	         method : inBox.httpMethodForAction,
	         headers : {
	                Accept : inBox.constants.acceptHeaderforJSON,
	                "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
	         }
	    };
	
	    OData.request(requestOptions, function(data, request) {
	            inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_ACTION_SUCCESS"));
	            //update
	    }, function(error) {
	    //TODO: use enums for messageType.
	        inBox.showMessage("error", inBox._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
	    });
    }
    
    inBox.applyFilterOnResponse(selectedContexts);
    inBox.resetMessages = false;
};

sap.uiext.inbox.Inbox.prototype._deleteCustomActions = function(customActionsDefinition) {
	if(this.currentView === this.constants.tableView){
		this._deleteCustomActionsForTableView();
	}else if(this.currentView === this.constants.rowRepeaterView){
		this._deleteCustomActionsForRowRepeaterView();
	}
};

sap.uiext.inbox.Inbox.prototype._createCustomActionButtons = function(customActionsDefinition,enableButtons) {
	if(this.currentView === this.constants.tableView){
		this._createCustomActionsForTableView(customActionsDefinition,enableButtons);
	}else if(this.currentView === this.constants.rowRepeaterView){
		this._createCustomActionsForRowRepeaterView(customActionsDefinition,enableButtons);
	}
};

sap.uiext.inbox.Inbox.prototype._deleteCustomActionsForTableView = function(customActionsDefinition) {
	var that = this;
	var oActionButtonsToolBar = this._getActionButtonToolBarForTableView();
	//Get All ToolBar Iems
	var oToolBarItems = oActionButtonsToolBar.getItems();
	for(var i=0; i< oToolBarItems.length; i++){
		var oToolBarItem = oToolBarItems[i];
		if(oToolBarItem instanceof sap.ui.commons.Button &&  oToolBarItem.data("type") === that.constants.customAction){
			oActionButtonsToolBar.removeItem(oToolBarItem);
			oToolBarItem.destroy();
		}
		if(oToolBarItem instanceof sap.ui.commons.ToolbarSeparator &&  oToolBarItem.data("separatorFor") === that.constants.customAction){
			oActionButtonsToolBar.removeItem(oToolBarItem);
			oToolBarItem.destroy();
		}
	}
};


sap.uiext.inbox.Inbox.prototype._createCustomActionsForTableView = function(customActionsDefinition,enableButtons) {
	var that = this;
	var actionButtonsToolBar = this._getActionButtonToolBarForTableView();
	var noOfCustomActions = customActionsDefinition.length;
	var index = 3;
	if(noOfCustomActions > 0){
		var seprtr = new sap.ui.commons.ToolbarSeparator();
		seprtr.data("separatorFor",that.constants.customAction);
		actionButtonsToolBar.insertItem(seprtr,index);
		index++;
	}
	for(var i=0; i < noOfCustomActions; i++){
		var action = customActionsDefinition[i];
		var sDecisionButtonText = !action.DecisionText? action.DecisionKey: action.DecisionText;
		var customActionButton = new sap.ui.commons.Button(this.getId() + '--' + action.DecisionKey+'button', {
		            text : sDecisionButtonText,
		            enabled : enableButtons,
		            tooltip :  action.Description
		        }).data("type",that.constants.customAction).data("key",action.DecisionKey);
		customActionButton.attachPress({inbox:that,view:that.constants.tableView}, that._executeCustomAction);
		        actionButtonsToolBar.insertItem(customActionButton,index);
		        index++;
	}
};

sap.uiext.inbox.Inbox.prototype._createCustomActionsForRowRepeaterView = function(customActionsDefinition) {
	var that = this;
	var actionButtonsToolBar = this._getActionButtonToolBarForTableView();
	var noOfCustomActions = customActionsDefinition.length;
	
	var oRowRepeaterTemplate = this._getComponent('rrMainMatrixLayout');
	var oRowRepeaterTemplateActionLayout = this._getComponent('taskActionMatrixLayout');
	var actionRow = oRowRepeaterTemplateActionLayout.getRows()[0];
	for(var i=0; i < noOfCustomActions; i++){
		var action = customActionsDefinition[i];
		var dotLabelCell = new sap.ui.commons.layout.MatrixLayoutCell({
			id : that.getId() + '--' + 'dotLabelCell' + action.DecisionKey,
			hAlign: sap.ui.commons.layout.HAlign.Center,
			vAlign: sap.ui.commons.layout.VAlign.Top,
			colSpan : 1 });
		//DOT Seperator b/w Claim and Release Action Links
		var dotLabel = new sap.ui.commons.Label(that.getId() + '--' + 'dotLabel' + action.DecisionKey,{text:sap.uiext.inbox.InboxConstants.DOT});
		dotLabel.addStyleClass("sapUIExtInboxDotSeperatorStyle");
		dotLabel.data("separatorFor",that.constants.customAction);
		dotLabelCell.addContent(dotLabel);
		actionRow.addCell(dotLabelCell);
		
		var customActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
			id : that.getId() + '--' + 'customActionCell' + action.DecisionKey,
			hAlign: sap.ui.commons.layout.HAlign.Left,
			vAlign: sap.ui.commons.layout.VAlign.Bottom,
			colSpan : 1 });
		
		var customActionLink = new sap.ui.commons.Link(that.getId() + '--' + "rrView" + action.DecisionKey + "link",{tootltip:action.Description});
		var sDecisionLinkText = !action.DecisionText? action.DecisionKey : action.DecisionText ;
		customActionLink.data("type",that.constants.customAction);
		customActionLink.data("key",action.DecisionKey);
		customActionLink.addStyleClass("sapUiExtInboxLnkNoUnderline");
		customActionLink.setText(sDecisionLinkText);
		customActionLink.attachPress({inbox:that,view:that.constants.rowRepeaterView,action:action.DecisionKey}, that._executeCustomAction);
		customActionCell.addContent(customActionLink);
		actionRow.addCell(customActionCell);
	}
};

sap.uiext.inbox.Inbox.prototype._deleteCustomActionsForRowRepeaterView = function(customActionsDefinition) {
	var that = this;
	var oRowRepeaterTemplate = this._getComponent('rrMainMatrixLayout');
	var oRowRepeaterTemplateActionLayout = this._getComponent('taskActionMatrixLayout');
	var actionRow = oRowRepeaterTemplateActionLayout.getRows()[0];
	var actionCells = actionRow.getCells();
	for(var i=0; i < actionCells.length; i++){
		var oActionCell = actionCells[i];
		var oActionContent = oActionCell.getContent()[0];
		if(oActionContent instanceof sap.ui.commons.Link &&  oActionContent.data("type") === that.constants.customAction || oActionContent instanceof sap.ui.commons.Label &&  oActionContent.data("separatorFor") === that.constants.customAction){
			actionRow.removeCell(oActionCell);
			oActionCell.destroy();
			oActionContent.destroy();
		}
	}
};


//With Refactor this code moves to the TableView getToolBar
sap.uiext.inbox.Inbox.prototype._getActionButtonToolBarForTableView = function() {
	return this._getComponent("actionButtonsToolbarContainer");
};

//removes or adds the parameter
sap.uiext.inbox.Inbox.prototype._modifyListBindingForExpand= function(add,paramName){
	var constants = this.constants;
	var currentViewElement, oListBinding;
	 if(this.currentView === this.constants.tableView){
	    	currentViewElement = sap.ui.getCore().byId(this.getId() + '--' + 'listViewTable');
	    	if (currentViewElement !== undefined) {
	    		oListBinding = currentViewElement.getBinding('rows');
	    	}
	    }else if(this.currentView === this.constants.rowRepeaterView){
	    	currentViewElement = sap.ui.getCore().byId(this.getId() + '--'+'tasksRowRepeater');
	    	if (currentViewElement !== undefined) {
	            oListBinding = currentViewElement.getBinding('rows');
	    	}
	    }
	var mParameters = oListBinding.mParameters;
	
	if(!mParameters){
		oListBinding.mParameters = {expand:""};
	}
	
	var expandParameters = oListBinding.mParameters.expand;
	
	if(add){
		if(expandParameters){
			if(expandParameters.indexOf(constants.customAttributeNavigationParam) === -1){
				if(expandParameters.length > 0){
					expandParameters = expandParameters + "," ;
				}
				expandParameters = expandParameters + paramName;
			}
		}else{
			expandParameters = paramName;
		}
	}else{
		if(expandParameters && expandParameters.length>0){
			var index = expandParameters.indexOf(paramName);
			if(index >= 0){
				expandParameters = expandParameters.charAt(index - 1) === "," ? expandParameters.replace("," + paramName, '') :expandParameters.replace(paramName, '');
			}
		}
	}
	
	if(expandParameters.length > 0){
		oListBinding.mParameters.expand = expandParameters;
	}else{
		delete oListBinding.mParameters.expand;
	}
	
	
	function getCustomParams(mParameters){
		var aCustomParams = [],
		mSupportedParams = {
				expand: true,
				select: true
		};
		
		for (var sName in mParameters) {
			if (sName in mSupportedParams) {
				aCustomParams.push("$" + sName + "=" + jQuery.sap.encodeURL(mParameters[sName]));
			}
		}
		return aCustomParams.join("&");
	}
	
	oListBinding.sCustomParams = getCustomParams(oListBinding.mParameters);
};

sap.uiext.inbox.Inbox.prototype.populateRefreshButtonContainer = function(refreshButtonContainer) {
	var that = this;
  var refreshViewCell = new sap.ui.commons.layout.MatrixLayoutCell({
      id : this.getId() + '--' + "refreshButtonCell"
  });
  var refreshButton = new sap.ui.commons.Button(this.getId() + '--' + "refreshButton", {
    tooltip : this._oBundle.getText("INBOX_REFRESH_BUTTON_TOOLTIP")
  });
  
  refreshButton.setIcon(this._imgResourcePath + sap.uiext.inbox.InboxConstants.refreshImage);
  refreshButton.addStyleClass("sapUiExtInboxRefreshButtonTransparent");
  refreshButton.attachPress(that, that.refreshTaskList);
  refreshButton.addStyleClass("sapUiExtInboxRefreshButtonHeight");
  refreshViewCell.addContent(refreshButton);
  refreshViewCell.setPadding(sap.ui.commons.layout.Padding.None);

  
  var refreshedOnTextCell = new sap.ui.commons.layout.MatrixLayoutCell({
    id : this.getId() + '--' + "refreshedOnTextCell",
    vAlign: sap.ui.commons.layout.VAlign.Bottom,
    padding: sap.ui.commons.layout.Padding.Top
  });  
  // var separatorCell = new sap.ui.commons.layout.MatrixLayoutCell().setSeparation(sap.ui.commons.layout.Separation.Small);
  var refreshedOnText = new sap.ui.commons.Label(this.getId() + '--' + "refreshOnText");
  that.lastRefreshedOnDateTime = new Date();
  var refreshedTime = that._getFormattedRefreshOnDateTime();
  refreshedOnText.setText(that._oBundle.getText("INBOX_TEXT_ON") + sap.uiext.inbox.InboxConstants.SPACE + refreshedTime);
  refreshedOnText.setTooltip(that._getFormattedTooltipForLastRefreshedTime());
  refreshedOnText.addStyleClass("sapUiExtInboxRefreshedOnStyle");
  refreshedOnTextCell.addContent(refreshedOnText);
	refreshButtonContainer.createRow(refreshViewCell, new sap.ui.commons.Label({text:sap.uiext.inbox.InboxConstants.SPACE}), refreshedOnTextCell);
};

sap.uiext.inbox.Inbox.prototype. _getFormattedRefreshOnDateTime = function(){
	 //var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern: sap.uiext.inbox.InboxConstants.REFRESH_ON_DATE_PATTERN}); //Refreshed on Format "Sep 16, 17:22"
	 var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style : "medium"}); 
	 return oDateFormat.format(this.lastRefreshedOnDateTime);
}; 

sap.uiext.inbox.Inbox.prototype._getFormattedTooltipForLastRefreshedTime = function(){
	var oTooltipDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style : "medium"});
	return oTooltipDateFormat.format(this.lastRefreshedOnDateTime);
};	

sap.uiext.inbox.Inbox.prototype._createRRSettingsMenuButton = function(){
	var that = this;
	 var settingsButton = sap.ui.getCore().byId(this.getId() + '--' + 'rrSettingsButton');
	 //Creating Settings Button
	 if (!settingsButton) {
		 settingsButton = new sap.ui.commons.MenuButton(that.getId() + '--' + "rrSettingsButton", {
		 tooltip : that._oBundle.getText("INBOX_SETTINGS_BUTTON_TOOLTIP"),
		 icon : that._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImage,
		 iconHovered: this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImageHover,
     iconSelected: this._imgResourcePath + sap.uiext.inbox.InboxConstants.settingsImageHover,
		 lite : true
		});
		//settingsButton.addStyleClass("sapUiExtInboxToolbarRight");
	//	settingsButton.addStyleClass("sapUiExtInboxSettingsButton");
				//Creating the menu Again
		var inboxSettingsMenu = new sap.ui.commons.Menu(that.getId() + '--' +'rrSettingsMenu', {tooltip: that._oBundle.getText("INBOX_SETTINGS_BUTTON_TOOLTIP")});
		settingsButton.setMenu(inboxSettingsMenu);
		settingsButton.attachItemSelected(that, that.menuButtonActionEvent); 
		var manageSubstitutionMenuItem = new sap.ui.commons.MenuItem(this.getId() + '--' + "rrManageSubstitutionMI",{
		text: this._oBundle.getText("INBOX_MANAGE_SUBSTITUTION_RULES_MENU_ITEM"),
		tooltip: this._oBundle.getText("INBOX_MANAGE_SUBSTITUTION_RULES_TOOLTIP")
		});
		inboxSettingsMenu.addItem(manageSubstitutionMenuItem);
	 }
	 return settingsButton;
};

sap.uiext.inbox.Inbox.prototype._executeForwardAction = function(oEvent, mParameters){
	var linkSource = oEvent.getSource();
	var inbox = mParameters.inbox;
	var dynamicId = inbox.getId() + '--';
	var forwardTasksPopUp = sap.ui.getCore().byId(dynamicId + "forwardTasksPopUp");
	var oTable = sap.ui.getCore().byId(dynamicId + "userTable"); 
	if(forwardTasksPopUp===undefined){
		var dLayout = new sap.ui.commons.layout.MatrixLayout({
			id : dynamicId + 'dLayout',
			layoutFixed : true,
			width : '100%'
		});
		
		
		var oSearch = new sap.ui.commons.SearchField({
			id : dynamicId + 'oSearch',	
	        enableListSuggest: false,
	        tooltip : inbox._oBundle.getText("SUBSTIUTION_RULE_SEARCH_FOR_USERS"),//"Search For Users",
	        value: inbox._oBundle.getText("INBOX_SEARCH_FOR_A_COLLEAGUE"),
			editable : true,
	        width: '100%'});
		
		oSearch._ctrl.addStyleClass("sapUiExtInboxValueHelpTextStyle"); // styling internal variable of the SearchField control
		oSearch.onfocusin = function(){
			oSearch._ctrl.removeStyleClass("sapUiExtInboxValueHelpTextStyle");
			if(oSearch._ctrl.getLiveValue() === inbox._oBundle.getText("INBOX_SEARCH_FOR_A_COLLEAGUE")){
				oSearch.setValue("");
			}
		};
		oSearch.onfocusout = function(){
			if(oSearch._ctrl.getLiveValue() === ""){
				oSearch._ctrl.addStyleClass("sapUiExtInboxValueHelpTextStyle");
				oSearch.setValue(inbox._oBundle.getText("INBOX_SEARCH_FOR_A_COLLEAGUE"));
			}else{
				oSearch.setValue(oSearch._ctrl.getLiveValue());
			}
		};
		
		
		oSearch.attachSearch(inbox,function(oEvent,inBox){
			oEvent.oParentSource = linkSource;
			var oSearchUserResultData = inBox._handleSearchUsersClickforForward(oEvent);
			if(oSearchUserResultData){
				var oModel = new sap.ui.model.json.JSONModel();
			    oModel.setData(oSearchUserResultData);
			    oTable.clearSelection();
			    oTable.setModel(oModel);
				oTable.bindRows("/results");//fetch from configration, not to be hard coded.
				if(oSearchUserResultData.results.length > 0){ // selecting first result of the returned search user result
					oTable.setSelectedIndex(0);
				}
			}
		});

		

		dLayout.createRow(oSearch);
		var users = {
				collection: "UserInfoCollection", //fetch from configration, not to be hardcoded.
				propertiesLabel: [inbox._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_LOGONID"),
				                  inbox._oBundle.getText("SUBSTITUTION_USERS_PICKLIST_NAME")],
				properties: ["UniqueName", "DisplayName"]
		};
		if(oTable === undefined){
			oTable = new sap.ui.table.Table(dynamicId + "userTable",{selectionMode: sap.ui.table.SelectionMode.Single});
		}
		//oTable.setModel(inbox.getModel());
		//oTable.setTitle( "User Table");
		oTable.setVisibleRowCount(5);
		oTable.attachRowSelectionChange(function(){
			if(oTable.getSelectedIndices().length !== 0){
				sap.ui.getCore().byId(dynamicId + "forwardTasksPopUpFrwBtn").setEnabled(true);
			}else{
				sap.ui.getCore().byId(dynamicId + "forwardTasksPopUpFrwBtn").setEnabled(false);
			}
		});
		oTable.bDynamic=true;
		for (var i = 0; i <= users.properties.length-1; i++) {
			oTable.addColumn(
					new sap.ui.table.Column().
					setLabel(new sap.ui.commons.Label({text: inbox._oBundle.getText(users.propertiesLabel[i]),design : sap.ui.commons.LabelDesign.Bold })).
					setTemplate(new sap.ui.commons.TextField({
						editable: false,
						value: {path: users.properties[i]}}))
			);
		}

		var dLayoutCont = new sap.ui.commons.layout.VerticalLayout(dynamicId + "userDialogVLayout", {width:"100%"});
		dLayoutCont.insertContent(dLayout, 0);
		dLayoutCont.insertContent(oTable, 1);
		var selUserUniqueName;
		forwardTasksPopUp = new sap.ui.commons.Dialog(dynamicId + "forwardTasksPopUp", {modal: true,
			title : inbox._oBundle.getText("INBOX_FORWARD_SELECTED_TASKS"),//"Search For Users",
			content:[dLayoutCont],
		//	opener : sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton'),
			buttons:[new sap.ui.commons.Button(dynamicId + "forwardTasksPopUpFrwBtn",{enabled:false, text: inbox._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD"), tooltip: inbox._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD_TOOLTIP"), press:function(pressEvent){
				var table = sap.ui.getCore().byId(dynamicId + "userTable");
				var selIndex = table.getSelectedIndex();
				var rowContext = table.getContextByIndex(selIndex);
				var tabModel = sap.ui.getCore().byId(dynamicId + 'userTable').getModel();
				var selUsesDisplayName = tabModel.getProperty("DisplayName", rowContext);
				if(selUsesDisplayName === null)
					selUsesDisplayName = "";
				selUserUniqueName = tabModel.getProperty("UniqueName", rowContext);
				var parentEvent = new sap.ui.base.Event();
				parentEvent.oSource = linkSource; 
				parentEvent.mParameters = {};
				inbox.executeActionOnTask(parentEvent,{inbox:inbox,view:mParameters.view,action:"Forward",forwardTo:selUserUniqueName,source:linkSource});
				forwardTasksPopUp.close();
				forwardTasksPopUp.destroy();
			}
			})]
		});
	}
	forwardTasksPopUp.setWidth("500px"); 
	forwardTasksPopUp.open();

};


sap.uiext.inbox.Inbox.prototype._getExpandParameters = function(){
	var expand = "";
	var isCurrentViewRowRepeater = (this.currentView === this.constants.rowRepeaterView) ? true :false;
	if(this.showTaskCategory){
		expand = "TaskDefinitionData";
	}
	if((this.showTaskDescription) && isCurrentViewRowRepeater){
		if(expand.length > 0){
			expand = expand + ",";
	    }
		expand = expand + "Description";
	}
		/*if(this.isCustomAttributesEnabled && isCurrentViewRowRepeater){
		if(expand.length > 0){
			expand = expand + ",";
	    }
		expand = expand + "CustomAttributeData";
	}*/
	return expand;
};

sap.uiext.inbox.Inbox.prototype._getFilterArray = function(){
	var oFilter = [];
	for ( var item in this.filtersToApply) {
		var filter = this.filtersToApply[item];
		if(jQuery.isArray(filter)){
			oFilter = oFilter.concat(filter)
		}else
			oFilter.push(filter);
	}
	return oFilter;
};

sap.uiext.inbox.Inbox.prototype._getSelectedItemfromKey = function(oTaskTypefilterList, selectedKey){
	//need to check if with the key we can store an object. This is too much of an overhead.
	var aItems = oTaskTypefilterList.getItems();
	var key = selectedKey;
	var sapOrigin;
	
	for (var j = 0; j < aItems.length; j++) {
		if (key === aItems[j].getKey()) {
			return aItems[j];
		}
	}
};

sap.uiext.inbox.Inbox.prototype._resetFlags = function(){
	this.isSubstitutionEnabled = false;
    this.isCustomAttributesEnabled = false;
    this.isCustomActionsEnabled = false;
    this.showTaskDescription = false;
    this.showTaskCategory = false;
};

sap.uiext.inbox.Inbox.prototype._createForwardActionLinkCell = function(){
	var that = this; 
	var forwardActionCell = new sap.ui.commons.layout.MatrixLayoutCell({
    	id : that.getId() + '--' + 'forwardActionCell',
    	hAlign: sap.ui.commons.layout.HAlign.Left,
    	vAlign: sap.ui.commons.layout.VAlign.Bottom,
    	colSpan : 1 });
    
    var forwardActionLink = new sap.ui.commons.Link(that.getId() + '--' + "rrViewForwardAction",{
    	visible:false,
    	enabled:false,
    	tooltip:that._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD")
    	});
    forwardActionLink.addStyleClass("sapUiExtInboxLnkNoUnderline");
   
    //var isForwardSupported = false;
		/*if(isForwardSupported) { 
			forwardActionLink.bindProperty("visible","Status",function(value){
				if((value != null) && (value === "COMPLETED")){
					//if(sap.ui.getCore().byId(that.getId() + "--" + "dotSeparator2"))
					//sap.ui.getCore().byId(that.getId() + "--" + "dotSeparator2").setVisible(false);
					return false;
				}
				return true;
			});
	} */
    forwardActionLink.setText(that._oBundle.getText("INBOX_ACTION_BUTTON_FORWARD"));
    forwardActionLink.attachPress({inbox:that, view:that.constants.rowRepeaterView}, that._executeForwardAction);
    forwardActionCell.addContent(forwardActionLink);
    
   return  forwardActionCell;
};

/*sap.uiext.inbox.Inbox.prototype._enableForwardActionSupport = function(){
	
	this.isForwardActionEnabled = true;
	
	var forwardActionButton = sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton');
	var forwardActionLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewForwardAction');
	var dotSeperator = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator2');

	if(forwardActionButton && this.constants.tableView){
		forwardActionButton.setVisible(true);
	}
	if((forwardActionLink && dotSeperator) & this.constants.rowRepeaterView){
		forwardActionLink.setVisible(true);
		dotSeperator.setVisible(true);
	}
	
};*/ //TODO: Remove it 

sap.uiext.inbox.Inbox.prototype._setInboxFiltersVisibility= function(visiblility){
	if(visiblility ===false || visiblility === true){
		sap.ui.getCore().byId(this.getId() + '--' + "filterViewButton").setVisible(visiblility);
		sap.ui.getCore().byId(this.getId() + '--' + "filterComboBox1").setVisible(visiblility);
		sap.ui.getCore().byId(this.getId() + '--' + "filterComboBox2").setVisible(visiblility);
		sap.ui.getCore().byId(this.getId() + '--' + "filterComboBox3").setVisible(visiblility);
	}
};
sap.uiext.inbox.Inbox.prototype._setInboxViewSelectionVisibility = function(visiblility){
	if(visiblility === false || visiblility === true){
		sap.ui.getCore().byId(this.getId() + '--' + "tableViewImage").setVisible(visiblility);
		sap.ui.getCore().byId(this.getId() + '--' + "rrViewImage").setVisible(visiblility);
	}
};

sap.uiext.inbox.Inbox.prototype.resizeColumns=function(){
	var that=this;
	var width=0;
	var oTable= sap.ui.getCore().byId(that.getId() + '--' + 'listViewTable');
	var cols= oTable.getColumns();
	var taskTitleColumn="";
	jQuery.each(cols,function(index,column){
		if(that.absId(column.getId())==="TaskTitle"){
			taskTitleColumn= column;
			return false;
		}	
	});
		if(taskTitleColumn && (taskTitleColumn.getVisible()===true)&&((cols.length)&&(100/cols.length<25))){
			taskTitleColumn.setWidth("20%");
			width=100/(cols.length-1);
			jQuery.each(cols,function(index,column){
				if(that.absId(column.getId())!=="TaskTitle"){
					column.setWidth(width+"%");
				}	
				
			});
			
		}
};

sap.uiext.inbox.Inbox.prototype._isCompletedTasksSelected = function(){
	var dropdownbox =  this._getComponent('filterComboBox2');
    var isCompTasksSelected = false;
    if(dropdownbox.getSelectedItemId() === this.getId()+'--'+'li_completedTasks'){
        isCompTasksSelected = true;
    }
    return isCompTasksSelected; 
};


sap.uiext.inbox.Inbox.prototype._isDrillDownFilterSelected = function(filter){
	var bFilterApplied = false;

	var currentViewElement = this._currentViewElement();
    var currentViewElementBinding = currentViewElement.getBinding('rows');
    
	if(currentViewElementBinding &&  currentViewElementBinding.sFilterParams && currentViewElementBinding.sFilterParams.indexOf(filter) !== -1)
		bFilterApplied = true;
	
	return bFilterApplied;
};

sap.uiext.inbox.Inbox.prototype._getDefaultSort = function(){
	if(!this._defaultSort){
		this._defaultSort = new sap.ui.model.Sorter("CreatedOn", true);
	}
	return this._defaultSort;
};

sap.uiext.inbox.Inbox.prototype._clearCustomAttributeSort = function(){
	var oTable = this._getComponent('listViewTable');
    var oBinding = oTable.getBinding("rows");
    if(oBinding.sSortParams.indexOf(this.constants.customAttributeNavigationParam) !== -1){
    	oBinding.createSortParams(oBinding.aSorters);
    }
};


sap.uiext.inbox.Inbox.prototype._updateViewElementsOnRequestCompleted = function(iLength){
	if(this.currentView === this.constants.tableView){
		this._updateTableOnRequestCompleted();
	}else if(this.currentView === this.constants.rowRepeaterView){
		this._updateRowRepeaterOnRequestCompleted(iLength);
	}
};


sap.uiext.inbox.Inbox.prototype._updateTableOnRequestCompleted = function(){
	var oRowContext, aSelectedStatus = [];
    var oSupportsAction = {
    		aSupportsClaim:[],
    		aSupportsRelease:[],
    		aSupportsForward:[]
    };
    var oCurrentViewElement = this._currentViewElement();
    var aSelectedContexts = this.selectedContexts;
    var aIndexes = this._getTableIndicesByContext(aSelectedContexts,oCurrentViewElement);
    var oModel = oCurrentViewElement.getModel();
    var that = this;
    
    jQuery.each(aIndexes, function(i, index) {
    	oRowContext = oCurrentViewElement.getContextByIndex(index);
    	aSelectedStatus.push(oModel.getProperty("Status", oRowContext));
    	oSupportsAction.aSupportsClaim.push(oModel.getProperty("SupportsClaim", oRowContext));
    	oSupportsAction.aSupportsRelease.push(oModel.getProperty("SupportsRelease", oRowContext));
    	if(that.isForwardActionEnabled){
    		oSupportsAction.aSupportsForward.push(oModel.getProperty("SupportsForward", oRowContext));
    	}
    });
    
  this.inboxUtils.reselectRowsinTable(aIndexes,oCurrentViewElement);
	this.selectedContexts = [];
	
	if(this.isCustomActionsEnabled){
    	if(aIndexes.length === 0){
    		this._createCustomActionsonRequestCompleted();
    	}
	}
	this.disableActionButtonsOnMultiStatus(aSelectedStatus, oSupportsAction);
};

sap.uiext.inbox.Inbox.prototype._updateRowRepeaterOnRequestCompleted = function(iLength){
	this._updatePaginator(iLength);
};

sap.uiext.inbox.Inbox.prototype._getTableIndicesByContext = function(aContexts,oTableElement){
	var aIndexes = [];
	var oBinding = oTableElement.getBinding('rows');
	//getContexts() method for oDataListBinding takes parameters - start and iLength, which is not documented in the API reference
	//If no values are passed for these parameters, this method only returns array os contexts whose size is model.iSizeLimit.
	//To get all the contexts, we are using the internal iLength property of binding and passing it as the length parameter.
	var aBoundContextList = oBinding.getContexts(0, oBinding.iLength);
	var oModel = oTableElement.getModel();
	var index = -1;
	jQuery.each(aContexts, function(i, oContext) {
		jQuery.each(aBoundContextList, function(j, oBoundContext){
			if(oContext.sPath === oBoundContext.sPath){
				index = j;
				return false;
			}
		});
		if(index > -1){
			aIndexes.push(index);
		}
	});
	return aIndexes;
};


sap.uiext.inbox.Inbox.prototype._createCustomActionsonRequestCompleted = function(){
	var isCompletedTasksSelectedinDD =  this._isCompletedTasksSelected();
	var bTaskDefinitionFilter = this._isTaskDefinitionFilterApplied();
	if(bTaskDefinitionFilter && !isCompletedTasksSelectedinDD){
		var oTaskTypefilterList = this._getComponent("INBOX_FILTER_TASK_TYPE");
		var aSelectedKeys = oTaskTypefilterList.getSelectedKeys();
		if(aSelectedKeys && aSelectedKeys.length === 1){
			var oSelItem = this._getSelectedItemfromKey(oTaskTypefilterList,aSelectedKeys[0])
			var aCustomActionsDefinitionArray = this._getCustomActionsDefinition(null,aSelectedKeys[0],oSelItem.data("SAP__Origin"));
			this._deleteCustomActionsForTableView();
		            //create Columns
		    if(aCustomActionsDefinitionArray && aCustomActionsDefinitionArray.length>0)
		    	this._createCustomActionButtons(aCustomActionsDefinitionArray, false);
		}else{
			this._deleteCustomActionsForTableView();
		}
	}else{
		this._deleteCustomActionsForTableView();
	}
};

sap.uiext.inbox.Inbox.prototype._isTaskDefinitionFilterApplied = function(){
	var oCurrentViewElement = this._currentViewElement();
    var oCurrentViewElementBinding = oCurrentViewElement.getBinding('rows');
    return (oCurrentViewElementBinding.sFilterParams.indexOf('TaskDefinitionID') !== -1);
};

sap.uiext.inbox.Inbox.prototype._handleRequestSent = function(oEvent){
	if(this.bRefreshStartFlag){
		this.bRefreshStartFlag = false;
		var refreshButton = this._getComponent('refreshButton');
		refreshButton.setIcon(this._imgResourcePath + sap.uiext.inbox.InboxConstants.refreshImageGif);
	}
}

sap.uiext.inbox.Inbox.prototype._handleRequestCompleted = function(oEvent){
	if(oEvent.getParameter("url").indexOf(this.constants.UserInfoCollection) !== -1){
		return;
	}
	
	var taskTypeFilterList = this._getComponent("INBOX_FILTER_TASK_TYPE");
	
	var sInitialFilterAppliedforTaskType = taskTypeFilterList ? this._isInitialFilterAppliedforTaskType(taskTypeFilterList) : false;
	
    //refresh Tasks , in case Task Type filter is not applied.
    if((sInitialFilterAppliedforTaskType || !this._isTaskDefinitionFilterApplied()) && this.bRefreshTaskTypes){
            this.refreshTaskTypes();
    }
    
    if(sInitialFilterAppliedforTaskType){
    	this._setInitialFilterKeysforTaskType(taskTypeFilterList);
    }
    
    //reset refresh Task Types flag
    this.bRefreshTaskTypes = true;

    this.hideBusyLoader();
    
    var iLength = this._getCurrentViewElementBindingLength();
    
    this._displayMessageOnRequestCompleted(iLength);
    
    //update the view Elements
    this._updateViewElementsOnRequestCompleted(iLength);
    
    //reset refresh gif
    var oRefreshButton = this._getComponent('refreshButton');
    oRefreshButton.setIcon(this._imgResourcePath + this.constants.refreshImage);
    
    //fire event
    var oDataEventParams = oEvent.getParameters();
    oDataEventParams.bindingLength = iLength;
    oDataEventParams.appliedFilter = this._getComponent('filterComboBox2').getValue();;
    this.fireODataRequestCompleted(oDataEventParams);
    
    //apply Search
    this._applySearch();
};


sap.uiext.inbox.Inbox.prototype._applySearch = function(){
	var oSearchField = this._getComponent('searchField');
	var sSearchText = oSearchField.getValue();
	if(sSearchText !== "" && sSearchText !== null){
		oSearchField.fireSearch({query:sSearchText});
	}
};

sap.uiext.inbox.Inbox.prototype._displayMessageOnRequestCompleted = function(iLength){
    if (iLength <= 0) {
		this.showMessage("info", this._oBundle.getText("INBOX_MSG_FOR_NO_DATA"));
	} else {
		if (this.resetMessages === true){
			this.deleteMessage();
		}else{
			this.resetMessages = true;
		}
	}
};

/**
 * get binding length of the element which displays tasks on the current View
 */
sap.uiext.inbox.Inbox.prototype._getCurrentViewElementBindingLength = function(){
	var oCurrentViewElement = this._currentViewElement();
    var oCurrentViewElementBinding = oCurrentViewElement.getBinding('rows');
    return oCurrentViewElementBinding.iLength;
};


/**
 * select the row in the table to which the element belongs to
 * SId: element ID whose parent row has to be selected 
 */
sap.uiext.inbox.Inbox.prototype._selectParentRowforElement = function(sId){
	var iIndex = -1;
	var $target = jQuery.sap.byId(sId);
	var $row = $target.closest(".sapUiTableCtrl>tbody>tr");
	if ($row.length === 1) {
		iIndex = parseInt($row.attr("data-sap-ui-rowindex"), 10);
	}
	var oTable = this._getComponent('listViewTable');
	oTable.setSelectedIndex(iIndex);
};

sap.uiext.inbox.Inbox.prototype._handleTaskTitleLinkPress = function(oEvent){
	this.showBusyLoader();

	this._selectParentRowforElement(oEvent.getSource().getId());

	var oContext = oEvent.getSource().getBindingContext();
	var oModel = this.getCoreModel();
                 
	var aTaskExecutionURLs = [], aTaskExecIDs = [], aTaskExecTitles = [], aTaskExecSAPOrigins = [];

	aTaskExecIDs.push(oModel.getProperty("InstanceID", oContext));
	aTaskExecTitles.push(oModel.getProperty("TaskTitle", oContext));
	aTaskExecSAPOrigins.push(oModel.getProperty("SAP__Origin", oContext));

	if (this.getTaskExecutionURLCallBack != "" && this.getTaskExecutionURLCallBack != undefined && this.getTaskExecutionURLCallBack !== null){
		aTaskExecutionURLs.push(this.getTaskExecutionURLCallBack(aTaskExecIDs[0],aTaskExecSAPOrigins[0]));
	}else{
		aTaskExecutionURLs.push("");
	}

	var evt = oEvent.getParameter("windowEvent");
	if(!evt.ctrlKey && !(evt.button==1) && !evt.shiftKey && !this.openTaskExecutionUIOpenInNewTab){
	    this.populateTaskExecutionContent({
	    	aSelectedContexts: [oContext],
	        arrayURLs : aTaskExecutionURLs,
	        arrayIDs : aTaskExecIDs,
	        arrayTitles : aTaskExecTitles,
	        aTaskSAPOrigins : aTaskExecSAPOrigins
	    });
	    this.hideBusyLoader();
	}else{
		this.hideBusyLoader();
	    var sTaskExecutionThemeURL = this.getTaskExecutionURLThemeValue();
	    var windowURL = aTaskExecutionURLs[0];
	    if (sTaskExecutionThemeURL != null) {
	    	windowURL = windowURL+sTaskExecutionThemeURL;
	    }
		var taskExecWindow = window.open(windowURL);
		taskExecWindow.focus();
		oEvent.preventDefault();
	}
};

sap.uiext.inbox.Inbox.prototype._initFlagsByModel = function(){
	if (this.oModel instanceof sap.ui.model.json.JSONModel) {
		this.typeOfModel = "JSON";
		this.setHandleBindings(false);
	    this._resetFlags();
	} else if (this.oModel instanceof sap.ui.model.odata.ODataModel) {
	    this.typeOfModel = "OData";
	    this.attachTaskAction(this, this.defaultActionHandler);
	    this.setHandleBindings(true);
	} else if (this.oModel instanceof sap.ui.model.xml.XMLModel) {
	    this.typeOfModel = "xml";
	    this.setHandleBindings(false);
	    this._resetFlags();
	}
};

/**
 * Event Handler for Request Failed for the Model
 */
sap.uiext.inbox.Inbox.prototype._handleRequestFailed = function(oEvent){
	var oEventParams = oEvent.mParameters;
	if((oEventParams.message !== "Request aborted") && oEventParams.statusCode){
		var sErroMessageKey = (oEvent.mParameters.statusCode === 401) ? "INBOX_MSG_USER_NOT_AUTHORIZED" : "INBOX_MSG_NO_ODATA_SRVC";
		this.showMessage("error", this._oBundle.getText(sErroMessageKey));
	}

	this.hideBusyLoader();
};

sap.uiext.inbox.Inbox.prototype._applySortOnView = function(oSorter){
	var mEntitiesToElementsMeta = this.constants.mEntitiesToElements.taskMetadata;
	if(this.currentView === this.constants.tableView){
		this._applySortOnTableView(oSorter, mEntitiesToElementsMeta);
	}else if(this.currentView === this.constants.rowRepeaterView){
		this._applySortOnRowRepeaterView(oSorter, mEntitiesToElementsMeta);
	}
};

sap.uiext.inbox.Inbox.prototype._applySortOnTableView = function(oSorter, mEntitiesToElementsMeta){
	//TODO : check if this is a good way to create big objects?
	var mColumnsMap = mEntitiesToElementsMeta.sap_inbox_list.columnsMap;
	
	var oListView = this._getComponent('listViewTable');
	
	var aColumns = oListView.getColumns();
	for (var i = 0, l = aColumns.length; i < l; i++) {
		aColumns[i].setSorted(false);
	}

	if(oSorter){
		var oColumn, oColumnID;
		var sPath = oSorter.sPath;

		if(sPath.indexOf(this.constants.customAttributeNavigationParam)!==-1){
			oColumnID = sPath.replace(this.constants.customAttributeNavigationParam,"");
			oColumnID = oColumnID.replace(/^\//,"");
		}else{
			var oColumnID = mColumnsMap[sPath];
		}
		var oColumn = oColumnID ? this._getComponent(oColumnID) : undefined;
		if(oColumn){
			var sortOrder = oSorter.bDescending ? sap.ui.table.SortOrder.Descending : sap.ui.table.SortOrder.Ascending
			oColumn.setSortOrder(sortOrder);
			oColumn.setSorted(true);
		}
	}
};

sap.uiext.inbox.Inbox.prototype._applySortOnRowRepeaterView = function(oSorter, mEntitiesToElementsMeta){
	var mSorterMap = mEntitiesToElementsMeta.sap_inbox_stream.sorterMap;
	var oRowRepeaterSortCombobox = this._getComponent('sortByFilterComboBox');
	
	if(oSorter){
		var oColumn, oColumnID;
		var sPath = oSorter.sPath;

		var sSorterID = mSorterMap[sPath];
		if(sSorterID){
			oRowRepeaterSortCombobox.setSelectedItemId(this.getId()+'--'+sSorterID);
			this._updateRowRepeaterSortImage(oSorter.bDescending);
   			var sSorterID = this.constants.mRRSortMap[sSorterID];
   			var oRowRepeaterSorter = this._getComponent(sSorterID).getSorter();
   			if(oRowRepeaterSorter){
   				oRowRepeaterSorter.bDescending = oSorter.bDescending;
   			}
		}else{
			var oEmptyListItem = this._getComponent('li_empty');
			if(!oEmptyListItem)
				oEmptyListItem = new sap.ui.core.ListItem(this.getId() + '--' + "li_empty", {
					text : this._oBundle.getText("")
			});
			oRowRepeaterSortCombobox.insertItem(oEmptyListItem,0);
			oRowRepeaterSortCombobox.setSelectedItemId(this.getId() + '--' + "li_empty");
			var sortImage  = this._getComponent('sortImage');
			sortImage.setVisible(false);
		}
		
	}
};


sap.uiext.inbox.Inbox.prototype._updateRowRepeaterSortImage = function(bDescending){
	var sortImage  = this._getComponent('sortImage');
	sortImage.setVisible(true);
	if(bDescending){
		sortImage.setSrc(this._imgResourcePath + this.constants.sortDescImage);
		sortImage.setTooltip(this._oBundle.getText("INBOX_SORT_INDICATOR_DESC"));
	}else{
		sortImage.setSrc(this._imgResourcePath + this.constants.sortAscImage);
		sortImage.setTooltip(this._oBundle.getText("INBOX_SORT_INDICATOR_ASC"));
	}
};

sap.uiext.inbox.Inbox.prototype._getFirstColumnContentTemplate = function(){
	var that = this;
	
	//create category image
	var oCategoryImage = that._createTaskCategoryImage();
		
	//create task link
	var oTaskLink = that._createTaskLink();
	    
	//create image for attachments
	var oAttachmentImage = that._createAttachmentsImage();
	
	//create image for comments
	var oCommentImage = that._createCommentsImage();
	
	//Creating Horizontal Layout
	var oFirstColHorLay = that._getComponent('firstColumnLayout');
	if(!oFirstColHorLay){
		oFirstColHorLay = new sap.ui.commons.layout.HorizontalLayout({
			id : that.getId() + '--' + "firstColumnLayout",
			content:[oCategoryImage, oTaskLink, oAttachmentImage, oCommentImage]
		});
	}
	return oFirstColHorLay;
};

sap.uiext.inbox.Inbox.prototype._createTaskCategoryImage = function(){
	var that = this;
	var oCategoryImage = that._getComponent('taskCategoryImg');
	if(!oCategoryImage){
		oCategoryImage = new sap.ui.commons.Image({
				id : that.getId() + '--' + "taskCategoryImg",
				decorative : false,
				enable : false
		})			//.addStyleClass("sapUiExtInboxMarginForTableColumnStyle");
	}
	
	oCategoryImage.bindProperty("src", that.constants.taskDefinitionNavigationParam, function(taskDefinitionData){
		if(taskDefinitionData != null && taskDefinitionData !== ""){
			var oModel = that.getCoreModel();
			var oContext = this.getBindingContext();
			var categoryEntry = taskDefinitionData[0];
			var taskDefEntry = oModel.oData[categoryEntry];
			var categoryValue;
			if(taskDefEntry){
				categoryValue = taskDefEntry.Category;
				this.setVisible(true);
			}else{
				categoryValue = taskDefinitionData.Category;
				this.setVisible(true);
			}
			
			categoryValue=categoryValue.toUpperCase();
			
			if (categoryValue == "TASK" || categoryValue == "NOTIFICATION" || categoryValue == "TODO" || categoryValue == "ALERT") {
			   	this.setTooltip(that._oBundle.getText(that.constants.taskCategoryToolTip[categoryValue]));
				return that._imgResourcePath + that.constants.taskCategoryImages[categoryValue];
			}
		}
		return that._imgResourcePath + that.constants.taskCategoryImage;
	}); 
	
	return oCategoryImage;	
};

sap.uiext.inbox.Inbox.prototype._createTaskLink = function(){
	var that = this;
	var oTaskLink = new sap.uiext.inbox.InboxLink().addStyleClass("sapUiExtInboxMarginForTableColumnStyle");
	oTaskLink.addDelegate({
	      onAfterRendering : function() {
	          if (!this.getEnabled()) {
	              this.addStyleClass('sapUiExtInboxLnkDsbl');
	          }
	      }
	  });
	var taskTitleProperty = that.constants.mEntities.taskMetadata.properties[0];
	oTaskLink.bindProperty("text", taskTitleProperty,function(value){
		if(this.getBindingContext() ===  undefined)
		   return undefined;
		else
			return value;
	});
	oTaskLink.bindProperty("overdue","CompletionDeadLine", function(value){
		return that._isOverDue(value);
	});		
	oTaskLink.bindProperty("tooltip", taskTitleProperty);
	oTaskLink.bindProperty("enabled", "Status", function(value) {
	    if (!that.getOpenCompletedTasks() && value === "COMPLETED") {
	      	this.addStyleClass("sapUiExtInboxLnkDsbl");
	      	return false;
	      }
	      this.removeStyleClass("sapUiExtInboxLnkDsbl");
	      return true;
	  });
	
	oTaskLink.attachPress(this, function(oEvent, that) { 
	  											that._handleTaskTitleLinkPress(oEvent);
	  										});
	
	return oTaskLink;
};

sap.uiext.inbox.Inbox.prototype._createAttachmentsImage = function(){
	var that = this;
	var oAttachmentImage = that._getComponent('taskAttachmentImage');
	if(!oAttachmentImage){
		oAttachmentImage = new sap.ui.commons.Image({
				id : that.getId() + '--' + "taskAttachmentImage",
				text : "",
				decorative : false,
				src : that._imgResourcePath + that.constants.attachmentsImage
		}).addStyleClass("sapUiExtInboxMarginForTableColumnStyle");
	}

	oAttachmentImage.bindProperty("visible", "HasAttachments", function(value) {
			if (value != null && value !== "") {
					return value;
			}
			return false;
	});
	
	return oAttachmentImage;
};

sap.uiext.inbox.Inbox.prototype._createCommentsImage = function(){
	var that = this;
	var oCommentImage = that._getComponent('taskCommentImage');
	if(!oCommentImage){
		oCommentImage = new sap.ui.commons.Image({
				id : that.getId() + '--' + "taskCommentImage",
				text : "",
				decorative : false,
				src : that._imgResourcePath + that.constants.commentsImage
		}).addStyleClass("sapUiExtInboxMarginForTableColumnStyle");
	}
	
	oCommentImage.bindProperty("visible", "HasComments", function(value) {
		if (value != null && value !== "") {
			return value;
		}
		return false;
	});
	
	return oCommentImage;
};

sap.uiext.inbox.Inbox.prototype._handleTaskCategoryVisibility = function(){
	//Handle visibility of category
	if(!this.showTaskCategory){
		var tableCategoryImage = this._getComponent('taskCategoryImg');
		tableCategoryImage.setVisible(false);
	}
};

sap.uiext.inbox.Inbox.prototype._setCommentsVisibility = function(){
	 if(this.isCommentsEnabled){
		 	var oCommentsButton = this._getComponent("commentsSegBtn");
			//TODO: This needs to be changed to use 'SupportComments' from the service metadata.
		 	//oCommentsButton.setVisible(true);
		 	oCommentsButton.bindProperty("visible","SupportsComments", function(value) {
				if (value != null && value !== "") {
					return value;
				}
				return false;
			});
			
		 	oCommentsButton.attachPress(this, function(oEvent, that) {
				that._handleActionButtonToggleinRowRepeater(oEvent);
			});
	}
};

sap.uiext.inbox.Inbox.prototype._initTableView = function(){
	 var oTable = this._getComponent("listViewTable");
	 oTable.setModel(this.oModel);
	 return oTable;
};

sap.uiext.inbox.Inbox.prototype._initRowRepeaterView = function(){
	var oTasksRowRepeater = this._getComponent('tasksRowRepeater');
	oTasksRowRepeater.setModel(this.oModel);
	var oRowRepeaterTemplate = this._getComponent('rrMainMatrixLayout');
	return oTasksRowRepeater;
};

sap.uiext.inbox.Inbox.prototype._createCustomAttributes = function(aAttributes){
	if(this.isCustomAttributesEnabled){
	    if(aAttributes.length===1 && (this.currentView === this.constants.tableView)){
	        //getCustomAttribute Metadata
	    	//TODO : only if the view is Grid View
	    	this._modifyListBindingForExpand(true,this.constants.customAttributeNavigationParam);
	        var customAttributeDefinitionArray = this._getCustomAttributeMetaData(aAttributes[0].getKey(),aAttributes[0].data("SAP__Origin"));
	        this._deleteCustomAttributeColumns(customAttributeDefinitionArray);
	        //create Columns
	        if(customAttributeDefinitionArray && customAttributeDefinitionArray.length>0)
	            this._createCustomAttributeColumns(customAttributeDefinitionArray);
	    }else{
	    	this._modifyListBindingForExpand(false,this.constants.customAttributeNavigationParam);
	        //change to delete all columns other than the fixed..... 
	        this._deleteCustomAttributeColumns(null);
	    }
	}
};

sap.uiext.inbox.Inbox.prototype._createCustomActions = function(aAttributes){
	if(this.isCustomActionsEnabled){
	    if(aAttributes.length===1){
	    	this._deleteCustomActions();
	    	var isCompletedTasksSelectedinDD =  this._isCompletedTasksSelected();
	        //getCustomAttribute Metadata
	    	//TODO : only if the view is Grid View
	    	if(!isCompletedTasksSelectedinDD){
	    		var aCustomActionsDefinitionArray = this._getCustomActionsDefinition(aAttributes[0].data("InstanceID"),aAttributes[0].getKey(),aAttributes[0].data("SAP__Origin"));
	    		//create Columns
	    		if(aCustomActionsDefinitionArray && aCustomActionsDefinitionArray.length>0)
	    			this._createCustomActionButtons(aCustomActionsDefinitionArray, false);
	    	}
	    }else{
	        //change to delete all columns other than the fixed..... 
	        this._deleteCustomActions(null);
	    }
	}
};

sap.uiext.inbox.Inbox.prototype._selectInitialValueinDropDown = function(oPrimaryFilter){
	var oTasksDDBox = this._getComponent("filterComboBox2");
	var oPrimaryFilterValue = oPrimaryFilter? oPrimaryFilter.getFilter() : undefined ; 
	var sTaskItemIdtobeSelected = oPrimaryFilterValue? oPrimaryFilterValue.key : "li_openTasks";
	sTaskItemIdtobeSelected = this.getId()+ '--' + sTaskItemIdtobeSelected; 
	if(oTasksDDBox.getSelectedItemId() !== sTaskItemIdtobeSelected){
		oTasksDDBox.setSelectedItemId(sTaskItemIdtobeSelected);

    	var oSelectItem = sap.ui.getCore().byId(sTaskItemIdtobeSelected);
    	oTasksDDBox.fireChange({oSource: oTasksDDBox, newValue: oSelectItem.getText(), selectedItem: oSelectItem});
    }
};

sap.uiext.inbox.Inbox.prototype._addFilterToFilterMetadata = function(oFilter, aFiltersTobeApplied){
	if(jQuery.isArray(oFilter)){
		aFiltersTobeApplied = aFiltersTobeApplied.concat(oFilter);
	}else{
		aFiltersTobeApplied.push(oFilter);
	}
	return aFiltersTobeApplied;
};


sap.uiext.inbox.Inbox.prototype._selectFilterValuesinFacetFilterView = function(oSecondaryFilter, aFilters, appliedDropDownFilter){
	var attributesTobeSelected = oSecondaryFilter.getFilterUIKeys();
	
	var oFacet = sap.ui.getCore().byId(this.getId()+'--'+"filterFacet");
	
	var prioFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_PRIORITY");
	var statusFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_STATUS");
	var dateTimeFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_CREATION_DATE");
	var taskTypeFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_TASK_TYPE");
	var dueDateTimeFilterList = sap.ui.getCore().byId(this.getId()+'--'+"INBOX_FILTER_DUE_DATETIME");
	
	var aTaskInitialFilters = [];
	
	if(taskTypeFilterList && oFacet.indexOfList(taskTypeFilterList) !== -1 && attributesTobeSelected.TaskType && attributesTobeSelected.TaskType.length > 0){
    	taskTypeFilterList.data("initialFilterKeysToSelect",attributesTobeSelected.TaskType);
		//taskTypeFilterList.setSelectedKeys(attributesTobeSelected.TaskType);
	    if(aFilters.TaskType !== undefined && aFilters.TaskType.length > 0){
	    	aTaskInitialFilters.push(aFilters.TaskType);
        }
	}else{
		this.clearFiltersForTaskType();
	}
	if(prioFilterList && oFacet.indexOfList(prioFilterList) !== -1 && attributesTobeSelected.Priority && attributesTobeSelected.Priority.length > 0){
	    prioFilterList.setSelectedKeys(attributesTobeSelected.Priority);
	    if(aFilters.Priority !== undefined && aFilters.Priority.length > 0){
       	 aTaskInitialFilters.push(aFilters.Priority);
        }
	}else{
   	 this.clearFiltersForPriority();
    }
	
	if(statusFilterList && oFacet.indexOfList(statusFilterList) !== -1 && attributesTobeSelected.Status && attributesTobeSelected.Status.length > 0){
	    statusFilterList.setSelectedKeys(attributesTobeSelected.Status);
	    if(aFilters.Status !== undefined && aFilters.Status.length > 0 ){
       	 if ((appliedDropDownFilter.sPath === "Status")
       	            && (appliedDropDownFilter.sOperator === "NE")) {
       		 appliedDropDownFilter = undefined;
       		 delete this.filtersToApply.dropDownFilter;
       	 }
       	 aTaskInitialFilters.push(aFilters.Status);
        }
	}else{
    	this.clearFiltersForStatus();
    }
	
	if(dateTimeFilterList && oFacet.indexOfList(dateTimeFilterList) !== -1 && attributesTobeSelected.StartDate && attributesTobeSelected.StartDate.length > 0){
	    dateTimeFilterList.setSelectedKeys(attributesTobeSelected.StartDate);
	    if(aFilters.StartDate !== undefined){
       	 aTaskInitialFilters.push(aFilters.StartDate);
        }
	}else{
   	 this.clearFiltersForDateTime();
    }
	
	if(dueDateTimeFilterList && oFacet.indexOfList(dueDateTimeFilterList) !== -1 && attributesTobeSelected.DueDate && attributesTobeSelected.DueDate.length > 0){
	    dueDateTimeFilterList.setSelectedKeys(attributesTobeSelected.DueDate);
	    if(aFilters.DueDate !== undefined){
       	 aTaskInitialFilters.push(aFilters.DueDate);
        }
	}else{
   	 this.clearFiltersForDueDate();
    }
	
	var aFiltersTobeApplied = [];
	for ( var i=0; i < aTaskInitialFilters.length; i++) {
			var oFilter = aTaskInitialFilters[i];
			aFiltersTobeApplied = this._addFilterToFilterMetadata(oFilter, aFiltersTobeApplied);
	}
	
	if(appliedDropDownFilter){
		aFiltersTobeApplied = this._addFilterToFilterMetadata(appliedDropDownFilter, aFiltersTobeApplied);
		this.filtersToApply.dropDownFilter = appliedDropDownFilter;
	}
	return aFiltersTobeApplied;
};

sap.uiext.inbox.Inbox.prototype._setInitialFilterKeysforTaskType = function(taskTypeFilterList){
	if(taskTypeFilterList.getItems().length > 0 && taskTypeFilterList.data("initialFilterKeysToSelect") != null){
		taskTypeFilterList.setSelectedKeys(taskTypeFilterList.data("initialFilterKeysToSelect"));
		taskTypeFilterList.data(null);
	}
}

sap.uiext.inbox.Inbox.prototype._isInitialFilterAppliedforTaskType = function(taskTypeFilterList){
	//TODO: store facet class level
	return taskTypeFilterList? ((taskTypeFilterList.data("initialFilterKeysToSelect") != null)? true : false) : false;
};

sap.uiext.inbox.Inbox.prototype._getTaskStatus= function(value,statusLabel){
	var bSupported= this.oTcmMetadata.serviceSupportsFilterOption;
	var transStatus= this._oBundle.getText(sap.uiext.inbox.InboxConstants.statusMap[value]);
   	if(bSupported && statusLabel){
   		return statusLabel;
   	}
   	else if(transStatus){
   		return transStatus;
   	}
   	else if(!transStatus){
   		return value;
   	}
   	else {
   		return "";
   	}
	
};

sap.uiext.inbox.Inbox.prototype._manageVisibilityOfSettingsButton = function(settingsButton) {
	if(settingsButton != null) {
		var shouldBeVisible = false;
		var menu = settingsButton.getMenu();
		if(menu != null) {
			var menuItems = menu.getItems();
			var noOfMenuItems = menuItems.length;
			for(var menus = 0; menus < noOfMenuItems; menus++) {
				var menuItem = menuItems[menus];
				if(menuItem.getVisible() && menuItem.getEnabled()) {
					shouldBeVisible = true;
					break;
				}
			}
		}
		settingsButton.setVisible(shouldBeVisible);
	}
};

sap.uiext.inbox.Inbox.prototype._handleRowRepeaterPaginatorClick = function(oEvent) {
	var newPage = oEvent.getParameter("targetPage");
	var oldPage = oEvent.getParameter("srcPage");
	var oTasksRowRepeater = this._getComponent('tasksRowRepeater');
	if(oTasksRowRepeater){
		oTasksRowRepeater.gotoPage(newPage);
	}
};

sap.uiext.inbox.Inbox.prototype._getCustomAttributeContentforRowRepeater = function(oCustomAttrToggleButton, rowNumber){
	var sSelectedTaskDefinition = this.getModel().getProperty("TaskDefinitionID",oCustomAttrToggleButton.getParent().getBindingContext());
	var sSelectedTaskInstance = this.getModel().getProperty("InstanceID",oCustomAttrToggleButton.getParent().getBindingContext()); 
	var sSapOrigin = this.getModel().getProperty("SAP__Origin",oCustomAttrToggleButton.getParent().getBindingContext());
	var aCustomAttributeDefinitionArray = this._getCustomAttributeMetaData(sSelectedTaskDefinition,sSapOrigin);
	if(aCustomAttributeDefinitionArray && aCustomAttributeDefinitionArray.length>0){
		var aCustomAttributeValueArray = this._getCustomAttributeData(sSelectedTaskInstance,sSapOrigin);
		
		return this._createCustomAttributesRRViewMatrixLayout(aCustomAttributeDefinitionArray,aCustomAttributeValueArray,rowNumber);
	}
};

sap.uiext.inbox.Inbox.prototype._getCommentsContentforRowRepeater = function(oCommentsToggleButton, rowNumber){
	//create Content to be displayed
	var sSelectedTaskInstance = this.getModel().getProperty("InstanceID",oCommentsToggleButton.getParent().getBindingContext()); 
	var sSapOrigin = this.getModel().getProperty("SAP__Origin",oCommentsToggleButton.getParent().getBindingContext());
	var oInbxTComm = this._getComponent("comments-"+rowNumber);
	if(!oInbxTComm){
		var oInbxTComm = new sap.uiext.inbox.composite.InboxTaskComments(this.getId()+"--"+"comments-"+rowNumber);
		oInbxTComm.attachCommentSubmit(this, this.handleCommentAdded);
	}
	oInbxTComm.data("instanceID",sSelectedTaskInstance);
	oInbxTComm.data("SapOrigin",sSapOrigin);
	var aComments = this._getComments(sSelectedTaskInstance, sSapOrigin);
	var oCommentsModel = new sap.ui.model.json.JSONModel();
	oCommentsModel.setData(aComments);
	oInbxTComm.setModel(oCommentsModel);
	var oCommentTemplate = new sap.uiext.inbox.composite.InboxComment({
		sender: "{CreatedByName}",
		text: "{Text}",
	});
	oCommentTemplate.bindProperty("timestamp","CreatedAt",this.tooltipFormatForDateTime)
	oInbxTComm.bindAggregation("comments",{path:"/",template: oCommentTemplate});
	
	return oInbxTComm;
};

sap.uiext.inbox.Inbox.prototype._handleActionButtonToggleinRowRepeater = function(oEvent){
	//USE oEvent.getParameters().selectedButtonId to perform action according, as it has info of which icon of which row.
	var buttonClicked = oEvent.getSource(), buttonClickedID = oEvent.getParameters().id;
	
	var tasksRowRepString = 'tasksRowRepeater-';
	var indexOfRowNumber = buttonClickedID.indexOf(tasksRowRepString) + tasksRowRepString.length;
	var rowNumber = buttonClickedID.substring(indexOfRowNumber, buttonClickedID.length);
	
	var sActionButtonName = this._removeParentID(buttonClickedID).replace("-" + this.getId()+"--"+tasksRowRepString + rowNumber, "");
	if(buttonClicked.getPressed()){
		this.inboxUtils.deSelectOtherActionButtonsinStreamView(buttonClicked);
		//Show/Hide tooltip
		buttonClicked.setTooltip(this._oBundle.getText(this.constants.mTooltipforActionButtonsinRR.hide[sActionButtonName]));
		var content, action;
		if(sActionButtonName === "customAttributesSegBtn"){
			content = this._getCustomAttributeContentforRowRepeater(buttonClicked, rowNumber);
			action = "customAttributes";
		}else if(sActionButtonName === "commentsSegBtn"){
			content = this._getCommentsContentforRowRepeater(buttonClicked, rowNumber);
			action = "comments";
		}
		
		//add the content
		this._addActionContentinRowRepeater(rowNumber, action, content);
		this.data("previousSelection",buttonClickedID);
	}else{
		//Show/Hide tooltip
		buttonClicked.setTooltip(this._oBundle.getText(this.constants.mTooltipforActionButtonsinRR.show[sActionButtonName]));
		this._removeActionContentinRowRepeater(rowNumber);
	}
};

sap.uiext.inbox.Inbox.prototype.handleCommentAdded = function(oEvent, inBox){
	var feeder = oEvent.getSource();
	var oModel=  inBox.getCoreModel();
	var sCommentTxt = oEvent.getParameter('text');
	var instanceID = decodeURIComponent(this.data("instanceID"));
	var sapOrigin = this.data("SapOrigin");
	var requestOptions = {
     async:false,
     requestUri : inBox.bpmSvcUrl + "/AddComment?InstanceID='"+instanceID+"'&SAP__Origin='"+sapOrigin+"'&Text='"+encodeURIComponent(sCommentTxt)+"'&$format=json",
     method : "POST",
     headers : {
         "Accept" : inBox.constants.acceptHeaderforJSON,
         "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
     }
};

OData.request(requestOptions, function(data, request) {
	var sCommentCreatedByName = data.CreatedByName;
	sCommentCreatedByName? feeder.setFeederSender(sCommentCreatedByName) : feeder.setFeederSender(""); 
	
	
	var oNewComment = new sap.uiext.inbox.composite.InboxComment(feeder.getId()+'-new-'+ feeder.getComments().length, {
		text: data.Text,
		timestamp: inBox.tooltipFormatForDateTime(data.CreatedAt),
		sender: sCommentCreatedByName,
		thumbnailSrc: feeder.getFeederThumbnailSrc()
	});
	feeder.addComment(oNewComment);
	inBox.showMessage("success", inBox._oBundle.getText("INBOX_MSG_COMMENT_ADD_SUCCESS"));
}, function(error) {
//TODO: use enums for messageType.
	inBox.showMessage("error", inBox._oBundle.getText("INBOX_MSG_COMMENT_ADD_FAILED"));
});
}


sap.uiext.inbox.Inbox.prototype._getComments = function(sTaskInstanceID,sSapOriginID){
	var constants = this.constants;
	var oTaskCollectionTCMMetadata = constants.TaskCollection;
	
	var sURIPart = constants.forwardSlash 
								+ oTaskCollectionTCMMetadata.entityName 
										+ "(" 
											+ oTaskCollectionTCMMetadata.properties.instanceID
													+ "='"
															+ sTaskInstanceID + 
																"',"
																	+ constants.sapOrigin 
																		+ "='" 
																			+ sSapOriginID 
																					+ "')" 
																						+ constants.forwardSlash
																							+ oTaskCollectionTCMMetadata.navParam.comments;
    
		var sRequestURI = this.bpmSvcUrl + sURIPart;
		var oModel = this.getCoreModel(), aComments = [];
		
	    var oRequestOptions = {
	        async:false,
	        requestUri : sRequestURI,
	        method : "GET",
	        headers : {
	            Accept : constants.acceptHeaderforJSON,
	            "x-csrf-token" : oModel.oHeaders["x-csrf-token"]
	        }
	    };
    
	    OData.request(oRequestOptions, function(data, request) {
        
        // TO-DO : make this generic
	    	aComments = data.results;
	    }, function(error) {
	    	this.showMessage("error", this._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
	    });
	    return aComments;
};

sap.uiext.inbox.Inbox.prototype._removeActionContentinRowRepeater = function(rowNumber){
	var basicRowRepTaskDetailVLayoutID = this.getId() + '--' + 'rrMainMatrixLayout' + '-' + this.getId() + '--' + 'tasksRowRepeater-';
	var rrMatrixLayout = sap.ui.getCore().byId(basicRowRepTaskDetailVLayoutID + rowNumber);

	if(rrMatrixLayout){
		var lastRowRepMatLayoutID = this.getId() + '--' + 'lastRowOfRowRepeater-' + rowNumber;
		var	lastRowOfRowRepeater = sap.ui.getCore().byId(lastRowRepMatLayoutID);
		if(lastRowOfRowRepeater){
			var lastRowCellID = this.getId() + '--' + 'lastRowCell-'+ rowNumber;
			var	lastRowCell = sap.ui.getCore().byId(lastRowCellID);
			if(lastRowCell){
				lastRowCell.removeAllContent();
			}
			rrMatrixLayout.removeRow(lastRowRepMatLayoutID);
		}
	}
	return rrMatrixLayout;
};

sap.uiext.inbox.Inbox.prototype._addActionContentinRowRepeater = function(rowNumber, action, content){
	var rrMatrixLayout = this._removeActionContentinRowRepeater(rowNumber);
	if(rrMatrixLayout){
		var lastRowRepMatLayoutID = this.getId() + '--' + 'lastRowOfRowRepeater-' + rowNumber;
		var	lastRowOfRowRepeater = sap.ui.getCore().byId(lastRowRepMatLayoutID);
		if(!lastRowOfRowRepeater){
			lastRowOfRowRepeater = new sap.ui.commons.layout.MatrixLayoutRow({
				id : lastRowRepMatLayoutID
			});
		}
		var lastRowCellID = this.getId() + '--' + 'lastRowCell-'+ rowNumber;
		var	lastRowCell = sap.ui.getCore().byId(lastRowCellID);
		if(!lastRowCell){
			lastRowCell = new sap.ui.commons.layout.MatrixLayoutCell({
				id : lastRowCellID,
				padding: sap.ui.commons.layout.Padding.None,
				vAlign: sap.ui.commons.layout.VAlign.Middle,
				colSpan : 3
			});
		}
		action === "comments"? lastRowCell.setHAlign(sap.ui.commons.layout.HAlign.Begin) : lastRowCell.setHAlign(sap.ui.commons.layout.HAlign.End);
		lastRowCell.addContent(content); 
		lastRowOfRowRepeater.addCell(lastRowCell);
		rrMatrixLayout.addRow(lastRowOfRowRepeater);
	}
};

sap.uiext.inbox.Inbox.prototype._searchText= function(sText,sSearchText){
	return sText.toLowerCase().indexOf(sSearchText.toLowerCase()) >= 0 ? true : false;
	
};


sap.uiext.inbox.Inbox.prototype._getValuePresent= function(oData,oNavigation,sNavigationPath,sSearchText){
	var sNavigation,oNavigationEntry,oNavigationEntryInModel;
	if(!oNavigation){
		return false;
	}
	if(oNavigation.__list instanceof Array){
		oNavigationEntry= oNavigation.__list[0];
	}
	else{
		oNavigationEntry= oNavigation.__ref;
	}
	oNavigationEntryInModel= oData[oNavigationEntry];
	if(oNavigationEntry){
		var sNavigationText= oNavigationEntryInModel ? oNavigationEntryInModel[sNavigationPath] : ""; 
		if(sNavigationText){
		
			return this._searchText(sNavigationText, sSearchText);
		}
	}
	return false;
};

sap.uiext.inbox.Inbox.prototype._searchUsers= function(oSearchInput){
	var that = this;
	var oFunctionImport = this.oTCMModel.getFunctionImportHandler();
	oFunctionImport.setServiceURL(this.bpmSvcUrl);
	oFunctionImport.setHeaders({
        Accept : this.constants.acceptHeaderforJSON,
        "x-csrf-token" : this.oModel.oHeaders["x-csrf-token"]
	});
	
	var sSearchTerm = oSearchInput.sSearchTerm;
	var iMaxResults =  oSearchInput.iMaxResults;
	var sSAPOrigin = oSearchInput.sSAPOrigin;
	var oResultData;
	
	oFunctionImport.callSearchUsers({
		SearchPattern: sSearchTerm, MaxResults : iMaxResults, SAP__Origin : sSAPOrigin}, 
			function(oData, response){
					oResultData =  oData;
				}, function(error) {
					that.showMessage("error", that._oBundle.getText("INBOX_MSG_ACTION_FAILED"));
			    });
	
	return oResultData;
};

sap.uiext.inbox.Inbox.prototype._handleForwardButtonVisibilityOnRowSelection = function(aSelectedSAPOrigin){
	var forwardButton = this._getComponent('forwardActionButton');
	var bCompletedTasksSelected = this._isCompletedTasksSelected();
	if (this.isForwardActionEnabled && !bCompletedTasksSelected && aSelectedSAPOrigin.length == 1 ) { 
		forwardButton.setEnabled(true).data("SAP__Origin",aSelectedSAPOrigin);
	}else {
		forwardButton.setEnabled(false);
	} 
};

sap.uiext.inbox.Inbox.prototype.setConfiguration = function(oConfiguration){
	this.oConfiguration = oConfiguration;
};

sap.uiext.inbox.Inbox.prototype._handleSearchUsersClickforForward = function(oEvent){
	var oForwardActionSource = oEvent.oParentSource;
	var sSAPOrigin = oForwardActionSource.data("SAP__Origin");
	if(!sSAPOrigin){
		var oContext = oForwardActionSource.getBindingContext();
		sSAPOrigin = this.getCoreModel().getProperty("SAP__Origin", oContext);
	}
	
	var iMaxResults = this.oConfiguration ? this.oConfiguration.getSearchUersMaxLimit() : 100;
	
	return this._searchUsers({sSearchTerm: this._getComponent('oSearch').getValue(),
							iMaxResults:iMaxResults,
								sSAPOrigin: sSAPOrigin});
};

sap.uiext.inbox.Inbox.prototype._bindTaskActionsProperties = function(oTaskActionObject, sProperty){
    oTaskActionObject.setVisible(true);
    oTaskActionObject.bindProperty("enabled",sProperty);
};

sap.uiext.inbox.Inbox.prototype._bindTaskActions = function(oEvent){
	var claimButton = sap.ui.getCore().byId(this.getId() + '--' + 'claimActionButton');
    var releaseButton = sap.ui.getCore().byId(this.getId() + '--' + 'releaseActionButton');
    var completeButton = sap.ui.getCore().byId(this.getId() + '--' + 'openActionButton');
    var forwardButton = sap.ui.getCore().byId(this.getId() + '--' + 'forwardActionButton');
    var claimLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewClaimAction');
    var releaseLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewReleaseAction');
    var forwardLink = sap.ui.getCore().byId(this.getId() + '--' + 'rrViewForwardAction');
    var dot1 = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator');
    var dot2 = sap.ui.getCore().byId(this.getId() + '--' + 'dotSeparator2');
    
    if(this.typeOfModel === "OData"){
    	
    	if(this.oTcmMetadata._isSupportsClaim()){
    		this._bindTaskActionsProperties(claimButton, "SupportsClaim");
    		this._bindTaskActionsProperties(claimLink, "SupportsClaim");
    		dot1.setVisible(true);
    	}
        if(this.oTcmMetadata._isSupportsRelease()){
    		this._bindTaskActionsProperties(releaseButton, "SupportsRelease");
    		this._bindTaskActionsProperties(releaseLink, "SupportsRelease");
    		dot2.setVisible(true);
    	}
    	if(this.oTcmMetadata._isSupportsForward() && this.isForwardActionEnabled){
    		this._bindTaskActionsProperties(forwardButton, "SupportsForward");
    		this._bindTaskActionsProperties(forwardLink, "SupportsForward");
    	}
    } else { // for Models other than OData
    	this.showAllActions();
    	claimLink.bindProperty("enabled","SupportsClaim");
        releaseLink.bindProperty("enabled","SupportsRelease");
        if(this.isForwardActionEnabled){
        	forwardLink.bindProperty("enabled","SupportsForward");
        }
    }
    
};
}; // end of sap/uiext/inbox/Inbox.js
